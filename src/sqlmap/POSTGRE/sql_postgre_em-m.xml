<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap
	PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
	"http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="POSTGRE_M">
	
	<typeAlias alias="CommonBean" 					type="com.ghayoun.ezjobs.comm.domain.CommonBean" />
	<typeAlias alias="DefJobBean" 					type="com.ghayoun.ezjobs.m.domain.DefJobBean" />
	<typeAlias alias="tDefJobBean" 					type="com.ghayoun.ezjobs.t.domain.DefJobBean" />
	<typeAlias alias="PreJobMissMatchBean" 			type="com.ghayoun.ezjobs.m.domain.PreJobMissMatchBean" />
	<typeAlias alias="BatchResultTotalBean" 		type="com.ghayoun.ezjobs.m.domain.BatchResultTotalBean" />
	<typeAlias alias="JobGraphBean" 				type="com.ghayoun.ezjobs.m.domain.JobGraphBean" />
	<typeAlias alias="TimeInfoBean" 				type="com.ghayoun.ezjobs.m.domain.TimeInfoBean" />
	<typeAlias alias="JobDetailBean" 				type="com.ghayoun.ezjobs.m.domain.JobDetailBean" />
	<typeAlias alias="JobMemoBean" 					type="com.ghayoun.ezjobs.m.domain.JobMemoBean" />
	<typeAlias alias="PreDateBatchScheduleBean" 	type="com.ghayoun.ezjobs.m.domain.PreDateBatchScheduleBean" />
	<typeAlias alias="JobLogBean" 					type="com.ghayoun.ezjobs.m.domain.JobLogBean" />
	<typeAlias alias="JobOpBean" 					type="com.ghayoun.ezjobs.m.domain.JobOpBean" />
	<typeAlias alias="TotalJobStatus" 				type="com.ghayoun.ezjobs.m.domain.TotalJobStatus" />
	<typeAlias alias="WaitDetailBean" 				type="com.ghayoun.ezjobs.m.domain.WaitDetailBean" />
	<typeAlias alias="CtmInfoBean" 					type="com.ghayoun.ezjobs.m.domain.CtmInfoBean" />
	<typeAlias alias="JobDefineInfoBean" 			type="com.ghayoun.ezjobs.m.domain.JobDefineInfoBean" />
	<typeAlias alias="ActiveJobBean" 				type="com.ghayoun.ezjobs.m.domain.ActiveJobBean" />
	<typeAlias alias="JobBasicInfo" 				type="com.ghayoun.ezjobs.t.domain.JobBasicInfo" />
	<typeAlias alias="RelTableBean" 				type="com.ghayoun.ezjobs.m.domain.RelTableBean" />
	<typeAlias alias="DocFileInfoBean" 				type="com.ghayoun.ezjobs.t.domain.DocFileInfoBean" />
	
	
	<select id="dashBoard_appList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > dashBoard_appList */
		select 	order_table as application
			,	SUM(CASE WHEN status like '%Wait%' AND odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '') THEN 1 ELSE 0 END) 	as wait_cnt
			,	SUM(CASE WHEN status='Ended OK'  AND odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '') THEN 1 ELSE 0 END) 		as ok_cnt
			,	SUM(CASE WHEN status='Ended Not OK' AND odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '') THEN 1 ELSE 0 END) 	as not_ok_cnt
		from 
		<iterate property="data_center_items">
		$data_center_items[].active_net_name$job
		group by order_table
		</iterate>
	</select>
	
	<select id="dashBoard_grpList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > dashBoard_grpList */
		select group_name,count(ORDER_ID) as CNT 
		from 
		<iterate property="data_center_items">
		$data_center_items[].active_net_name$job
		where status = 'Ended OK'
		and odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		group by group_name
		</iterate> 
	
	
	</select>
	
	<select id="dashBoard_nodeList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > dashBoard_nodeList */
		select 	CPU_ID
			,	SUM(CASE WHEN status like '%Wait%' THEN 1 ELSE 0 END) as wait_cnt
			,	SUM(CASE WHEN status='Ended OK' THEN 1 ELSE 0 END) as ok_cnt
			,	SUM(CASE WHEN status='Ended Not OK' THEN 1 ELSE 0 END) as not_ok_cnt
			,	SUM(CASE WHEN status='Executing' THEN 1 ELSE 0 END) as exec_cnt
		from
		<iterate property="data_center_items"> 
		$data_center_items[].active_net_name$job
		where	odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		group by CPU_ID
		</iterate> 
	</select>
	
	<select id="dashBoard_errList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > dashBoard_errList */
	select aa.* from (
		select tt1.JOB_NAME,tt1.STATUS,tt2.user_nm, tt1.description
			<isNotEqual property="gb" compareValue="test">
				, sum(cnt) as cnt
			</isNotEqual>
			<isEqual property="gb" compareValue="test">
		  	 	, 0 as cnt
		    </isEqual>
		   from (
		   
		      <iterate property="data_center_items" conjunction="union all"> 
		       select t1.JOB_NAME,t1.STATUS,t1.ORDER_TIME,t2.user_cd_1, t2.description, count(JOB_NAME) as cnt		       
		       from		      
		       		$data_center_items[].active_net_name$job t1 left outer join $SCHEMA$.EZ_JOB_MAPPER  t2 on t1.JOB_NAME = t2.JOB
		       where 1 = 1
		      		and t1.status = 'Ended Not OK'
		       group by  t1.JOB_NAME,t1.STATUS,t1.ORDER_TIME,t2.user_cd_1, t2.description
		      </iterate> 
		      
		      ) tt1 left outer join $SCHEMA$.EZ_USER tt2 on tt1.user_cd_1 = tt2.user_cd
		      where 1 = 1
		<isNotEqual property="gb" compareValue="test">	
		   group by tt1.JOB_NAME,tt1.STATUS,tt2.user_nm, tt1.description
		</isNotEqual>
		     
		      
		   ) aa
		   <isNotEqual property="gb" compareValue="test">
		  	 where rownum <![CDATA[<=]]> 12
		   </isNotEqual>
		   <isEqual property="gb" compareValue="test">
		  	 order by aa.JOB_NAME asc
		   </isEqual>
	   
	</select>
	
	<!-- totalJobStatusList -->
	<select id="totalJobStatusList" resultClass="TotalJobStatus" parameterClass="java.util.Map">
	/* POSTGRE_M > totalJobStatusList */
		select 
			( SELECT SUBSTR(scode_nm, 5) FROM $SCHEMA$.EZ_SCODE WHERE SUBSTR(scode_nm, 1, 3) = u.data_center_code ) AS data_center
			,u.data_center_code
			,u.active_net_name
			,SUM(CASE WHEN STATE_RESULT='dual' THEN 0 ELSE 1 END) AS total_count
			,SUM(CASE WHEN STATE_RESULT='Wait User' THEN 1 ELSE 0 END) AS wait_user
			,SUM(CASE WHEN STATE_RESULT='Wait Time' THEN 1 ELSE 0 END) AS wait_time
			,SUM(CASE WHEN STATE_RESULT='Wait Condition' THEN 1 ELSE 0 END) AS wait_condition
			,SUM(CASE WHEN STATE_RESULT='Wait Host' THEN 1 ELSE 0 END) AS wait_host
			,SUM(CASE WHEN STATE_RESULT='Wait Resource' THEN 1 ELSE 0 END) AS wait_resource
			 <!--,SUM(CASE WHEN STATE_RESULT='Held' THEN 1 ELSE 0 END) AS held-->
			,SUM(CASE WHEN STATE_RESULT='Executing' THEN 1 ELSE 0 END) AS executing
			,SUM(CASE WHEN STATE_RESULT='Ended OK' THEN 1 ELSE 0 END) AS ended_ok
			,SUM(CASE WHEN STATE_RESULT='Ended Not OK' THEN 1 ELSE 0 END) AS ended_not_ok
			,SUM(CASE WHEN STATE_RESULT='Unknown' THEN 1 ELSE 0 END) AS unknown
			,SUM(CASE WHEN STATE_RESULT='Deleted' THEN 1 ELSE 0 END) AS deleted
			,SUM(CASE WHEN STATE_RESULT='Not in AJF' THEN 1 ELSE 0 END) AS etc
		from (	
		
		
		
		<iterate property="data_center_items" conjunction=" UNION ALL ">
			select * from(
				SELECT 
					'$data_center_items[].data_center$' AS data_center
					,'$data_center_items[].data_center_code$' AS data_center_code
					,'$data_center_items[].active_net_name$' AS active_net_name
					,case when DELETE_FLAG='1' then 'Deleted'
			              <!--  when  RTRIM(STATE) like 'Held%' then 'Held' -->
			               <!-- jobOpList when (STATUS='Wait Condition' and trim(FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
			               else STATUS end AS state_result
				FROM $data_center_items[].active_net_name$job 
				where 1 = 1
				
				<isNotEmpty prepend="and" property="odate">
					odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
				</isNotEmpty>				
				<isNotEmpty property="critical">
					<isEqual prepend="and" property="critical" compareValue="1">
						<!-- description = 'CRITICAL' -->
						CRITICAL = '1'
					</isEqual>
				</isNotEmpty>
				<isNotEmpty prepend="and" property="application">
					application = #application#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="group_name">
					group_name = #group_name#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="job_name">
					UPPER(job_name) like UPPER('%'||#job_name#||'%')
				</isNotEmpty>
				
				<isNotEmpty property="search_start_date">
					<isEqual property="date_gubun" compareValue="01">
						and SUBSTR(start_time, 1, 8) BETWEEN REPLACE(#search_start_date#, '/', '') AND REPLACE(#search_start_date#, '/', '')
					</isEqual>
					<isEqual property="date_gubun" compareValue="02">
						and SUBSTR(end_time, 1, 8) BETWEEN REPLACE(#search_end_date#, '/', '') AND REPLACE(#search_end_date#, '/', '')
					</isEqual>
				</isNotEmpty>
				
				UNION ALL
				SELECT 
					'$data_center_items[].data_center$' AS data_center
					,'$data_center_items[].data_center_code$' AS data_center_code
					,'$data_center_items[].active_net_name$' AS active_net_name
					,case when DELETE_FLAG='1' then 'Deleted'
			               <!--when  RTRIM(STATE) like 'Held%' then 'Held' -->
			               <!-- when (STATUS='Wait Condition' and trim(FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
			               else STATUS end AS state_result
				FROM $SCHEMA$.EZ_HISTORY_$data_center_items[].data_center_code$				
				WHERE ORDER_ID NOT IN (select s.order_id from $data_center_items[].active_net_name$job s where s.odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '') )
				
				<isNotEmpty prepend="and" property="odate">
					odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
				</isNotEmpty>
				<isNotEmpty property="critical">
					<isEqual prepend="and" property="critical" compareValue="1">
						<!-- description = 'CRITICAL' -->
						CRITICAL = '1'
					</isEqual>
				</isNotEmpty>
				<isNotEmpty prepend="and" property="application">
					application = #application#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="group_name">
					group_name = #group_name#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="job_name">
					UPPER(job_name) like UPPER('%'||#job_name#||'%')
				</isNotEmpty>
				
				<isNotEmpty property="search_start_date">
					<isEqual property="date_gubun" compareValue="01">
						and SUBSTR(start_time, 1, 8) BETWEEN REPLACE(#search_start_date#, '/', '') AND REPLACE(#search_end_date#, '/', '')
					</isEqual>
					<isEqual property="date_gubun" compareValue="02">
						and SUBSTR(end_time, 1, 8) BETWEEN REPLACE(#search_start_date#, '/', '') AND REPLACE(#search_end_date#, '/', '')
					</isEqual>		
				</isNotEmpty>
				
				
			) tb1
			where 1=1
			<isNotEmpty prepend="and" property="status">
				state_result = #status#
			</isNotEmpty>
		
			UNION ALL
			
			SELECT 
				'$data_center_items[].data_center$' AS data_center
				,'$data_center_items[].data_center_code$' AS data_center_code
				,'$data_center_items[].active_net_name$' AS active_net_name
				,'dual'
			FROM dual
		</iterate>
		) u
		where 1=1
		group by u.data_center,u.data_center_code,u.active_net_name
		order by u.data_center_code
		
	</select>
	
	<!-- fromTimeOrderIdList -->
	<select id="fromTimeOrderIdList" resultClass="java.lang.String" parameterClass="java.util.Map">
	/* POSTGRE_M > fromTimeOrderIdList */
		SELECT order_id 
		FROM $active_net_name$job 
		where odate = #odate# 
		and trim(from_time) is not null
		
		<isNotEmpty prepend="and" property="application">
			application = #application#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="group_name">
			group_name = #group_name#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="job_name">
			a.job_name like '%'||#job_name#||'%'
		</isNotEmpty>
	</select>

	<!-- defJobs -->
	<sql id="defJobListInc">
	/* POSTGRE_M > defJobListInc */
		FROM DEF_JOB a 
			left outer join 
				DEF_SHOUT e on a.job_id = e.job_id AND a.table_id = e.table_id
			left outer join
		        ( SELECT 
		        	job, late_sub, late_time, late_exec,
		        	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_nm,
			        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_nm2,
					( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_nm3,
					( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_nm4,
					( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_nm5,
					( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_nm6,
					( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_nm7,
					( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_nm8,
					( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_nm9,
					( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_nm10,
			        ( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = tb1.grp_cd_1 ) AS grp_nm_1,
			        ( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = tb1.grp_cd_2 ) AS grp_nm_2,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_id,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_id2,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_id3,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_id4,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_id5,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_id6,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_id7,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_id8,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_id9,
					( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_id10,
				error_description, ins_date, success_sms_yn,
		         (case when cc_count != '' then current_timestamp::date - cc_count::date else current_timestamp::date - ins_date::date end) as cc_count,
		         ( SELECT dept_cd FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS dept_cd, jobSchedGb
				   FROM $SCHEMA$.EZ_JOB_MAPPER  tb1 WHERE data_center = #data_center# ) d on a.job_name = d.job
		        , DEF_TABLES b
		where 1=1
<!-- 		AND a.job_name = d.job -->
		AND a.table_id = b.table_id
		and b.data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )

	<!--	<isNotEmpty prepend="and" property="p_application_of_def_text">
			application = #p_application_of_def_text#
		</isNotEmpty>-->

		<!-- 복수 어플리케이션 검색 및 제외(23.03.29 신한캐피탈요건) -->
		<isNotEmpty prepend="and" property="p_application_of_def_text" open="(" close=")">
			<isEqual property="p_chk_app" compareValue="N">
				<iterate property="p_search_text_list" conjunction="OR">
					UPPER(application) = UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
			<isEqual property="p_chk_app" compareValue="Y">
				<iterate property="p_search_text_list" conjunction="AND">
					UPPER(application) != UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def_text">
		    group_name = #p_group_name_of_def_text#
		</isNotEmpty>
		<isEqual property="s_user_gb" compareValue="05">
			and d.dept_cd = $s_dept_cd$
		</isEqual>
		<isNotEmpty prepend="and" property="sub_table_of_def">
			CASE WHEN $SCHEMA$.INSTR(parent_table, '/', 1) = 0 THEN job_name
		            ELSE SUBSTR(parent_table, $SCHEMA$.INSTR(parent_table, '/', 1)+1, LENGTH(parent_table)) || '/' || job_name END = #sub_table_of_def#
		</isNotEmpty>

		<isNotEmpty property="critical">
			<isEqual prepend="and" property="critical" compareValue="1">
				<!-- description = 'CRITICAL' -->
				critical = '1'
			</isEqual>
			<isNotEqual prepend="and" property="critical" compareValue="1">
				critical <![CDATA[ <> ]]> '1'
			</isNotEqual>
		</isNotEmpty>

		<!-- 조회조건 담당자/작업 정보 분리 22.08.25 김은희 -->
		<isNotEmpty prepend="and" property="p_search_text">
			<isEqual property="p_search_gubun" compareValue="user_nm">
				(
				user_nm like '%'||#p_search_text#||'%' or user_id = #p_search_text#
				or user_nm2 like '%'||#p_search_text#||'%' or user_id2 = #p_search_text#
				or user_nm3 like '%'||#p_search_text#||'%' or user_id3 = #p_search_text#
				or user_nm4 like '%'||#p_search_text#||'%' or user_id4 = #p_search_text#
				or user_nm5 like '%'||#p_search_text#||'%' or user_id5 = #p_search_text#
				or user_nm6 like '%'||#p_search_text#||'%' or user_id6 = #p_search_text#
				or user_nm7 like '%'||#p_search_text#||'%' or user_id7 = #p_search_text#
				or user_nm8 like '%'||#p_search_text#||'%' or user_id8 = #p_search_text#
				or user_nm9 like '%'||#p_search_text#||'%' or user_id9 = #p_search_text#
				or user_nm10 like '%'||#p_search_text#||'%' or user_id10 = #p_search_text#
				)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm1">
				(user_nm like '%'||#p_search_text#||'%' or user_id = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm2">
				(user_nm2 like '%'||#p_search_text#||'%' or user_id2 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm3">
				(user_nm3 like '%'||#p_search_text#||'%' or user_id3 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm4">
				(user_nm4 like '%'||#p_search_text#||'%' or user_id4 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm5">
				(user_nm5 like '%'||#p_search_text#||'%' or user_id5 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm6">
				(user_nm6 like '%'||#p_search_text#||'%' or user_id6 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm7">
				(user_nm7 like '%'||#p_search_text#||'%' or user_id7 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm8">
				(user_nm8 like '%'||#p_search_text#||'%' or user_id8 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm9">
				(user_nm9 like '%'||#p_search_text#||'%' or user_id9 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm10">
				(user_nm10 like '%'||#p_search_text#||'%' or user_id10 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="grp_nm1">
				(grp_nm_1 like '%'||#p_search_text#||'%' )
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="grp_nm2">
				(grp_nm_2 like '%'||#p_search_text#||'%' )
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="job_name">
				UPPER(job_name) like UPPER('%'||#p_search_text#||'%')
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="description">
				description like '%'||#p_search_text#||'%'
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="error_description">
				error_description like '%'||#p_search_text#||'%'
			</isEqual>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_search_text2">
			<!--<isEqual property="p_search_gubun2" compareValue="job_name">
									UPPER(job_name) like UPPER('%'||#p_search_text2#||'%')
								</isEqual>-->
			<!-- 작업명 다중 검색 -->
			<isEqual property="p_search_gubun2" compareValue="job_name">
				<isNotEmpty property="p_search_text2" open="(" close=")">
					<iterate property="p_search_job_name_list" conjunction="OR">
						UPPER(job_name) like UPPER('%'||#p_search_job_name_list[]#||'%')
					</iterate>
				</isNotEmpty>
			</isEqual>
			<isEqual property="p_search_gubun2" compareValue="description">
				description like '%'||#p_search_text2#||'%'
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="error_description">
				error_description like '%'||#p_search_text2#||'%'
			</isEqual>
			<isEqual property="p_search_gubun2" compareValue="cmd_line">
				cmd_line like '%'||#p_search_text2#||'%'
			</isEqual>
		</isNotEmpty>

		<isNotEmpty property="p_mcode_nm" prepend="AND">
			d.mcode_nm = #p_mcode_nm#
		</isNotEmpty>
		<isNotEmpty property="p_scode_nm" prepend="AND">
			d.scode_nm in ($p_scode_nm$)
		</isNotEmpty>
		<isNotEmpty property="p_moneybatchjob" prepend="AND">
			moneybatchjob = #p_moneybatchjob#
		</isNotEmpty>
		<isNotEmpty property="p_critical" prepend="AND">
			critical = #p_critical#
		</isNotEmpty>

		<isNotEmpty property="p_cc_count" prepend="AND">
			cc_count >= #p_cc_count#::integer
			<!-- cc_count::integer >= #cc_count#::integer -->
		</isNotEmpty>

		<!-- 배치등록정보 수행서버 조회조건 추가 23.08.21 -->
		<isNotEmpty prepend="and" property="p_node_id">
			node_id = #p_node_id#
		</isNotEmpty>
	</sql>
	<!--배치등록정보-->
	<select id="defJobList" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > defJobList */
			SELECT *
			  FROM (
			  		SELECT sched_table, table_id, application, group_name, job_name, task_type, memname, from_time, to_time, days_cal, 
			  			   day_str, cmd_line, w_day_str, weeks_cal, job_id, monthstr, cyclic, description, node_grp, appl_type, dates_str, 
			  			   user_nm, user_nm2, user_nm3, user_nm4, user_nm5, user_nm6, user_nm7, user_nm8, user_nm9, user_nm10,
			  			   grp_nm_1, grp_nm_2, error_description, critical, ins_date,
			  			   dept_cd, jobSchedGb, user_daily, cc_count, late_sub, late_time, late_exec, success_sms_yn,
			  			   ARRAY_TO_STRING(ARRAY_AGG(when_cond),',') as when_cond,  ARRAY_TO_STRING(ARRAY_AGG($SCHEMA$.NVL(shout_time,'')),',') as shout_time,
			  			   ARRAY_TO_STRING(ARRAY_AGG($SCHEMA$.NVL(message,'')),',') as message, cmjob_transfer, smart_job_yn, doc_state
			  		  FROM (

							SELECT  /*+no_merge leading(d) use_hash(d a b) */
									a.parent_table AS sched_table
									,a.TABLE_ID AS table_id
									,a.APPLICATION AS application
									,a.GROUP_NAME AS group_name
									,trim(a.JOB_NAME) AS job_name
									,a.task_type
									,trim(a.MEMNAME) AS memname
									,$SCHEMA$.NVL(a.FROM_TIME,'') AS from_time
									,$SCHEMA$.NVL(a.TO_TIME,'') AS to_time
									,CASE WHEN trim(a.DAYS_CAL) IS NULL THEN 'OTHER' ELSE a.DAYS_CAL END AS days_cal
							        ,$SCHEMA$.NVL(a.DAY_STR,'') AS day_str
							        ,trim(a.CMD_LINE) AS cmd_line
							        ,CASE WHEN trim(a.W_DAY_STR) IS NULL THEN 'OTHER' ELSE a.W_DAY_STR END AS w_day_str
							        ,CASE WHEN trim(a.WEEKS_CAL) IS NULL THEN 'OTHER' ELSE a.WEEKS_CAL END AS weeks_cal
							        ,a.JOB_ID AS job_id
							        ,$SCHEMA$.NVL(a.MONTH_1,'0') || $SCHEMA$.NVL(a.MONTH_2,'0') || $SCHEMA$.NVL(a.MONTH_3,'0') || $SCHEMA$.NVL(a.MONTH_4,'0') || $SCHEMA$.NVL(a.MONTH_5,'0') || $SCHEMA$.NVL(a.MONTH_6,'0') || $SCHEMA$.NVL(a.MONTH_7,'0') || $SCHEMA$.NVL(a.MONTH_8,'0') || $SCHEMA$.NVL(a.MONTH_9,'0') || $SCHEMA$.NVL(a.MONTH_10,'0') || $SCHEMA$.NVL(a.MONTH_11,'0') || $SCHEMA$.NVL(a.MONTH_12,'0') AS monthstr
									,CASE WHEN a.cyclic = '1' THEN 'Y' ELSE 'N' END AS cyclic
						         	,a.description
						         	,a.node_id AS node_grp
						         	,a.appl_type
						         	,trim(a.dates_str) AS dates_str
									,user_nm
									,user_nm2
									,user_nm3
									,user_nm4
									,user_nm5
									,user_nm6
									,user_nm7
									,user_nm8
									,user_nm9
									,user_nm10
									,grp_nm_1
									,grp_nm_2
									,error_description
									,a.critical
									,to_char(d.ins_date,'YYYY-MM-DD HH24:MI:SS') ins_date
									,d.dept_cd
									,d.jobSchedGb
									,b.user_daily

									, d.cc_count
									, d.late_sub
									, d.late_time
									, d.late_exec
									, e.when_cond
									, e.shout_time
									, e.message
									, d.success_sms_yn
									,(case when (select e.job from $SCHEMA$.ez_job_mapper e where e.job = a.job_name) is not null then 'Y' else 'N' end) as cmjob_transfer
									,(case when (select f.task_type from DEF_JOB f where f.job_name = split_part( a.parent_table, '/', 1)) = 'SMART Table' then 'Y' else 'N' end) as smart_job_yn
									,(select tb1.doc_cd || ',' || tb2.state_cd from $SCHEMA$.ez_doc_03 tb1 inner join $SCHEMA$.ez_doc_master tb2 on tb1.doc_cd = tb2.doc_cd where tb1.job_name = a.JOB_NAME and (tb2.state_cd = '00' OR tb2.state_cd = '01') and tb2.apply_cd is null  and tb2.del_yn = 'N'
									  UNION ALL
									  select tb1.doc_cd || ',' || tb2.state_cd from $SCHEMA$.ez_doc_04 tb1 inner join $SCHEMA$.ez_doc_master tb2 on tb1.doc_cd = tb2.doc_cd where tb1.job_name = a.JOB_NAME and (tb2.state_cd = '00' OR tb2.state_cd = '01') and tb2.apply_cd is null  and tb2.del_yn = 'N'
								      UNION ALL
									  select tb1.doc_cd || ',' || tb2.state_cd from $SCHEMA$.ez_doc_06_detail tb1 inner join $SCHEMA$.ez_doc_master tb2 on tb1.doc_cd = tb2.doc_cd where tb1.job_name = a.JOB_NAME and (tb2.state_cd = '00' OR tb2.state_cd = '01') and tb2.apply_cd is null  and tb2.del_yn = 'N') as doc_state
									<include refid="defJobListInc" />

							ORDER BY JOB_NAME DESC
						)TTT
						group by sched_table, table_id, application, group_name, job_name, task_type, memname, from_time, to_time, days_cal, 
			  			   day_str, cmd_line, w_day_str, weeks_cal, job_id, monthstr, cyclic, description, node_grp, appl_type, dates_str, 
			  			   user_nm, user_nm2, user_nm3, user_nm4, user_nm5, user_nm6, user_nm7, user_nm8, user_nm9, user_nm10,
			  			   grp_nm_1, grp_nm_2, error_description, critical,  ins_date,
			  			   dept_cd, jobSchedGb, user_daily, cc_count, late_sub, late_time, late_exec, success_sms_yn, cmjob_transfer, smart_job_yn, doc_state
				) tb1

				WHERE 1 = 1
				<isNotEmpty prepend="and" property="p_sched_table">
					sched_table in
					<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
						#p_search_text_folder_list[]# 
					</iterate>
				</isNotEmpty>
				<isNotEmpty prepend="and" property="p_application_of_def">
					application = #p_application_of_def#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="p_group_name_of_def">
					group_name = #p_group_name_of_def#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="p_cmjob_transfer">
					cmjob_transfer = #p_cmjob_transfer#
				</isNotEmpty>
				<isNotEmpty property="pagingNum">
					OFFSET $startRowNum$ ROWS FETCH FIRST $pagingNum$ ROWS ONLY
				</isNotEmpty>
	</select>

	<!-- 배치등록정보 건수 -->
	<select id="defJobListCnt" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > defJobListCnt */
			SELECT count(*) as total_cnt
			  FROM (
			  		SELECT sched_table, table_id, application, group_name, job_name, memname, from_time, to_time, days_cal, 
			  			   day_str, cmd_line, w_day_str, weeks_cal, job_id, monthstr, cyclic, description, node_grp, dates_str, 
			  			   user_nm, user_nm2, error_description, ins_date,
			  			   dept_cd, jobSchedGb, user_daily, cc_count, late_sub, late_time, late_exec, success_sms_yn,
			  			   ARRAY_TO_STRING(ARRAY_AGG(when_cond),',') as when_cond,  ARRAY_TO_STRING(ARRAY_AGG($SCHEMA$.NVL(shout_time,'')),',') as shout_time, cmjob_transfer
			  		  FROM (

							SELECT /*+no_merge leading(d) use_hash(d a b) */
									a.parent_table AS sched_table
									,a.TABLE_ID AS table_id
									,a.APPLICATION AS application
									,a.GROUP_NAME AS group_name
									,trim(a.JOB_NAME) AS job_name
									,trim(a.MEMNAME) AS memname
									,$SCHEMA$.NVL(a.FROM_TIME,'') AS from_time
									,$SCHEMA$.NVL(a.TO_TIME,'') AS to_time
									,CASE WHEN trim(a.DAYS_CAL) IS NULL THEN 'OTHER' ELSE a.DAYS_CAL END AS days_cal
							        ,$SCHEMA$.NVL(a.DAY_STR,'') AS day_str
							        ,trim(a.CMD_LINE) AS cmd_line
							        ,CASE WHEN trim(a.W_DAY_STR) IS NULL THEN 'OTHER' ELSE a.W_DAY_STR END AS w_day_str
							        ,CASE WHEN trim(a.WEEKS_CAL) IS NULL THEN 'OTHER' ELSE a.WEEKS_CAL END AS weeks_cal
							        ,a.JOB_ID AS job_id
							        ,$SCHEMA$.NVL(a.MONTH_1,'0') || $SCHEMA$.NVL(a.MONTH_2,'0') || $SCHEMA$.NVL(a.MONTH_3,'0') || $SCHEMA$.NVL(a.MONTH_4,'0') || $SCHEMA$.NVL(a.MONTH_5,'0') || $SCHEMA$.NVL(a.MONTH_6,'0') || $SCHEMA$.NVL(a.MONTH_7,'0') || $SCHEMA$.NVL(a.MONTH_8,'0') || $SCHEMA$.NVL(a.MONTH_9,'0') || $SCHEMA$.NVL(a.MONTH_10,'0') || $SCHEMA$.NVL(a.MONTH_11,'0') || $SCHEMA$.NVL(a.MONTH_12,'0') AS monthstr
									,CASE WHEN a.cyclic = '1' THEN 'Y' ELSE 'N' END AS cyclic
						         	,a.description
						         	,a.node_id AS node_grp
						         	,trim(a.dates_str) AS dates_str
									,user_nm
									,user_nm2
									,error_description
									,to_char(d.ins_date,'YYYY-MM-DD HH24:MI:SS') ins_date
									,d.dept_cd
									,d.jobSchedGb
									,b.user_daily

									, d.cc_count
									, d.late_sub
									, d.late_time
									, d.late_exec
									, d.success_sms_yn
									, e.when_cond
									, e.shout_time
									, (case when (select e.job from $SCHEMA$.ez_job_mapper e where e.job = a.job_name) is not null then 'Y' else 'N' end) as cmjob_transfer
									<include refid="defJobListInc" />

							ORDER BY JOB_NAME DESC
						)TTT
						group by sched_table, table_id, application, group_name, job_name, memname, from_time, to_time, days_cal, 
			  			   day_str, cmd_line, w_day_str, weeks_cal, job_id, monthstr, cyclic, description, node_grp, dates_str, 
			  			   user_nm, user_nm2, error_description, ins_date,
			  			   dept_cd, jobSchedGb, user_daily, cc_count, late_sub, late_time, late_exec, success_sms_yn, cmjob_transfer
				) tb1

				WHERE 1 = 1
				<isNotEmpty prepend="and" property="p_sched_table">
					sched_table in
					<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
						#p_search_text_folder_list[]# 
					</iterate>
				</isNotEmpty>
				<isNotEmpty prepend="and" property="p_application_of_def">
		<!-- 			application in ($p_application_of_def$) -->
					application = #p_application_of_def#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="p_group_name_of_def">
					group_name = #p_group_name_of_def#
				</isNotEmpty>
				<isNotEmpty prepend="and" property="p_cmjob_transfer">
					cmjob_transfer = #p_cmjob_transfer#
				</isNotEmpty>

	</select>

	<select id="defJobExcelList" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > defJobExcelList */
		SELECT *
		  FROM (
		  		SELECT ttt.*
		  		  FROM (
						SELECT tb1.*
					  	  FROM (
								SELECT TTT.*
					  		  FROM (
				                	SELECT  trim(a.JOB_NAME) AS job_name,
					                        trim(a.MEMNAME) AS memname,
					                        a.mem_lib,
					                        a.description,
					                        a.owner,
					                        a.table_id as table_id,
					                        a.job_id as job_id ,
					                        a.day_str as month_days,
											a.days_cal,
											a.month_1,
											a.month_2,
											a.month_3,
											a.month_4,
											a.month_5,
											a.month_6,
											a.month_7,
											a.month_8,
											a.month_9,
											a.month_10,
											a.month_11,
											a.month_12,
											case when a.days_and_or = 'A' then '1' when a.days_and_or = 'O' then '0' else a.days_and_or end as schedule_and_or,
											a.w_day_str as week_days,
											a.weeks_cal,
					                        a.parent_table AS sched_table,
					                        a.APPLICATION AS application,
					                        a.group_name,
					                        trim(a.CMD_LINE) AS cmd_line,
					                        $SCHEMA$.NVL(a.DAY_STR,'') AS day_str,
					                        CASE WHEN trim(a.DAYS_CAL) IS NULL THEN 'OTHER' ELSE a.DAYS_CAL END AS days_cal,
					                        CASE WHEN trim(a.W_DAY_STR) IS NULL THEN 'OTHER' ELSE a.W_DAY_STR END AS w_day_str,
					                        CASE WHEN trim(a.WEEKS_CAL) IS NULL THEN 'OTHER' ELSE a.WEEKS_CAL END AS weeks_cal,
					                        CASE WHEN a.days_and_or = 'O' THEN 'OR'
					                             WHEN a.days_and_or = 'A' THEN 'AND'
					                             ELSE '' END AS days_and_or,
					                        $SCHEMA$.NVL(a.MONTH_1,'0') || $SCHEMA$.NVL(a.MONTH_2,'0') || $SCHEMA$.NVL(a.MONTH_3,'0') || $SCHEMA$.NVL(a.MONTH_4,'0') || $SCHEMA$.NVL(a.MONTH_5,'0') || $SCHEMA$.NVL(a.MONTH_6,'0') || $SCHEMA$.NVL(a.MONTH_7,'0') || $SCHEMA$.NVL(a.MONTH_8,'0') || $SCHEMA$.NVL(a.MONTH_9,'0') || $SCHEMA$.NVL(a.MONTH_10,'0') || $SCHEMA$.NVL(a.MONTH_11,'0') || $SCHEMA$.NVL(a.MONTH_12,'0') as  monthstr,
					                        trim(a.dates_str) AS dates_str,
					                        a.node_id AS node_grp,
					                        CASE WHEN a.confirm_flag = '0' THEN 'N'
					                             WHEN a.confirm_flag = '1' THEN 'Y'
					                             ELSE '' END AS confirm_flag,
					                        $SCHEMA$.NVL(a.FROM_TIME,'') AS from_time,
					                        $SCHEMA$.NVL(a.TO_TIME,'') AS to_time,
					                        a.max_wait,
					                        c.in_condition AS in_condition,
					                        d.out_condition AS out_condition,
					                        $SCHEMA$.NVL(a.priority,'') as priority
											,$SCHEMA$.NVL(a.max_rerun,0) as rerun_max
											,$SCHEMA$.NVL(a.interval,'') as rerun_interval
											,$SCHEMA$.NVL(a.ind_cyclic,'') as count_cyclic_from
											,a.task_type as task_type
											,e.user_id AS author
											,a.cyclic
						   		    	    ,( CASE WHEN A.CRITICAL = '1' THEN '1' ELSE '0' END ) AS critical_yn

						   					,e.user_nm
									        ,e.late_sub
											,e.late_time
											,e.late_exec
											,e.batchjobGrade
											,e.error_description
											,user_id_2,user_id_3,user_id_4,user_id_5,user_id_6,user_id_7,user_id_8,user_id_9,user_id_10, grp_nm_1, grp_nm_2
											, e.success_sms_yn ,a.node_id, a.specific_times, a.interval_sequence, a.cyclic_type
											,(select min(creation_date||creation_time) from def_ver_job where job_name = a.job_name group by job_name) AS creation_time
											,a.active_from, a.active_till

											,e.sms_1, e.sms_2, e.sms_3, e.sms_4,e.sms_5, e.sms_6, e.sms_7, e.sms_8, e.sms_9, e.sms_10, e.grp_sms_1, e.grp_sms_2
									        ,e.mail_1, e.mail_2, e.mail_3, e.mail_4,e.mail_5, e.mail_6, e.mail_7, e.mail_8, e.mail_9, e.mail_10, e.grp_mail_1, e.grp_mail_2
									        ,a.conf_cal, a.shift, a.shift_num, a.tolerance

									  FROM 	DEF_JOB a LEFT OUTER JOIN ( SELECT job_id, table_id, ARRAY_TO_STRING(ARRAY_AGG(condition),',') AS in_condition FROM DEF_LNKI_P GROUP BY job_id, table_id ) c
									    ON 	a.table_id = c.table_id
									 	AND a.job_id = c.job_id
									 	 	LEFT OUTER JOIN ( SELECT job_id, table_id, ARRAY_TO_STRING(ARRAY_AGG(condition),',') AS out_condition FROM DEF_LNKO_P GROUP BY job_id, table_id ) d
									  	 ON a.table_id = d.table_id
									 	AND a.job_id = d.job_id
									 	    ,
									        ( SELECT job
									        		, ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_nm
									        		, ( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_id
											        ,late_sub
													,late_time
													,late_exec
													,batchjobGrade
													,error_description
													,( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_2 ) AS user_nm_2
													,( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_3 ) AS user_nm_3
													,( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_4 ) AS user_nm_4
													,( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_5 ) AS user_nm_5
													,( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_6 ) AS user_nm_6
													,( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_7 ) AS user_nm_7
													,( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_8 ) AS user_nm_8
													,( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_9 ) AS user_nm_9
													,( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_10 ) AS user_nm_10
													,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_2 ) AS user_id_2
													,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_3 ) AS user_id_3
													,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_4 ) AS user_id_4
													,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_5 ) AS user_id_5
													,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_6 ) AS user_id_6
													,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_7 ) AS user_id_7
													,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_8 ) AS user_id_8
													,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_9 ) AS user_id_9
													,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = user_cd_10 ) AS user_id_10
													,( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = grp_cd_1 ) AS grp_nm_1
													,( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = grp_cd_2 ) AS grp_nm_2
													,jobSchedGb
												    ,user_cd_1, user_cd_2, user_cd_3, user_cd_4, user_cd_5, user_cd_6, user_cd_7, user_cd_8, user_cd_9, user_cd_10
									        		,success_sms_yn
        											,(case when cc_count != '' then current_timestamp::date - cc_count::date else current_timestamp::date - ins_date::date end) as cc_count

													,sms_1, sms_2, sms_3, sms_4,sms_5, sms_6, sms_7, sms_8, sms_9, sms_10, grp_sms_1, grp_sms_2
													,mail_1, mail_2, mail_3, mail_4,mail_5, mail_6, mail_7, mail_8, mail_9, mail_10, grp_mail_1, grp_mail_2
											   FROM $SCHEMA$.EZ_JOB_MAPPER  tb1 WHERE data_center = #data_center# ) e
									     	, DEF_TABLES b
							where 1=1
							AND a.table_id = b.table_id
							AND a.job_name = e.job
							AND b.data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )
							AND task_type != 'SMART Table'
       						AND task_type != 'Sub-Table'	

							<isNotEmpty prepend="and" property="p_sched_table">
								parent_table in
								<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
									#p_search_text_folder_list[]# 
								</iterate>
							</isNotEmpty>
							<isNotEmpty prepend="and" property="p_application_of_def">
								<!-- application in ($p_application_of_def$) -->
								application = #p_application_of_def#
							</isNotEmpty>
							<isNotEmpty prepend="and" property="p_group_name_of_def">
								group_name = #p_group_name_of_def#
							</isNotEmpty>

							<isNotEmpty prepend="and" property="p_application_of_def_text">
								application = #p_application_of_def_text#
							</isNotEmpty>
							<isNotEmpty prepend="and" property="p_group_name_of_def_text">
							    group_name = #p_group_name_of_def_text#
							</isNotEmpty>

							<isNotEmpty prepend="and" property="sub_table_of_def">
								CASE WHEN $SCHEMA$.INSTR(parent_table, '/', 1) = 0 THEN job_name
					            ELSE SUBSTR(parent_table, $SCHEMA$.INSTR(parent_table, '/', 1)+1, LENGTH(parent_table)) || '/' || job_name END = #sub_table_of_def#
							</isNotEmpty>
							<isNotEmpty property="critical">
								<isEqual prepend="and" property="critical" compareValue="1">
									<!-- description = 'CRITICAL' -->
									critical = '1'
								</isEqual>
								<isNotEqual prepend="and" property="critical" compareValue="1">
									<!-- $SCHEMA$.NVL(description,'N') <![CDATA[ <> ]]> 'CRITICAL' -->
									critical <![CDATA[ <> ]]> '1'
								</isNotEqual>
							</isNotEmpty>

							<!-- 조회조건 담당자/작업 정보 분리 22.08.25 김은희 -->
							<isNotEmpty prepend="and" property="p_search_text">
								<isEqual property="p_search_gubun" compareValue="user_nm">
									(
									user_nm like '%'||#p_search_text#||'%' or user_id = #p_search_text#
									or user_nm_2 like '%'||#p_search_text#||'%' or user_id_2 = #p_search_text#
									or user_nm_3 like '%'||#p_search_text#||'%' or user_id_3 = #p_search_text#
									or user_nm_4 like '%'||#p_search_text#||'%' or user_id_4 = #p_search_text#
									or user_nm_5 like '%'||#p_search_text#||'%' or user_id_5 = #p_search_text#
									or user_nm_6 like '%'||#p_search_text#||'%' or user_id_6 = #p_search_text#
									or user_nm_7 like '%'||#p_search_text#||'%' or user_id_7 = #p_search_text#
									or user_nm_8 like '%'||#p_search_text#||'%' or user_id_8 = #p_search_text#
									or user_nm_9 like '%'||#p_search_text#||'%' or user_id_9 = #p_search_text#
									or user_nm_10 like '%'||#p_search_text#||'%' or user_id_10 = #p_search_text#
									)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm1">
									(user_nm like '%'||#p_search_text#||'%' or user_id = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm2">
									(user_nm_2 like '%'||#p_search_text#||'%' or user_id_2 = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm3">
									(user_nm_3 like '%'||#p_search_text#||'%' or user_id_3 = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm4">
									(user_nm_4 like '%'||#p_search_text#||'%' or user_id_4 = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm5">
									(user_nm_5 like '%'||#p_search_text#||'%' or user_id_5 = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm6">
									(user_nm_6 like '%'||#p_search_text#||'%' or user_id_6 = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm7">
									(user_nm_7 like '%'||#p_search_text#||'%' or user_id_7 = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm8">
									(user_nm_8 like '%'||#p_search_text#||'%' or user_id_8 = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm9">
									(user_nm_9 like '%'||#p_search_text#||'%' or user_id_9 = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="user_nm10">
									(user_nm_10 like '%'||#p_search_text#||'%' or user_id_10 = #p_search_text#)
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="grp_nm1">
									(grp_nm_1 like '%'||#p_search_text#||'%' )
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="grp_nm2">
									(grp_nm_2 like '%'||#p_search_text#||'%' )
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="job_name">
									UPPER(a.job_name) like UPPER('%'||#p_search_text#||'%')
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="description">
									description like '%'||#p_search_text#||'%'
								</isEqual>
								<isEqual property="p_search_gubun" compareValue="error_description">
									error_description like '%'||#p_search_text#||'%'
								</isEqual>
							</isNotEmpty>
							<isNotEmpty prepend="and" property="p_search_text2">
								<!--<isEqual property="p_search_gubun2" compareValue="job_name">
									UPPER(job_name) like UPPER('%'||#p_search_text2#||'%')
								</isEqual>-->
								<!-- 작업명 다중 검색 -->
								<isEqual property="p_search_gubun2" compareValue="job_name">
									<isNotEmpty property="p_search_text2" open="(" close=")">
										<iterate property="p_search_job_name_list" conjunction="OR">
											UPPER(job_name) like UPPER('%'||#p_search_job_name_list[]#||'%')
										</iterate>
									</isNotEmpty>
								</isEqual>
								<isEqual property="p_search_gubun2" compareValue="description">
									description like '%'||#p_search_text2#||'%'
								</isEqual>
								<isEqual property="p_search_gubun2" compareValue="user_nm">
									(user_nm like '%'||#p_search_text2#||'%' or user_id = #p_search_text2#)
								</isEqual>
								<isEqual property="p_search_gubun2" compareValue="error_description">
									error_description like '%'||#p_search_text2#||'%'
								</isEqual>
							</isNotEmpty>

							<isNotEmpty property="p_mcode_nm" prepend="AND">
								e.mcode_nm = #p_mcode_nm#
							</isNotEmpty>
							<isNotEmpty property="p_scode_nm" prepend="AND">
								<!-- e.scode_nm = #p_scode_nm# -->
								e.scode_nm in ($p_scode_nm$)
							</isNotEmpty>

							<isNotEmpty property="p_cc_count" prepend="AND">
								cc_count >= #p_cc_count#::integer
								<!-- cc_count::integer >= #cc_count#::integer -->
							</isNotEmpty>
							<!-- 엑셀 다운 시 수행서버 적용되게 추가 (2023.11.16 최호연)-->
							<isNotEmpty property="p_node_id" prepend="AND">
								a.node_id = #p_node_id#
							</isNotEmpty>

							<!-- 폴더 권한을 부서명과 동일하게 셋팅 -->
							<!-- 요건 변경 : 선택한 기본 테이블명만 조회 가능  (2020.07.03 강명준) -->

							<!-- 운영자는 모든 폴더 조회 가능 -->
							<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
							<!--
							<isNotEqual property="s_user_gb" compareValue="02">
								AND sched_table = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = $s_user_cd$)
							</isNotEqual>
							-->

							ORDER BY b.SCHED_TABLE, a.GROUP_NAME, a.JOB_NAME )TTT
						) tb1
				) ttt


			) ttt
		 <isNotEmpty property="pagingNum">
			OFFSET $startRowNum$ ROWS FETCH FIRST $pagingNum$ ROWS ONLY
		</isNotEmpty>
	</select>

	<!-- preJobMissMatch -->
	<sql id="preJobMissMatchListInc">
	/* POSTGRE_M > preJobMissMatchListInc */
		FROM (
			<iterate property="active_net_names" conjunction=" UNION ALL ">
			SELECT  a.odate, a.order_id, a.order_table, a.application, a.group_name, a.job_name, a.memname
					, '$active_net_names[]$'::text AS active_net_name
			FROM $active_net_names[]$job a
			</iterate>
			) a
			,(
			SELECT distinct a.order_id, a.condition, a.active_net_name
			FROM (
					<iterate property="active_net_names" conjunction=" UNION ALL ">
					SELECT  a.order_id, a.condition, '$active_net_names[]$'::text AS active_net_name  FROM $active_net_names[]$lnki_p a
					</iterate>
					) a
					,(
						SELECT condition
						FROM (
								(
								<iterate property="active_net_names" conjunction=" UNION ALL ">
								SELECT condition
								FROM $active_net_names[]$lnki_p
								where odate = REPLACE(SUBSTR(#p_odate#, 5, 8), '/', '')
								</iterate>
								)
								EXCEPT
								(
								<iterate property="active_net_names" conjunction=" UNION ALL ">
								SELECT condition FROM $active_net_names[]$lnko_p
								 where odate = REPLACE(SUBSTR(#p_odate#, 5, 8), '/', '')
								</iterate>
                       			)
                    		) tb1
               			) b
				WHERE a.condition = b.condition
			) c
		WHERE a.order_id = c.order_id
		  AND a.odate = REPLACE(SUBSTR(#p_odate#, 3, 8), '/', '')
		  AND a.active_net_name = c.active_net_name

		<isNotEmpty prepend="and" property="p_sched_table">
			order_table = #p_sched_table#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
			application in ($p_application_of_def$)
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="sub_table_of_def">
			job_name = #sub_table_of_def#
		</isNotEmpty>

		<isNotEmpty prepend="and" property="p_search_name">
			$p_search_select$ like ''||#p_search_name#||'%'
		</isNotEmpty>

	</sql>

	<select id="preJobMissMatchListCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > preJobMissMatchListCnt */
 	<![CDATA[
		SELECT count(*) as total_count
	]]>
		<include refid="preJobMissMatchListInc" />
<!-- SELECT 3 as total_count	 -->
	</select>

	<select id="preJobMissMatchList" resultClass="PreJobMissMatchBean" parameterClass="java.util.Map">
	/* POSTGRE_M > preJobMissMatchList */
 	<![CDATA[
		SELECT * FROM(
			SELECT TTT.* FROM(

		SELECT
			a.odate
			,a.order_table
			,a.application
			,a.group_name
			,trim(a.job_name) AS job_name
			,trim(a.memname) AS memname
			, C.CONDITION

	]]>
		<include refid="preJobMissMatchListInc" />
		ORDER BY ORDER_TABLE, GROUP_NAME, MEMNAME

			)TTT
			,
			( SELECT job, data_center FROM  $SCHEMA$.EZ_JOB_MAPPER  ) tt2
			where 1=1
			and ttt.job_name = tt2.job
			<isNotEmpty prepend="and" property="data_center">
				tt2.data_center =  #data_center#
			</isNotEmpty>
		) tb1

	</select>

	<!-- preDateBatchSchedule -->
	<sql id="preDateBatchScheduleListInc">
	/* POSTGRE_M > preDateBatchScheduleListInc */
	<![CDATA[
		FROM $SCHEMA$.EZ_CMR_RPLN A , (select * from $SCHEMA$.EZ_JOB_MAPPER  where data_center=#data_center#) B
		   
				 , DEF_JOB C, DEF_TABLES D
	   WHERE 1 = 1
	    AND A.JOB_NAME = B.JOB
		AND A.JOB_NAME = C.JOB_NAME 
		AND C.table_id = D.table_id
		
	]]>
	
		<isNotEmpty prepend="and" property="p_sched_table">
			D.sched_table in
			<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
				#p_search_text_folder_list[]# 
			</iterate>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
			C.application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			C.group_name = #p_group_name_of_def#
		</isNotEmpty>
		<isNotEmpty property="p_s_odate">
			AND a.odate >= REPLACE(#p_s_odate#, '/', '')
		</isNotEmpty>
		<isNotEmpty property="p_s_odate">
			AND a.odate <![CDATA[ <= ]]> REPLACE(#p_e_odate#, '/', '')
		</isNotEmpty>		
		<isNotEmpty prepend="and" property="sub_table_of_def">
			CASE WHEN $SCHEMA$.INSTR(parent_table, '/', 1) = 0 THEN job_name 
		            ELSE SUBSTR(parent_table, $SCHEMA$.INSTR(parent_table, '/', 1)+1, LENGTH(parent_table)) || '/' || job_name END = #sub_table_of_def#
		</isNotEmpty>
		
		<isNotEmpty property="s_from_time">
			AND from_time >= #s_from_time#
		</isNotEmpty>
		<isNotEmpty property="e_from_time">
			AND from_time <![CDATA[ <= ]]> #e_from_time#
		</isNotEmpty>
		
		
		
	</sql>
	
	<select id="preDateBatchScheduleListCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > preDateBatchScheduleListCnt */
		SELECT count(*) as total_count
		from 
		(select 
			c.application
			,c.group_name
			,$SCHEMA$.NVL(c.FROM_TIME,'') AS from_time
			,c.node_id
			,A.job_name
			,c.DAYS_CAL
			,C.DAY_STR
			,c.W_DAY_STR
			,c.WEEKS_CAL
			,$SCHEMA$.NVL(c.MONTH_1,'0') || $SCHEMA$.NVL(c.MONTH_2,'0') || $SCHEMA$.NVL(c.MONTH_3,'0') || $SCHEMA$.NVL(c.MONTH_4,'0') || $SCHEMA$.NVL(c.MONTH_5,'0') || $SCHEMA$.NVL(c.MONTH_6,'0') || $SCHEMA$.NVL(c.MONTH_7,'0') || $SCHEMA$.NVL(c.MONTH_8,'0') || $SCHEMA$.NVL(c.MONTH_9,'0') || $SCHEMA$.NVL(c.MONTH_10,'0') || $SCHEMA$.NVL(c.MONTH_11,'0') || $SCHEMA$.NVL(c.MONTH_12,'0') as  monthstr
			,A.odate
			,(select user_nm from $SCHEMA$.EZ_user where user_cd = b.user_cd_1) AS developer
			,(select user_hp from $SCHEMA$.EZ_user where user_cd = b.user_cd_1) AS contact
			,C.description
			, c.table_id, c.job_id, D.sched_table
			
			<include refid="preDateBatchScheduleListInc" />
		
		) TTT
	</select>
	
	<select id="preDateBatchScheduleList" resultClass="PreDateBatchScheduleBean" parameterClass="java.util.Map">
	/* POSTGRE_M > preDateBatchScheduleList */
	<![CDATA[
		SELECT * FROM(
  			SELECT ROW_NUMBER() OVER() AS row_num, TTT.* FROM(
		SELECT 
			c.application
			,c.group_name
			,c.from_time
			,c.node_id
			,A.job_name
			,  ( CASE WHEN $SCHEMA$.INSTR(b.data_center, ',') > 0 
				   	   THEN (SELECT scode_nm FROM $SCHEMA$.EZ_SCODE WHERE scode_cd = SUBSTR(b.data_center, 1, $SCHEMA$.INSTR(b.data_center, ',')-1)) 
				      ELSE b.data_center END ) AS data_center_name 
			,CASE WHEN trim(c.DAYS_CAL) IS NULL THEN 'OTHER' ELSE c.DAYS_CAL END AS days_cal
			,CASE WHEN trim(c.W_DAY_STR) IS NULL THEN 'OTHER' ELSE c.W_DAY_STR END AS w_day_str
			,CASE WHEN trim(c.WEEKS_CAL) IS NULL THEN 'OTHER' ELSE c.WEEKS_CAL END AS weeks_cal
	 		,TRIM(C.DAY_STR) AS day_str	 
	 		,$SCHEMA$.NVL(c.MONTH_1,'0') || $SCHEMA$.NVL(c.MONTH_2,'0') || $SCHEMA$.NVL(c.MONTH_3,'0') || $SCHEMA$.NVL(c.MONTH_4,'0') || $SCHEMA$.NVL(c.MONTH_5,'0') || $SCHEMA$.NVL(c.MONTH_6,'0') || $SCHEMA$.NVL(c.MONTH_7,'0') || $SCHEMA$.NVL(c.MONTH_8,'0') || $SCHEMA$.NVL(c.MONTH_9,'0') || $SCHEMA$.NVL(c.MONTH_10,'0') || $SCHEMA$.NVL(c.MONTH_11,'0') || $SCHEMA$.NVL(c.MONTH_12,'0') as  monthstr
	 		,SUBSTR(A.odate, 1, 4) || '/' || SUBSTR(A.odate, 5, 2) || '/' || SUBSTR(A.odate, 7, 2) AS odate
			,(select user_nm from $SCHEMA$.EZ_user where user_cd = b.user_cd_1) AS developer
			,(select user_hp from $SCHEMA$.EZ_user where user_cd = b.user_cd_1) AS contact
			,C.description
			, c.table_id, c.job_id, D.sched_table
			,(case when (select f.task_type from DEF_JOB f where f.job_name = split_part( d.sched_table, '/', 1)) = 'SMART Table' then 'Y' else 'N' end) as smart_job_yn
	]]>
		<include refid="preDateBatchScheduleListInc" />
		
		ORDER BY odate, job_name
			)TTT
			WHERE 1=1
			
			<isNotEmpty prepend="and" property="p_search_text2">
				<isEqual property="p_search_gubun2" compareValue="job_name">
					UPPER(job_name) like UPPER('%'||#p_search_text2#||'%')
				</isEqual>
				<isEqual property="p_search_gubun2" compareValue="description">
					description like '%'||#p_search_text2#||'%'
				</isEqual>
				<isEqual property="p_search_gubun2" compareValue="error_description">
					error_description like '%'||#p_search_text2#||'%'
				</isEqual>
				<isEqual property="p_search_gubun2" compareValue="memname">
					memname like '%'||#p_search_text2#||'%'
				</isEqual>
			</isNotEmpty>
			
		) tb1
		
	</select>

	<select id="preDateBatchScheduleOrderList" resultClass="PreDateBatchScheduleBean" parameterClass="java.util.Map">
	/* POSTGRE_M > preDateBatchScheduleOrderList */

		SELECT DATA_CENTER,
		       JOB_NAME,
		       ODATE
		  FROM $SCHEMA$.EZ_CMR_RPLN
		 WHERE DATA_CENTER = 'END'

	</select>


	<!-- batchResultTotal -->
	<select id="batchResultTotalList" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > batchResultTotalList */

		select
			group_name
			,user_daily_system_gb
			,SUM(CASE WHEN STATE_RESULT='dual' THEN 0 ELSE 1 END) AS total
			,SUM(CASE WHEN STATE_RESULT='Wait User' THEN 1 ELSE 0 END) AS wait_confirm
			,SUM(CASE WHEN STATE_RESULT='Wait Time' THEN 1 ELSE 0 END) AS wait_time
			,SUM(CASE WHEN STATE_RESULT='Wait Condition' THEN 1 ELSE 0 END) AS wait_condition
			,SUM(CASE WHEN STATE_RESULT='Wait Resource' THEN 1 ELSE 0 END) AS wait_resource
			,SUM(CASE WHEN STATE_RESULT='Wait Host' THEN 1 ELSE 0 END) AS wait_host
			,SUM(CASE WHEN STATE_RESULT='Held' THEN 1 ELSE 0 END) AS hold
			,SUM(CASE WHEN STATE_RESULT='Executing' THEN 1 ELSE 0 END) AS executing
			,SUM(CASE WHEN STATE_RESULT='Ended OK' THEN 1 ELSE 0 END) AS ended_ok
			,SUM(CASE WHEN STATE_RESULT='Ended Not OK' THEN 1 ELSE 0 END) AS ended_not_ok
			,SUM(CASE WHEN STATE_RESULT='Unknown' THEN 1 ELSE 0 END) AS unknown
			,SUM(CASE WHEN STATE_RESULT='Deleted' THEN 1 ELSE 0 END) AS deletes
			,SUM(CASE WHEN STATE_RESULT='Not in AJF' THEN 1 ELSE 0 END) AS etc
		from(
				select
					0 AS gb
					,u.*
				from(
						select
							'[TOTAL]' AS group_name
							,(select $SCHEMA$.NVL(max(case when s2.user_daily = 'SYSTEM' then 'Y' else 'N' end),'N') from def_job s1, DEF_TABLES s2 where s1.table_id = s2.table_id and s2.data_center = #data_center# and s1.job_name=t.job_name) AS user_daily_system_gb
							,case when DELETE_FLAG='1' then 'Deleted'
										<!-- when  RTRIM(STATE) like 'Held%' then 'Held' -->
										<!-- when (STATUS='Wait Condition' and trim(FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
										else STATUS end AS state_result
						from $active_net_name$job t
						where odate = REPLACE(SUBSTR(#p_odate#, 3, 8), '/', '')

						<isNotEmpty prepend="and" property="sched_table">
							order_table = #sched_table#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_application_of_def">
							application = #p_application_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_group_name_of_def">
							group_name = #p_group_name_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_sub_table_of_def">
							job_name = #p_sub_table_of_def#
						</isNotEmpty>

						union all
						select
							'[TOTAL]' AS group_name
							,(select $SCHEMA$.NVL(max(case when s2.user_daily = 'SYSTEM' then 'Y' else 'N' end),'N') from def_job s1, DEF_TABLES s2 where s1.table_id = s2.table_id and s2.data_center = #data_center# and s1.job_name=t.job_name) AS user_daily_system_gb
							,case when DELETE_FLAG='1' then 'Deleted'
										<!-- when  RTRIM(STATE) like 'Held%' then 'Held' -->
										<!-- when (STATUS='Wait Condition' and trim(FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
										else STATUS end AS state_result
						from $SCHEMA$.EZ_HISTORY_$data_center_code$ t
						where odate = REPLACE(SUBSTR(#p_odate#, 3, 8), '/', '')
						and ORDER_ID NOT IN (select s.order_id from $active_net_name$job s where s.odate = #p_odate# )

						<isNotEmpty prepend="and" property="sched_table">
							order_table = #sched_table#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_application_of_def">
							application = #p_application_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_group_name_of_def">
							group_name = #p_group_name_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_sub_table_of_def">
							job_name = #p_sub_table_of_def#
						</isNotEmpty>
				) u

				union all
				select
					1 as gb
					,u.*
				from(
						select
							group_name
							,(select $SCHEMA$.NVL(max(case when s2.user_daily = 'SYSTEM' then 'Y' else 'N' end),'N') from def_job s1, DEF_TABLES s2 where s1.table_id = s2.table_id and s2.data_center = #data_center# and s1.job_name=t.job_name) AS user_daily_system_gb
							,case when DELETE_FLAG='1' then 'Deleted'
										<!-- when  RTRIM(STATE) like 'Held%' then 'Held' -->
										 <!-- when (STATUS='Wait Condition' and trim(FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
										else STATUS end AS state_result
						from $active_net_name$job t
						where odate = REPLACE(SUBSTR(#p_odate#, 3, 8), '/', '')

						<isNotEmpty prepend="and" property="sched_table">
							order_table = #sched_table#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_application_of_def">
							application = #p_application_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_group_name_of_def">
							group_name = #p_group_name_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_sub_table_of_def">
							job_name = #p_sub_table_of_def#
						</isNotEmpty>

						union all
						select
							group_name
							,(select $SCHEMA$.NVL(max(case when s2.user_daily = 'SYSTEM' then 'Y' else 'N' end),'N') from def_job s1, DEF_TABLES s2 where s1.table_id = s2.table_id and s2.data_center = #data_center# and s1.job_name=t.job_name) AS user_daily_system_gb
							,case when DELETE_FLAG='1' then 'Deleted'
										<!-- when  RTRIM(STATE) like 'Held%' then 'Held' -->
										<!-- when (STATUS='Wait Condition' and trim(FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
										else STATUS end AS state_result
						from $SCHEMA$.EZ_HISTORY_$data_center_code$ t
						where odate = REPLACE(SUBSTR(#p_odate#, 3, 8), '/', '')
						and ORDER_ID NOT IN (select s.order_id from $active_net_name$job s where s.odate = #p_odate# )

						<isNotEmpty prepend="and" property="sched_table">
							order_table = #sched_table#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_application_of_def">
							application = #p_application_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_group_name_of_def">
							group_name = #p_group_name_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_sub_table_of_def">
							job_name = #p_sub_table_of_def#
						</isNotEmpty>
				) u
		) u
		where 1=1

		group by gb,group_name,user_daily_system_gb
		order by gb,group_name,user_daily_system_gb	desc

	</select>

	<!-- monthBatchResultTotal -->
	<select id="monthBatchResultTotalList" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > monthBatchResultTotalList */
		SELECT '20' || odate AS odate, state_result AS result, SUM(cnt) AS cnt, state_result || ' : ' || SUM(cnt) AS state_result
		  FROM (
		        SELECT state_result, odate, COUNT(*) AS cnt
		          FROM (
		                SELECT case when DELETE_FLAG='1' then 'Deleted'
		                	        when RTRIM(STATE) like 'Held%' then 'Held'
		                			when RTRIM(STATUS) like 'Wait%' THEN 'Wait'
		                		    else STATUS end AS state_result,
		                       odate
		                  FROM $active_net_name$job
		                 WHERE SUBSTR(odate, 1, 4) = #month_date#

						<isNotEmpty prepend="and" property="sched_table">
							order_table = #sched_table#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_application_of_def">
							application = #p_application_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_group_name_of_def">
							group_name = #p_group_name_of_def#
						</isNotEmpty>
						<isNotEmpty prepend="and" property="p_sub_table_of_def">
							job_name = #p_sub_table_of_def#
						</isNotEmpty>

		               ) tb1
		         GROUP BY state_result, odate

		        UNION ALL

		        SELECT state_result, odate, COUNT(*) AS cnt
		          FROM (
		                SELECT case when DELETE_FLAG='1' then 'Deleted'
		                	        when RTRIM(STATE) like 'Held%' then 'Held'
		                			when RTRIM(STATUS) like 'Wait%' THEN 'Wait'
		                		    else STATUS end AS state_result,
		                       odate
		                  FROM $SCHEMA$.EZ_HISTORY_$data_center_code$
		                 WHERE SUBSTR(odate, 1, 4) = #month_date#
		                   AND ORDER_ID NOT IN (select s.order_id from $active_net_name$job s where SUBSTR(s.odate, 1, 4) = #month_date# )

		                   	<isNotEmpty prepend="and" property="sched_table">
								order_table = #sched_table#
							</isNotEmpty>
							<isNotEmpty prepend="and" property="p_application_of_def">
								application = #p_application_of_def#
							</isNotEmpty>
							<isNotEmpty prepend="and" property="p_group_name_of_def">
								group_name = #p_group_name_of_def#
							</isNotEmpty>
							<isNotEmpty prepend="and" property="p_sub_table_of_def">
								job_name = #p_sub_table_of_def#
							</isNotEmpty>
		                ) tb1
		         GROUP BY state_result, odate ) tb1
		 GROUP BY state_result, odate
		 ORDER BY odate, state_result DESC

	</select>

	<select id="nodeList" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > nodeList */
	<![CDATA[
		SELECT tb1.nodegroup
		  FROM (
		        select $SCHEMA$.NVL(trim(nodegroup),'no_node') nodegroup,
		               start_time,
		               1 job_cnt
		          from $active_net_name$JOB
		         where 1=1
		           and start_time >= (REPLACE(#odate#, '/', '') ||'000000')

		        union all

		        select $SCHEMA$.NVL(trim(nodegroup),'no_node') nodegroup,
		               start_time,
		               1 job_cnt
		          from $SCHEMA$.EZ_HISTORY_$data_center_code$
		         where 1=1
		           and start_time >= (REPLACE(#odate#, '/', '') ||'000000')
		           and ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s ) ) tb1
		 GROUP BY tb1.nodegroup
		 ORDER BY tb1.nodegroup
	]]>
	</select>

	<select id="nodeTimeList" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > nodeTimeList */
	<![CDATA[
		SELECT tb1.nodegroup, SUBSTR(MAX(RPAD(LEVEL, 6) || SYS_CONNECT_BY_PATH(tb1.content, ',')), 8) AS content
		  FROM (
        	   SELECT tb1.*
           	       	  , row_number() OVER(PARTITION BY tb1.nodegroup ORDER BY tb1.content ) AS rn
           	     FROM
           	        (
            	           SELECT nodegroup, '''' || from_time || '''/' || '''' || job_cnt || '''' AS content
                             FROM (
                                   select substr(tttb1.from_time,9,2 ) from_time,
                                          tttb1.nodegroup ,tttb1.job_cnt
                                     FROM (
                                           SELECT ttb1.from_time, ttb1.to_time, ttb2.nodegroup,
                                                  sum(ttb2.job_cnt) job_cnt
                                             FROM (
                                                   SELECT to_char( (TO_DATE ( REPLACE(#odate#, '/', '') ||'000000', 'YYYYMMDDHH24MISS')
                                                          + LEVEL/24 - 1/24),'YYYYMMDDHH24MISS') as from_time,
                                                          to_char( (TO_DATE ( REPLACE(#odate#, '/', '') ||'010000', 'YYYYMMDDHH24MISS')
                                                          + LEVEL/24 - 1/24),'YYYYMMDDHH24MISS') as to_time
                                                     FROM DUAL
                                                    WHERE 1=1
                                                    CONNECT BY (TO_DATE ( REPLACE(#odate#, '/', '') ||'000000', 'YYYYMMDDHH24MISS') + LEVEL/24 - 1/24)
                                                               < TO_DATE( to_char(to_date( REPLACE(#odate#, '/', ''),'YYYYMMDD')+1,'YYYYMMDD') ||'000000', 'YYYYMMDDHH24MISS') ) ttb1,
                                                  (
                                                   SELECT from_time, to_time, nodegroup, start_time, job_cnt
                                                     FROM (
                                                           SELECT to_char( (TO_DATE ( REPLACE(#odate#, '/', '') ||'000000', 'YYYYMMDDHH24MISS')
                                                                  + LEVEL/24 - 1/24),'YYYYMMDDHH24MISS') as from_time,
                                                                  to_char( (TO_DATE ( REPLACE(#odate#, '/', '') ||'010000', 'YYYYMMDDHH24MISS')
                                                                  + LEVEL/24 - 1/24),'YYYYMMDDHH24MISS') as to_time
                                                             FROM DUAL
                                                            WHERE 1=1
                                                            CONNECT BY (TO_DATE ( REPLACE(#odate#, '/', '') ||'000000', 'YYYYMMDDHH24MISS') + LEVEL/24 - 1/24)
                                                                       < TO_DATE( to_char(to_date( REPLACE(#odate#, '/', ''),'YYYYMMDD')+1,'YYYYMMDD') ||'000000', 'YYYYMMDDHH24MISS') ) tb1,
                                                          (
                                                           select $SCHEMA$.NVL(trim(nodegroup),'no_node') nodegroup,
                                                                  start_time,
                                                                  1 job_cnt
                                                             from $active_net_name$JOB
                                                            where 1=1
                                                              and start_time >= ( REPLACE(#odate#, '/', '') ||'000000')

                                                           union all

                                                           select $SCHEMA$.NVL(trim(nodegroup),'no_node') nodegroup,
                                                                  start_time,
                                                                  1 job_cnt
                                                             from $SCHEMA$.EZ_HISTORY_$data_center_code$
                                                            where 1=1
                                                              and start_time >= ( REPLACE(#odate#, '/', '') ||'000000')
                                                              and ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s ) ) tb2
                                                    WHERE 1 = 1
                                                      AND tb2.start_time between tb1.from_time and tb1.to_time ) ttb2
                                            WHERE ttb1.from_time = ttb2.from_time
                                            GROUP BY ttb1.from_time, ttb1.to_time, ttb2.nodegroup ) tttb1
                                    ORDER BY nodegroup, from_time ) ) tb1
        	  ) tb1
       CONNECT BY PRIOR rn = rn - 1
	       AND PRIOR tb1.nodegroup = tb1.nodegroup
	  	 GROUP BY tb1.nodegroup
	]]>
	</select>


	<!-- jobGraphList -->
	<select id="jobGraphList" resultClass="JobGraphBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobGraphList */

			SELECT distinct
				a.job_name AS job_name
				,a.order_id
				,b.ORDER_ID AS ref_order_id
				,a.start_time
				,a.end_time
				,a.rerun_counter
				,a.state
				,a.odate
				,case WHEN A.DELETE_FLAG='1' THEN 'Deleted'
			               <!-- WHEN  RTRIM(A.STATE) like 'Held%' THEN 'Held' -->
			               <!-- WHEN (A.STATUS='Wait Condition' AND trim(A.FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
			               ELSE A.STATUS END AS state_result
				,case WHEN RTRIM(A.STATE) LIKE 'Held%' THEN 'Y' ELSE 'N' END AS holdflag
			FROM $active_net_name$JOB a, $active_net_name$LNK$type1$_P b
			where 1=1
			and a.ODATE = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
			and b.odate = REPLACE(SUBSTR(#odate#, 5, 8), '/', '')
			and a.order_id = #order_id#
			and b.CONDITION IN (
							  	SELECT CONDITION
							  	FROM $active_net_name$JOB c, $active_net_name$LNK$type2$_P d
							  	where 1=1
							 	and c.ODATE = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
							  	AND c.ORDER_ID  = #order_id#
								and c.ORDER_ID = d.ORDER_ID )
			union all
			select
				distinct
				a.job_name AS job_name
				,a.order_id
				,''  AS ref_order_id
				,a.start_time
				,a.end_time
				,a.rerun_counter
				,a.state
				,a.odate
				,case WHEN A.DELETE_FLAG='1' THEN 'Deleted'
			               <!-- WHEN  RTRIM(A.STATE) like 'Held%' THEN 'Held'  -->
			               <!-- WHEN (A.STATUS='Wait Condition' AND trim(A.FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
			               ELSE A.STATUS END AS state_result
				,case WHEN RTRIM(A.STATE) LIKE 'Held%' THEN 'Y' ELSE 'N' END AS holdflag
			from $active_net_name$JOB a
			where 1=1
			and a.ODATE = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
			and a.order_id = #order_id#
			and 1 > ( select count(*)
						from $active_net_name$LNK$type1$_P s
						where 1=1
						and s.odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
						and s.CONDITION IN (
										  	SELECT CONDITION
										  	FROM $active_net_name$JOB c, $active_net_name$LNK$type2$_P d
										  	where 1=1
										 	and c.ODATE = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
										  	AND c.ORDER_ID  = #order_id#
											and c.ORDER_ID = d.ORDER_ID ) )


	</select>

	<!-- jobGraphList -->
	<select id="jobGraphHistoryList" resultClass="JobGraphBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobGraphHistoryList */

		SELECT distinct
		a.job_name AS job_name
		,a.order_id
		,b.ORDER_ID AS ref_order_id
		,a.start_time
		,a.end_time
		,a.rerun_counter
		,a.state
		,a.odate
		,case WHEN A.DELETE_FLAG='1' THEN 'Deleted'
		<!-- WHEN  RTRIM(A.STATE) like 'Held%' THEN 'Held' -->
		<!-- WHEN (A.STATUS='Wait Condition' AND trim(A.FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
		ELSE A.STATUS END AS state_result
		,case WHEN RTRIM(A.STATE) LIKE 'Held%' THEN 'Y' ELSE 'N' END AS holdflag
		FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ a, $SCHEMA$.EZ_HISTORY_$type1$_$data_center_code$ b
		where 1=1
		and a.ODATE = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		and b.odate = REPLACE(SUBSTR(#odate#, 5, 8), '/', '')
		and a.order_id = #order_id#
		and b.CONDITION IN (
		SELECT CONDITION
		FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ c, $SCHEMA$.EZ_HISTORY_$type2$_$data_center_code$ d
		where 1=1
		and c.ODATE = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		AND c.ORDER_ID  = #order_id#
		and c.ORDER_ID = d.ORDER_ID )
		union all
		select
		distinct
		a.job_name AS job_name
		,a.order_id
		,''  AS ref_order_id
		,a.start_time
		,a.end_time
		,a.rerun_counter
		,a.state
		,a.odate
		,case WHEN A.DELETE_FLAG='1' THEN 'Deleted'
		<!-- WHEN  RTRIM(A.STATE) like 'Held%' THEN 'Held'  -->
		<!-- WHEN (A.STATUS='Wait Condition' AND trim(A.FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
		ELSE A.STATUS END AS state_result
		,case WHEN RTRIM(A.STATE) LIKE 'Held%' THEN 'Y' ELSE 'N' END AS holdflag
		from $SCHEMA$.EZ_HISTORY_$data_center_code$ a
		where 1=1
		and a.ODATE = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		and a.order_id = #order_id#
		and 1 > ( select count(*)
		from $SCHEMA$.EZ_HISTORY_$type1$_$data_center_code$ s
		where 1=1
		and s.odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		and s.CONDITION IN (
		SELECT CONDITION
		FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ c, $SCHEMA$.EZ_HISTORY_$type2$_$data_center_code$ d
		where 1=1
		and c.ODATE = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		AND c.ORDER_ID  = #order_id#
		and c.ORDER_ID = d.ORDER_ID ) )

	</select>
	
	<!-- activeStartTimeList / 실행횟수 별 조회(실시간수행) -->
	<select id="activeStartTimeList" resultClass="TimeInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > activeStartTimeList */
	   select T.* from (SELECT row_number() over() as row_num, TTT.* FROM(
				SELECT 
					odate
					,job_name
					,TO_CHAR(start_time, 'YYYY/MM/DD HH24:MM:SS') AS start_time
					,TO_CHAR(end_time, 'YYYY/MM/DD HH24:MM:SS') AS end_time
					,rerun_counter
					,status AS state_result
				FROM $SCHEMA$.EZ_RUNINFO_HISTORY
				WHERE 1=1 
				AND job_name = #job_name#
				AND order_id = #order_id#
				AND order_id not in (select s.order_id from RUNINFO_HISTORY s where s.order_date = order_date)
				
				UNION all
				
				SELECT 
					SUBSTR(order_date, 3) as odate
					,JOB_MEM_NAME as job_name
					,TO_CHAR(start_time, 'YYYY/MM/DD HH24:MM:SS') AS start_time
					,TO_CHAR(end_time, 'YYYY/MM/DD HH24:MM:SS') AS end_time
					,RERUN_COUNTER
					,(case when ENDED_STATUS = '16' then 'Ended OK'
						   when ENDED_STATUS = '32' then 'Ended Not OK' end) as state_result
				FROM RUNINFO_HISTORY
				WHERE 1=1
				AND JOB_MEM_NAME = #job_name#
				AND order_id = #order_id#
			
			) TTT
		)T
		WHERE 1=1
		AND T.row_num <![CDATA[ <= ]]> 500
		ORDER BY T.odate desc, T.rerun_counter desc
	</select>

	<!-- timeInfoList / 실행횟수 별 조회(과거수행) -->
	<select id="timeInfoList" resultClass="TimeInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > timeInfoList */
		select T.* from (SELECT row_number() over() as row_num, TTT.* FROM(
						SELECT odate, job_name, TO_CHAR(start_time, 'YYYY/MM/DD HH24:MM:SS') AS start_time, TO_CHAR(end_time, 'YYYY/MM/DD HH24:MM:SS') AS end_time, rerun_counter, status AS state_result
						FROM $SCHEMA$.EZ_RUNINFO_HISTORY
						WHERE 1=1
						 AND job_name = #job_name#
						 AND order_id = #order_id#
				<!-- AND odate <![CDATA[ >= ]]> to_char(add_months(sysdate,-12),'yyyy-mm-dd') -->

					ORDER BY odate desc, rerun_counter desc
					) TTT
				)T
			WHERE 1=1
			AND t.row_num <![CDATA[ <= ]]> 500
	</select>

<!-- timeInfoList/최종 상태 조회(배치수행결과) -->
	<select id="EndTimeInfoList" resultClass="TimeInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > EndTimeInfoList */
		select T.* from (SELECT row_number() over() as row_num, TTT.* FROM(
			SELECT odate, job_name, start_time, end_time, rerun_counter, status AS state_result
			FROM (
					 SELECT odate, job_name, start_time,  end_time, rerun_counter, status
						FROM $active_net_name$JOB
						WHERE JOB_NAME = #job_name#
				UNION
					 SELECT odate, job_name, start_time,  end_time, rerun_counter, status
						FROM $SCHEMA$.EZ_HISTORY_$data_center_code$
						WHERE 1=1
						and JOB_NAME = #job_name#
						and order_id = #order_id#
						and order_id not in (select s.order_id from $active_net_name$JOB s where s.odate = odate)
				 ) tb1
				where 1=1
			<!--	AND odate <![CDATA[ >= ]]> to_char(add_months(sysdate,-12),'yyyy-mm-dd')  -->

			ORDER BY ODATE desc, rerun_counter desc
			) TTT
		)T
		WHERE 1=1
		AND t.row_num <![CDATA[ <= ]]> 500

	</select>

<!-- jobDetail -->
	<select id="jobDetail" resultClass="JobDetailBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDetail */
		select * from(

		SELECT
			B.job
			,B.description
			,B.error_description
			<iterate property="userNums" >
			,B.user_cd_$userNums[]$
			,(select user_id from $SCHEMA$.EZ_user where user_cd = B.user_cd_$userNums[]$) AS user_id_$userNums[]$
			,(select user_nm from $SCHEMA$.EZ_user where user_cd = B.user_cd_$userNums[]$) AS user_nm_$userNums[]$
			,(select user_email from $SCHEMA$.EZ_user where user_cd = B.user_cd_$userNums[]$) AS user_email_$userNums[]$
			,(select user_hp from $SCHEMA$.EZ_user where user_cd = B.user_cd_$userNums[]$) AS user_hp_$userNums[]$
			,(select user_tel from $SCHEMA$.EZ_user where user_cd = B.user_cd_$userNums[]$) AS user_tel_$userNums[]$
			,(select (select dept_nm from $SCHEMA$.EZ_dept where dept_cd = u.dept_cd) from $SCHEMA$.EZ_user u where user_cd = B.user_cd_$userNums[]$) AS dept_nm_$userNums[]$
			,(select (select duty_nm from $SCHEMA$.EZ_duty where duty_cd = u.duty_cd) from $SCHEMA$.EZ_user u where user_cd = B.user_cd_$userNums[]$) AS duty_nm_$userNums[]$
			</iterate>
		FROM $active_net_name$JOB A LEFT OUTER JOIN (select * from $SCHEMA$.EZ_JOB_MAPPER  where data_center=#data_center#) B
		   ON a.job_name = B.JOB
		WHERE 1=1
		AND ORDER_ID = #order_id#
		UNION
		SELECT
			D.job
			,D.DESCRIPTION
			,D.ERROR_DESCRIPTION
			<iterate property="userNums" >
			,D.user_cd_$userNums[]$
			,(select user_id from $SCHEMA$.EZ_user where user_cd = D.user_cd_$userNums[]$) AS user_id_$userNums[]$
			,(select user_nm from $SCHEMA$.EZ_user where user_cd = D.user_cd_$userNums[]$) AS user_nm_$userNums[]$
			,(select user_email from $SCHEMA$.EZ_user where user_cd = D.user_cd_$userNums[]$) AS user_email_$userNums[]$
			,(select user_hp from $SCHEMA$.EZ_user where user_cd = D.user_cd_$userNums[]$) AS user_hp_$userNums[]$
			,(select user_tel from $SCHEMA$.EZ_user where user_cd = D.user_cd_$userNums[]$) AS user_tel_$userNums[]$
			,(select (select dept_nm from $SCHEMA$.EZ_dept where dept_cd = u.dept_cd) from $SCHEMA$.EZ_user u where user_cd = D.user_cd_$userNums[]$) AS dept_nm_$userNums[]$
			,(select (select duty_nm from $SCHEMA$.EZ_duty where duty_cd = u.duty_cd) from $SCHEMA$.EZ_user u where user_cd = D.user_cd_$userNums[]$) AS duty_nm_$userNums[]$
			</iterate>
		FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ C LEFT OUTER JOIN (select * from $SCHEMA$.EZ_JOB_MAPPER  where data_center=#data_center#) D
		   ON C.JOB_NAME = D.JOB
		WHERE 1=1
		AND ORDER_ID = #order_id#
		AND ORDER_ID NOT IN (SELECT ORDER_ID
								FROM $active_net_name$JOB E
								WHERE 1=1
								AND ORDER_ID = #order_id#
								)
	 	) tb1
	</select>


	<!-- jobMemoList -->
	<sql id="jobMemoListInc">
	/* POSTGRE_M > jobMemoListInc */
	<![CDATA[
		FROM $SCHEMA$.EZ_JOB_MEMO t1
		where 1=1
		AND t1.job = #job#
	]]>

	</sql>

	<select id="jobMemoListCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobMemoListCnt */
	<![CDATA[
		SELECT count(*) as total_count
	]]>
		<include refid="jobMemoListInc" />

	</select>

	<select id="jobMemoList" resultClass="JobMemoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobMemoList */

		SELECT * FROM(
			SELECT count(*) as row_num, TTT.* FROM(

		SELECT
			seq
			,user_cd
			,(select user_id from $SCHEMA$.EZ_user where user_cd = t1.user_cd) AS user_id
			,(select user_nm from $SCHEMA$.EZ_user where user_cd = t1.user_cd) AS user_nm
			,(select user_email from $SCHEMA$.EZ_user where user_cd = t1.user_cd) AS user_email
			,(select user_hp from $SCHEMA$.EZ_user where user_cd = t1.user_cd) AS user_hp
			,(select (select dept_nm from $SCHEMA$.EZ_dept where dept_cd = u.dept_cd) from $SCHEMA$.EZ_user u where user_cd = t1.user_cd) AS dept_nm
			,(select (select duty_nm from $SCHEMA$.EZ_duty where duty_cd = u.duty_cd) from $SCHEMA$.EZ_user u where user_cd = t1.user_cd) AS duty_nm
			,to_char(ins_date,'YYYY/MM/DD HH24:MI:SS') AS ins_date
			,memo
			,ins_user_cd
			,ins_user_ip
			,to_char(udt_date,'YYYY/MM/DD HH24:MI:SS') AS udt_date
			,udt_user_cd
			,udt_user_ip

		<include refid="jobMemoListInc" />
		ORDER BY t1.job, t1.SEQ desc

			)TTT
		) tb1

		WHERE 1 = 1

		<isNotEmpty property="startRowNum">
			AND row_num between #startRowNum# and #endRowNum#
		</isNotEmpty>

	</select>


	<!-- defJobDetail -->
	<select id="defJobDetail" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > defJobDetail */
	<![CDATA[

		SELECT distinct
			trim(a.table_id) table_id
         	,trim(a.APPLICATION) application
         	,trim(a.GROUP_NAME) group_name
         	,trim(a.job_name) job_name
         	,trim(a.owner) owner
         	,a.task_type task_type
         	,a.node_id node_grp
         	,trim($SCHEMA$.NVL(a.mem_lib,'')) mem_lib
         	,trim($SCHEMA$.NVL(a.memname,'')) memname
         	,trim(dbms_lob.substr(a.cmd_line,dbms_lob.getlength(a.cmd_line),1)) cmd_line
         	,trim($SCHEMA$.NVL(a.from_time,'')) from_time
         	,trim($SCHEMA$.NVL(a.to_time,'')) to_time
         	,decode(a.confirm_flag,'1','Y','N') confirm
         	,decode(a.cyclic,'1','Y (' ||  to_number(substr(a.interval,1,5)) || substr(a.interval,6,7) || ')','N') cyclic
         	,decode(trim(a.DAYS_CAL),'','OTHER',a.DAYS_CAL) days_cal
         	,trim(a.day_str) day_str
         	,decode(trim(a.W_DAY_STR),'','OTHER',a.W_DAY_STR) w_day_str
        	,$SCHEMA$.NVL(a.MONTH_1,'0') || $SCHEMA$.NVL(a.MONTH_2,'0') || $SCHEMA$.NVL(a.MONTH_3,'0') || $SCHEMA$.NVL(a.MONTH_4,'0') || $SCHEMA$.NVL(a.MONTH_5,'0') || $SCHEMA$.NVL(a.MONTH_6,'0') || $SCHEMA$.NVL(a.MONTH_7,'0') || $SCHEMA$.NVL(a.MONTH_8,'0') || $SCHEMA$.NVL(a.MONTH_9,'0') || $SCHEMA$.NVL(a.MONTH_10,'0') || $SCHEMA$.NVL(a.MONTH_11,'0') || $SCHEMA$.NVL(a.MONTH_12,'0') as  monthstr
         	,decode(trim(a.WEEKS_CAL),'','OTHER',a.WEEKS_CAL) weeks_cal
          	,$SCHEMA$.NVL(b.condition,'') incondname
          	,$SCHEMA$.NVL(c.condition,'') outcondname
    	FROM def_job a, def_lnki_p b, def_lnko_p c
	   	WHERE a.job_id = b.job_id(+)
	   	AND a.table_id = b.table_id(+)
	   	AND a.job_id = c.job_id(+)
	   	AND a.table_id = c.table_id(+)
	   	AND a.table_id = $table_id$
	   	AND a.job_id = $job_id$

	   	union all
	   	SELECT
			trim(a.table_id) table_id
         	,trim(a.APPLICATION) application
         	,trim(a.GROUP_NAME) group_name
         	,trim(a.job_name) job_name
         	,trim(a.owner) owner
         	,a.task_type task_type
         	,a.node_id node_grp
         	,trim($SCHEMA$.NVL(a.mem_lib,'')) mem_lib
         	,trim($SCHEMA$.NVL(a.memname,'')) memname
         	,trim(dbms_lob.substr(a.cmd_line,dbms_lob.getlength(a.cmd_line),1)) cmd_line
         	,trim($SCHEMA$.NVL(a.from_time,'')) from_time
         	,trim($SCHEMA$.NVL(a.to_time,'')) to_time
         	,decode(a.confirm_flag,'1','Y','N') confirm
         	,decode(a.cyclic,'1','Y (' ||  to_number(substr(a.interval,1,5)) || substr(a.interval,6,7) || ')','N') cyclic
         	,decode(trim(a.DAYS_CAL),'','OTHER',a.DAYS_CAL) days_cal
         	,trim(a.day_str) day_str
         	,decode(trim(a.W_DAY_STR),'','OTHER',a.W_DAY_STR) w_day_str
        	,$SCHEMA$.NVL(a.MONTH_1,'0') || $SCHEMA$.NVL(a.MONTH_2,'0') || $SCHEMA$.NVL(a.MONTH_3,'0') || $SCHEMA$.NVL(a.MONTH_4,'0') || $SCHEMA$.NVL(a.MONTH_5,'0') || $SCHEMA$.NVL(a.MONTH_6,'0') || $SCHEMA$.NVL(a.MONTH_7,'0') || $SCHEMA$.NVL(a.MONTH_8,'0') || $SCHEMA$.NVL(a.MONTH_9,'0') || $SCHEMA$.NVL(a.MONTH_10,'0') || $SCHEMA$.NVL(a.MONTH_11,'0') || $SCHEMA$.NVL(a.MONTH_12,'0') as  monthstr
         	,decode(trim(a.WEEKS_CAL),'','OTHER',a.WEEKS_CAL) weeks_cal
          	,'' incondname
          	,'' outcondname
    	FROM def_job a
	   	WHERE 1=1
	   	AND a.table_id = $table_id$
	   	AND a.job_id = $job_id$
	   	and 1>( SELECT count(*)
				FROM def_lnki_p b, def_lnko_p c
			   	WHERE a.job_id = b.job_id
			   	AND a.table_id = b.table_id
			   	AND a.job_id = c.job_id
			   	AND a.table_id = c.table_id
			   	AND a.table_id = $table_id$
			   	AND a.job_id = $job_id$ )

	]]>
	</select>

	<!-- jobLogList -->
	<sql id="jobLogListInc">
	/* POSTGRE_M > jobLogListInc */
		<!-- ODATE -->
		<isNotEmpty property="p_s_odate">
			AND a.odate >= REPLACE(SUBSTR(#p_s_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty property="p_e_odate">
			AND a.odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#p_e_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<!-- 시작일시 -->
		<isNotEmpty property="p_s_time1">
			AND to_char(a.START_TIME,'YYYYMMDDHH24MISS') >= REPLACE(#p_s_time1#, '/', '')
		</isNotEmpty>
		<isNotEmpty property="p_e_time1">
			AND to_char(a.END_TIME,'YYYYMMDDHH24MISS') <![CDATA[ < ]]> REPLACE(#p_e_time1#, '/', '')
		</isNotEmpty>
		<!-- 종료일시 -->
		<isNotEmpty property="p_s_time2">
			AND to_char(a.START_TIME,'YYYYMMDDHH24MISS') >= REPLACE(#p_s_time2#, '/', '')
		</isNotEmpty>
		<isNotEmpty property="p_e_time2">
			AND to_char(a.END_TIME,'YYYYMMDDHH24MISS') <![CDATA[ < ]]> REPLACE(#p_e_time2#, '/', '')
		</isNotEmpty>


		<isNotEmpty property="critical">
			<isEqual prepend="and" property="critical" compareValue="1">
				A.critical = '1'
			</isEqual>
		</isNotEmpty>

		) tb1
		where 1=1

		<isNotEmpty prepend="and" property="order_gb">
		    #order_gb# = (select $SCHEMA$.NVL(max(case when s2.user_daily = 'SYSTEM' then 'Y' else 'N' end),'N') from def_job s1, DEF_TABLES s2 where s1.table_id = s2.table_id and s2.data_center =  #data_center# and s1.job_name=t.job_name)
		</isNotEmpty>

		<isNotEmpty prepend="and" property="status2">
			<isEqual property="status2" compareValue="Held">
				state like 'Held%'
			</isEqual>
			<isNotEqual property="status2" compareValue="Held">
				upper(state_result) like ''||upper(#status2#)||'%'
			</isNotEqual>
		</isNotEmpty>

		<isNotEmpty prepend="and" property="p_sched_table">
			order_table in
			<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
				#p_search_text_folder_list[]# 
			</iterate>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
<!-- 			application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		<!--<isNotEmpty prepend="and" property="p_application_of_def_text">
			application = #p_application_of_def_text#
		</isNotEmpty>-->
		<!-- 복수 어플리케이션 검색 및 제외(23.03.29 신한캐피탈요건) -->
		<isNotEmpty prepend="and" property="p_application_of_def_text" open="(" close=")">
			<isEqual property="p_chk_app" compareValue="N">

				<iterate property="p_search_text_list" conjunction="OR">
					UPPER(application) = UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
			<isEqual property="p_chk_app" compareValue="Y">
				<iterate property="p_search_text_list" conjunction="AND">
					UPPER(application) != UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
		</isNotEmpty>

		<isNotEmpty prepend="and" property="p_group_name_of_def_text">
			group_name = #p_group_name_of_def_text#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="sub_table_of_def">
			job_name = #sub_table_of_def#
		</isNotEmpty>

		<isNotEmpty prepend="and" property="p_status">
			state_result = #p_status#
		</isNotEmpty>

		<!-- 조회조건 담당자/작업 정보 분리 22.08.25 김은희 -->
		<isNotEmpty prepend="and" property="p_search_text">
			<isEqual property="p_search_gubun" compareValue="user_nm">
				(
					user_nm like '%'||#p_search_text#||'%' or user_id = #p_search_text#
				or user_nm2 like '%'||#p_search_text#||'%' or user_id2 = #p_search_text#
				or user_nm3 like '%'||#p_search_text#||'%' or user_id3 = #p_search_text#
				or user_nm4 like '%'||#p_search_text#||'%' or user_id4 = #p_search_text#
				or user_nm5 like '%'||#p_search_text#||'%' or user_id5 = #p_search_text#
				or user_nm6 like '%'||#p_search_text#||'%' or user_id6 = #p_search_text#
				or user_nm7 like '%'||#p_search_text#||'%' or user_id7 = #p_search_text#
				or user_nm8 like '%'||#p_search_text#||'%' or user_id8 = #p_search_text#
				or user_nm9 like '%'||#p_search_text#||'%' or user_id9 = #p_search_text#
				or user_nm10 like '%'||#p_search_text#||'%' or user_id10 = #p_search_text#
				)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm1">
				(user_nm like '%'||#p_search_text#||'%' or user_id = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm2">
				(user_nm2 like '%'||#p_search_text#||'%' or user_id2 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm3">
				(user_nm3 like '%'||#p_search_text#||'%' or user_id3 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm4">
				(user_nm4 like '%'||#p_search_text#||'%' or user_id4 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm5">
				(user_nm5 like '%'||#p_search_text#||'%' or user_id5 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm6">
				(user_nm6 like '%'||#p_search_text#||'%' or user_id6 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm7">
				(user_nm7 like '%'||#p_search_text#||'%' or user_id7 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm8">
				(user_nm8 like '%'||#p_search_text#||'%' or user_id8 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm9">
				(user_nm9 like '%'||#p_search_text#||'%' or user_id9 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm10">
				(user_nm10 like '%'||#p_search_text#||'%' or user_id10 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="grp_nm1">
				(grp_nm_1 like '%'||#p_search_text#||'%' )
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="grp_nm2">
				(grp_nm_2 like '%'||#p_search_text#||'%' )
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="job_name">
				UPPER(job_name) like UPPER('%'||#p_search_text#||'%')
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="description">
				description like '%'||#p_search_text#||'%'
			</isEqual>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_search_text2">
			<!--<isEqual property="p_search_gubun2" compareValue="job_name">
				UPPER(job_name) like UPPER('%'||#p_search_text2#||'%')
			</isEqual>-->
			<!-- 작업명 다중 검색 -->
			<isEqual property="p_search_gubun2" compareValue="job_name">
				<isNotEmpty property="p_search_text2" open="(" close=")">
					<iterate property="p_search_job_name_list" conjunction="OR">
						UPPER(job_name) like UPPER('%'||#p_search_job_name_list[]#||'%')
					</iterate>
				</isNotEmpty>
			</isEqual>
			<isEqual property="p_search_gubun2" compareValue="description">
				description like '%'||#p_search_text2#||'%'
			</isEqual>
			<isEqual property="p_search_gubun2" compareValue="command">
				cmd_line like '%'||#p_search_text2#||'%'
			</isEqual>
			<isEqual property="p_search_gubun2" compareValue="order_id">
				order_id like '%'||#p_search_text2#||'%'
			</isEqual>
		</isNotEmpty>

		<isEmpty prepend="and" property="deleted">
			state_result NOT IN ('Deleted')
		</isEmpty>

		<isEqual property="date_gubun" compareValue="01">
			<isNotEmpty property="search_start_date">
				<![CDATA[
					and SUBSTR(start_time, 1, 8) >= REPLACE(#search_start_date#, '/', '')
				]]>
			</isNotEmpty>
			<isNotEmpty property="search_end_date">
				<![CDATA[
					and SUBSTR(start_time, 1, 8) <= REPLACE(#search_end_date#, '/', '')
				]]>
			</isNotEmpty>
		</isEqual>

		<isEqual property="date_gubun" compareValue="02">
			<isNotEmpty property="search_start_date">
				<![CDATA[
					and SUBSTR(end_time, 1, 8) >= REPLACE(#search_start_date#, '/', '')
				]]>
			</isNotEmpty>
			<isNotEmpty property="search_end_date">
				<![CDATA[
					and SUBSTR(end_time, 1, 8) <= REPLACE(#search_end_date#, '/', '')
				]]>
			</isNotEmpty>
		</isEqual>

		<isNotEmpty prepend="and" property="p_node_id">
			<!-- agent group과 agent 모두 조회가능 (2022.08.25 김은희) -->
			(node_group = #p_node_id# or node_id = #p_node_id#)
		</isNotEmpty>

		<isNotEmpty property="p_mcode_nm" prepend="AND">
			mcode_nm = #p_mcode_nm#
		</isNotEmpty>
		<isNotEmpty property="p_scode_nm" prepend="AND">
			scode_nm in ($p_scode_nm$)
		</isNotEmpty>
		
		<isNotEmpty prepend="and" property="p_search_user_daily">
			<isEqual property="p_search_user_daily" compareValue="S">
				susi_cnt != 0
			</isEqual>
			<isEqual property="p_search_user_daily" compareValue="Y">
				user_daily = 'SYSTEM' AND susi_cnt = 0
			</isEqual>
			<isEqual property="p_search_user_daily" compareValue="N">
				(user_daily != 'SYSTEM' OR user_daily IS NULL) AND susi_cnt = 0
			</isEqual>
		</isNotEmpty>
		
	</sql>

	<!-- 과거수행 -->
	<select id="jobLogList" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobLogList */
		SELECT * FROM(
			SELECT row_number() over() as row_num, TTT.* FROM(

  				select tb1.*
				  from (
				select *
						<!-- , (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_doc_master where doc_cd = susi_doc_cd)) as ins_nm1
						, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_approval_doc where doc_cd = susi_doc_cd and seq = '1' and approval_cd = '02')) as approval_nm1
						, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_approval_doc where doc_cd = susi_doc_cd and seq = '2' and approval_cd = '02')) as approval_nm2  -->
				from(
					SELECT
							a.ORDER_ID
							,a.DATA_CENTER
							,'0' AS active_gb
							,c.task_type
						 	,a.SCHED_TABLE AS order_table
							,a.APPLICATION
							,a.GROUP_NAME
							,a.JOB_NAME
							,a.OWNER
							,a.NODE_GROUP
							,a.NODE_ID
							,to_char(a.START_TIME,'YYYYMMDDHH24MISS') as START_TIME
							,to_char(a.END_TIME,'YYYYMMDDHH24MISS') as END_TIME
							,a.ODATE
							,(SELECT MAX(cmd_line) FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ b WHERE a.job_name = b.JOB_NAME AND a.order_id = b.order_id) AS cmd_line
							,a.RERUN_COUNTER
							,trim(A.STATUS) AS status
							,(select user_nm from $SCHEMA$.EZ_user where user_cd = b.user_cd_1) AS developer
						  	,(select user_hp from $SCHEMA$.EZ_user where user_cd = b.user_cd_1) AS contact
						  	,CASE WHEN a.status = 'Ended OK' THEN 'SUCCESS'
							    WHEN a.status = 'Ended Not OK' THEN 'FAIL'
							    ELSE 'ETC'  END AS state_result2
						    , A.STATUS AS state_result, A.description
						    , ( SELECT dept_nm FROM $SCHEMA$.EZ_DEPT WHERE dept_cd = B.dept_cd ) AS dept_nm
						    , B.*
						    ,(select user_daily from def_tables where sched_table = a.SCHED_TABLE  AND data_center = #real_data_center#) as user_daily
							, (select doc_cd from $SCHEMA$.ez_doc_05 where job_name = a.job_name and order_id = a.order_id) as susi_doc_cd
							, (select count(*) from $SCHEMA$.ez_doc_05 where job_name = a.job_name and order_id = a.order_id) as susi_cnt
							,TO_CHAR(TO_TIMESTAMP('2002-01-01', 'YYYY-MM-DD') + (SELECT (SELECT AVG_RUN_TIME FROM $SCHEMA$.EZ_AVG_TIME WHERE JOB_NAME = A.JOB_NAME
                    														AND DATA_CENTER = #real_data_center#)) * INTERVAL '1 second', 'HH24:MI:SS') AS AVG_RUN_TIME
							,sysout_yn
							,(case when (select f.task_type from DEF_JOB f where f.job_name = split_part( a.SCHED_TABLE, '/', 1)) = 'SMART Table' then 'Y' else 'N' end) as smart_job_yn
					FROM $SCHEMA$.EZ_RUNINFO_HISTORY A LEFT OUTER JOIN def_job C ON A.job_name = C.job_name,
					    ( SELECT job, user_cd_1,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_nm,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_nm2,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_nm3,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_nm4,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_nm5,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_nm6,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_nm7,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_nm8,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_nm9,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_nm10,
								( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = tb1.grp_cd_1 ) AS grp_nm_1,
								( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = tb1.grp_cd_2 ) AS grp_nm_2,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_id,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_id2,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_id3,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_id4,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_id5,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_id6,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_id7,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_id8,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_id9,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_id10,
								error_description, ins_date,
								( SELECT dept_cd FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS dept_cd,
								jobSchedGb
					  	  FROM $SCHEMA$.EZ_JOB_MAPPER  tb1 WHERE data_center = #data_center#) B
				   WHERE 1 = 1
				     AND a.job_name = B.JOB
					<!--AND a.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s) -->

				    <include refid="jobLogListInc" />

			) tb1
	           	WHERE 1 = 1

				<isEmpty property="sort">
					ORDER BY odate, status ,start_time desc
				</isEmpty>
				<isNotEmpty property="sort">
					ORDER BY odate, $sort$
				</isNotEmpty>

			)TTT

			WHERE 1 = 1
		) tb1

		WHERE 1 = 1

		<isNotEmpty property="pagingNum">
			OFFSET $startRowNum$ ROWS FETCH FIRST $pagingNum$ ROWS ONLY
		</isNotEmpty>

	</select>

	<!-- 과거수행건수-->
	<select id="jobLogListCnt" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobLogListCnt */
		SELECT count(*) as total_count FROM(
			SELECT TTT.* FROM(
  				select tb1.*
				  from (
					select *
							<!-- , (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_doc_master where doc_cd = susi_doc_cd)) as ins_nm1
						   	, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_approval_doc where doc_cd = susi_doc_cd and seq = '1' and approval_cd = '02')) as approval_nm1
  				   			, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_approval_doc where doc_cd = susi_doc_cd and seq = '2' and approval_cd = '02')) as approval_nm2 -->
					 from(
						SELECT
								a.ORDER_ID
								,a.DATA_CENTER
								,'0' AS active_gb
							 	,a.SCHED_TABLE AS order_table
								,a.APPLICATION
								,a.GROUP_NAME
								,a.JOB_NAME
								,a.OWNER
								,a.NODE_GROUP
								,a.NODE_ID
								,to_char(a.START_TIME,'YYYYMMDDHH24MISS') as START_TIME
								,to_char(a.END_TIME,'YYYYMMDDHH24MISS') as END_TIME
								,a.ODATE
								,a.RERUN_COUNTER
								,(SELECT MAX(cmd_line) FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ b WHERE a.job_name = b.JOB_NAME AND a.order_id = b.order_id) AS cmd_line
								,trim(A.STATUS) AS status
								,(select user_nm from $SCHEMA$.EZ_user where user_cd = b.user_cd_1) AS developer
							  	,(select user_hp from $SCHEMA$.EZ_user where user_cd = b.user_cd_1) AS contact
							  	,CASE WHEN a.status = 'Ended OK' THEN 'SUCCESS'
								    WHEN a.status = 'Ended Not OK' THEN 'FAIL'
								    ELSE 'ETC'  END AS state_result2
							    , A.STATUS AS state_result, A.description
							    , ( SELECT dept_nm FROM $SCHEMA$.EZ_DEPT WHERE dept_cd = B.dept_cd ) AS dept_nm
							    , B.*
							    , (select user_daily from def_tables where sched_table = a.SCHED_TABLE  AND data_center = #real_data_center#) as user_daily
								, (select doc_cd from $SCHEMA$.ez_doc_05 where job_name = a.job_name and order_id = a.order_id) as susi_doc_cd
								, (select count(*) from $SCHEMA$.ez_doc_05 where job_name = a.job_name and order_id = a.order_id) as susi_cnt
					  			, A.sysout_yn
						FROM $SCHEMA$.EZ_RUNINFO_HISTORY A LEFT OUTER JOIN def_job C ON A.job_name = C.job_name,
						    ( SELECT job, user_cd_1,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_nm,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_nm2,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_nm3,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_nm4,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_nm5,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_nm6,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_nm7,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_nm8,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_nm9,
								( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_nm10,
								( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = tb1.grp_cd_1 ) AS grp_nm_1,
								( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = tb1.grp_cd_2 ) AS grp_nm_2,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_id,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_id2,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_id3,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_id4,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_id5,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_id6,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_id7,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_id8,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_id9,
								( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_id10,
								error_description, ins_date,
								( SELECT dept_cd FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS dept_cd,
								jobSchedGb
						  	  FROM $SCHEMA$.EZ_JOB_MAPPER  tb1 WHERE data_center = #data_center#) B		      
					   WHERE 1 = 1
					     AND a.job_name = B.JOB
						<!--AND a.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s) -->
						
					    <include refid="jobLogListInc" />
					
				) tb1
		           	
				<isEmpty property="sort">
					ORDER BY odate, status ,start_time desc
				</isEmpty>
				<isNotEmpty property="sort">
					ORDER BY odate, $sort$
				</isNotEmpty>
			
			)TTT
			
			WHERE 1 = 1
		) tb1
		
		WHERE 1 = 1
		
	</select>
	
	<!-- waitConditionDetail -->
	<select id="waitConditionDetail" resultClass="WaitDetailBean" parameterClass="java.util.Map">
	/* POSTGRE_M > waitConditionDetail */
		SELECT 
			trim(a.job_name) as job_name
			,trim(a.memname) as memname
			,a.order_id
			,a.start_time
			,a.end_time
			,a.rerun_counter
			,a.state
			,a.odate
			,a.description
			,trim(a.DESCRIPTION) as descript
			,case WHEN A.DELETE_FLAG='1' THEN 'Deleted'
						               <!--  WHEN  RTRIM(A.STATE) like 'Held%' THEN 'Held'  -->
						               <!--  WHEN (A.STATUS='Wait Condition' AND trim(A.FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
						               ELSE A.STATUS END as state_result
			,case WHEN RTRIM(A.STATE) LIKE 'Held%' THEN 'Y' ELSE 'N' END as holdflag
		FROM $active_net_name$JOB a LEFT OUTER JOIN $SCHEMA$.EZ_JOB_MAPPER  b 
		  ON b.data_center=#data_center#
		 and a.job_name = b.JOB
		WHERE 1=1 
		AND a.order_id in (
						select 
							t2.order_id
						FROM $active_net_name$JOB t1,$active_net_name$LNKO_P t2
						WHERE 1=1 
						AND t1.ODATE =  SUBSTR(REPLACE(#odate#, '/', ''), 3, 8)
						and t1.order_id = #order_id#
						and t2.odate =  SUBSTR(REPLACE(#odate#, '/', ''), 5, 8)
						
						and t2.CONDITION IN ( 
											  	SELECT CONDITION 
											  	FROM $active_net_name$JOB t3, $active_net_name$LNKI_P t4
											  	where 1=1
											 	and t3.ODATE = SUBSTR(REPLACE(#odate#, '/', ''), 3, 8)
											  	AND t3.ORDER_ID  = #order_id#
												and t3.ORDER_ID = t4.ORDER_ID 
											)
						)
			
	</select>
	
	
	<!-- waitTimeDetail -->
	<select id="waitTimeDetail" resultClass="WaitDetailBean" parameterClass="java.util.Map">
	/* POSTGRE_M > waitTimeDetail */
	<![CDATA[
		SELECT from_time, to_time 
		FROM  $active_net_name$JOB 
		WHERE order_id = #order_id#
		UNION 
		SELECT from_time, to_time 
		FROM  $SCHEMA$.EZ_HISTORY_$data_center_code$
		WHERE order_id = #order_id#
	]]>
	</select>
	
	
	<!--//////////////// keb /////////////////-->
	<!-- jobOpList -->
	<sql id="jobOpListInc">
	/* POSTGRE_M > jobOpListInc */
	<![CDATA[
			FROM $active_net_name$JOB A
			WHERE 1=1
			and a.odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		)
		where 1=1
	]]>	
		
		<isNotEmpty prepend="and" property="sched_table">
			order_table = #sched_table#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="application_of_def">
			application = #application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="group_name_of_def">
			group_name = #group_name_of_def#
		</isNotEmpty>	
		<isNotEmpty prepend="and" property="sub_table_of_def">
			job_name = #sub_table_of_def#
		</isNotEmpty>	
		
		<isNotEmpty prepend="and" property="status">
			state_result = #status#
		</isNotEmpty>
		
		<isNotEmpty prepend="and" property="search_text">
			<isEqual property="search_gubun" compareValue="job_name">
				UPPER(job_name) like UPPER('%'||#search_text#||'%')
			</isEqual>
			<isEqual property="search_gubun" compareValue="description">
				description like '%'||#search_text#||'%'
			</isEqual>
		</isNotEmpty>
		
		<isNotEmpty prepend="and" property="search_gubun2">
			<isEqual property="search_gubun2" compareValue="1">
				application = 'SUSI'
			</isEqual>
		</isNotEmpty>
		
	</sql>
	
	<select id="jobOpListCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobOpListCnt */
	<![CDATA[
		select count(*) as total_count from( 
			select * from(
				SELECT 
					A.order_table
					,A.application
			      	,A.group_name
			      	,A.job_name
			      	,A.memname
			      	,CASE WHEN a.status = 'Wait User' THEN 'WAIT' 
			      				WHEN a.status = 'Wait Condition' THEN 'WAIT' 
			      				WHEN a.status = 'Wait Resource' THEN 'WAIT'
			      				WHEN a.status = 'Wait Host' THEN 'WAIT' 
			      				WHEN a.status = 'Executing' THEN 'RUNNING' 
			      				WHEN a.status = 'Ended OK' THEN 'SUCCESS' 
							    WHEN a.status = 'Ended Not OK' THEN 'FAIL' 
							    ELSE 'ETC'  END state_result
				    , A.description
			      
	]]>
		<include refid="jobOpListInc" />
		)
	</select>
	
	<select id="jobOpList" resultClass="JobOpBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobOpList */
		SELECT * FROM(
			SELECT TTT.* FROM(
  			
  			select * from(
				SELECT A.start_time
			      		,A.end_time
			      		,A.rerun_counter
			      		,A.order_table
			      		,A.application
			      		,A.group_name
			      		,trim(A.job_name) job_name
			      		,trim(A.memname) memname
			      		,CASE WHEN a.status = 'Wait User' THEN 'WAIT' 
			      				WHEN a.status = 'Wait Condition' THEN 'WAIT' 
			      				WHEN a.status = 'Wait Resource' THEN 'WAIT'
			      				WHEN a.status = 'Wait Host' THEN 'WAIT' 
			      				WHEN a.status = 'Executing' THEN 'RUNNING' 
			      				WHEN a.status = 'Ended OK' THEN 'SUCCESS' 
							    WHEN a.status = 'Ended Not OK' THEN 'FAIL' 
							    ELSE 'ETC'  END state_result
			          ,case WHEN RTRIM(A.STATE) like 'Held%' THEN 'Y' ELSE 'N' END holdflag
			          ,A.order_id
			          ,trim(A.STATUS) status
			          ,A.odate
			          ,A.state
			          ,A.job_id 
			          ,( CASE WHEN A.CRITICAL = '1' THEN 'Y' ELSE 'N' END ) critical_yn
			          , A.description
		<include refid="jobOpListInc" />
		ORDER BY $sort$
		
			)TTT
		) tb1
		<isNotEmpty property="startRowNum">
			OFFSET #startRowNum# - 1 LIMIT #endRowNum# - #startRowNum# + 1
		</isNotEmpty>
		
	</select>
	
	
	<!-- EM COMMON -->
	<select id="emCommonList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > emCommonList */
		<![CDATA[
		 select
		    data_center
		    ,ctm_host_name
		    ,control_m_ver
		    ,time_zone
		    ,ctm_daily_time
		    ,ctm_odate
		from comm
  		]]>
	</select>
	
	
	<!-- DB SPACE -->
	<select id="emDbList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > emDbList */
	<![CDATA[
		 select 
		 	data.name tablespace_name
		 	,data.Mbytes m_bytes
		 	,free.free free
		 	,trunc((data.Mbytes-free.free)/data.Mbytes*100,2) used
		from (select tablespace_name name, trunc(sum(bytes/1024/1024)) Mbytes
     		  from dba_data_files group by tablespace_name) data
     		  ,(select free.tablespace_name, trunc(sum(free.bytes)/1024/1024,1) free
         		from dba_free_space free group by free.tablespace_name) free
  		where data.name = free.tablespace_name
  		]]>
	</select>
	
	<!-- EM PROCESS -->
	<select id="emProcessList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > emProcessList */
	<![CDATA[
		SELECT 
			process_type
	          ,case  WHEN (PROCESS_TYPE)='0'  THEN 'Gateway'
	                WHEN (PROCESS_TYPE)='1'  THEN 'GCS'
	                WHEN (PROCESS_TYPE)='2'  THEN 'GUI'
	                WHEN (PROCESS_TYPE)='3'  THEN 'GAS'
	                WHEN (PROCESS_TYPE)='4'  THEN 'BIM'                                  
	                WHEN (PROCESS_TYPE)='5'  THEN 'Forecast'
	                WHEN (PROCESS_TYPE)='6'	 THEN 'Admin Agent'
	                WHEN (PROCESS_TYPE)='9'	 THEN 'CMS'
	                WHEN (PROCESS_TYPE)='10' THEN 'CMSGATE'
	                  ELSE 'ETC'  
	                     END AS pname
	         , case WHEN (CURRENT_STATE)='0'  THEN 'Down'
	               WHEN (CURRENT_STATE)='1'  THEN 'Up'
	                  ELSE 'ETC' 
	                    END AS pstate
	          ,case WHEN (DESIRED_STATE)='0'  THEN 'Desired Down'
	               WHEN (DESIRED_STATE)='1'  THEN 'Desired Up'
	                   ELSE 'ETC' 
	                    END AS desired_state 
	          , TO_CHAR(LAST_UPDATE,'YYYY/MM/DD HH24:MI:SS') AS u_time
	          ,CHECK_INTERVAL AS interval
	          ,FREE_TEXT AS free_text  
	     FROM CONFREG 
	     ORDER BY pname ASC
  		]]>
	</select>
	
	<!-- CCM PROCESS -->
	<select id="ccmPocessList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > ccmPocessList */
	<![CDATA[
	    SELECT 
	    	machine_name
	    	,process_name AS cprocess_name
	    	,   case 
	                 WHEN (PROCESS_TYPE)='6' THEN  'CONTROLM/EM Configuration Agent'
	                 WHEN (PROCESS_TYPE)='9' THEN  'CONTROLM Configuration Server'
	                 WHEN (PROCESS_TYPE)='10' THEN 'CONTROLM Configuration Server GATE'
	                  ELSE 'ETC'  
	                  END AS cprocess_type
	        , pid
	        , ctlport 
	    FROM COMMREG WHERE PROCESS_TYPE IN ('6','9','10')
	    ORDER BY cprocess_name ASC
  		]]>
	</select>
	
	<!-- EM PROCESS 상세-->
	<select id="emProcessDetailList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > emProcessDetailList */
	<![CDATA[
		SELECT 
			machine_name
			, process_name AS cprocess_name
			,   case WHEN (PROCESS_TYPE)='0' THEN  'Gateway'
	                 WHEN (PROCESS_TYPE)='1' THEN  'GCS'
	                 WHEN (PROCESS_TYPE)='2' THEN  'GUI'
	                 WHEN (PROCESS_TYPE)='3' THEN  'GAS'
	                 WHEN (PROCESS_TYPE)='4' THEN  'BIM'                                  
	                 WHEN (PROCESS_TYPE)='5' THEN  'Forecast'
	                 WHEN (PROCESS_TYPE)='6' THEN  'CONTROLM/EM Configuration Agent'
	                 WHEN (PROCESS_TYPE)='9' THEN  'CONTROLM Configuration Server'
	                 WHEN (PROCESS_TYPE)='10' THEN 'CONTROLM Configuration Server GATE'
	                    ELSE 'ETC'  
	                       END AS cprocess_type
	         , pid, ctlport 
	    FROM COMMREG WHERE PROCESS_TYPE NOT IN ('6','9','10') 
	    ORDER BY cprocess_type ASC
  		]]>
	</select>
	
	<!-- 에이전트  상태-->
	<select id="agentList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > agentList */
	<![CDATA[
		SELECT 	nodeid, agstat, hostname, version, os_name, platform, 
				TO_DATE(last_upd, 'yyyy/mm/dd hh24:mi:ss') AS last_upd
		  FROM 	CTMSVRT.CMR_NODES
		 ORDER 	BY hostname
  		]]>
	</select>
	
	<!-- job define info-->
	
	<select id="jobDefineInfoBasic" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoBasic */
		select distinct 
		   t2.data_center AS data_center		   
<!-- 		   ,t2.sched_table AS table_name -->
		   ,t1.parent_table AS table_name
		   ,t2.user_daily AS user_daily
		   ,t1.job_name AS job_name
		   ,t1.application AS application
		   ,t1.group_name AS group_name
		   ,lower(t1.task_type) AS task_type
		   ,t1.mem_lib AS mem_lib  
		   ,t1.memname AS mem_name
		   ,t1.owner AS owner
		   ,t1.author AS author
		   ,t1.description AS description
		   ,t1.cmd_line AS command
		   ,t1.node_id
		   ,t1.day_str AS month_days
		   ,case when t1.days_and_or = 'A' then '1' when t1.days_and_or = 'O' then '0' else t1.days_and_or end AS schedule_and_or
		   ,t1.w_day_str AS week_days
		   ,t1.weeks_cal AS weeks_cal
		   ,t1.days_cal AS days_cal
		   ,t1.retro AS retro
		   ,t1.month_1
		   ,t1.month_2
		   ,t1.month_3
		   ,t1.month_4
		   ,t1.month_5
		   ,t1.month_6
		   ,t1.month_7
		   ,t1.month_8
		   ,t1.month_9
		   ,t1.month_10
		   ,t1.month_11
		   ,t1.month_12
		   ,case when t1.multy_agent='Y' then '1' else '0' end AS multiagent
		   ,t1.confirm_flag 
		   ,t1.priority
		   ,t1.critical
		   ,t1.from_time AS time_from
		   ,t1.to_time AS time_until
		   ,t1.time_zone
		   ,t1.cyclic
		   ,substr(t1.interval,1,5) AS rerun_interval
		   ,substr(t1.interval,6,1) AS rerun_interval_time
		   ,case when t1.ind_cyclic='S' then 'start' when t1.ind_cyclic='T' then 'target' when t1.ind_cyclic='E' then 'end' else t1.ind_cyclic end AS count_cyclic_from
		   ,t1.max_rerun AS rerun_max
		   ,t1.max_wait 
		   ,t1.dates_str AS t_general_date
		   ,t1.interval_sequence
		   ,t1.specific_times
		   ,t1.tolerance
		   ,t1.cyclic_type
		   ,t1.active_from, t1.active_till
		   ,t1.conf_cal
		   ,t1.shift
		   ,t1.shift_num
		   ,t1.appl_type
		   ,t1.appl_form
		   , ARRAY_TO_STRING(ARRAY_AGG(t3.when_cond),',') as when_cond
		   , ARRAY_TO_STRING(ARRAY_AGG($SCHEMA$.NVL(t3.shout_time,'')),',') as shout_time
		   , ARRAY_TO_STRING(ARRAY_AGG($SCHEMA$.NVL(t3.message,'')),',') as message
		   , ( SELECT scode_nm FROM $SCHEMA$.EZ_SCODE WHERE mcode_cd = 'M6' AND scode_eng_nm = t2.data_center ) AS data_center_name
		   , ( SELECT user_nm FROM $SCHEMA$.ez_user WHERE user_id = t1.author AND del_yn = 'N') AS author_nm
		   , (case when (select t4.job from $SCHEMA$.ez_job_mapper t4 where t1.job_name = t4.job) is not null then 'Y' else 'N' end) as cmjob_transfer
		from def_job t1 left outer join DEF_SHOUT t3 on t1.job_id = t3.job_id AND t1.table_id = t3.table_id
		   ,def_tables t2
		where t1.table_id = t2.table_id
		and t1.job_name = #job_name#	
	
		<isNotEmpty prepend="and" property="data_center">
			data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') <![CDATA[ > ]]> 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
									ELSE #data_center# END )
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_sched_table">
			parent_table = #p_sched_table#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
			<!-- application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		
		<!-- 엑셀일괄양식 다운로드 시 중복된 작업명 존재하면 오류 발생해서 주석 해제 (2022.10.15 강명준) -->
		<isNotEqual property="table_id" compareValue="0">
			and t1.table_id = #table_id#::integer
		</isNotEqual>
		<isNotEqual property="job_id" compareValue="0">
			and t1.job_id = #job_id#::integer
		</isNotEqual>

		group by data_center, table_name, user_daily, job_name, application, group_name, task_type, mem_lib, mem_name, owner, author, description, command,
				node_id, month_days, schedule_and_or, week_days, weeks_cal, days_cal, retro, month_1, month_2, month_3, month_4, month_5, month_6, month_7, month_8,
				month_9, month_10, month_11, month_12, multiagent, confirm_flag, priority, critical, time_from, time_until, time_zone, cyclic, rerun_interval, rerun_interval_time,
				count_cyclic_from, rerun_max, max_wait, t_general_date, interval_sequence, specific_times, tolerance, cyclic_type, active_from, active_till, conf_cal, shift,
				shift_num ,appl_type, appl_form
	</select>
	
	<select id="jobDefineInfoConditionsIn" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoConditionsIn */
	<![CDATA[
		select 
			case when t1.and_or = 'A' then 'and' when t1.and_or = 'O' then 'or' else t1.and_or end AS in_conditions_opt
		     ,(case when t1.parentheses = '(' then '(' else '' end)||t1.condition || (case when t1.parentheses = ')' then ')' else '' end) || ',' || t1.odate || ',' || case when t1.and_or = 'A' then 'and' when t1.and_or = 'O' then 'or' else t1.and_or end AS t_conditions_in
		from def_lnki_p t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id
		and t2.job_name = #job_name#
	]]>
		<isNotEmpty prepend="and" property="p_sched_table">
			parent_table = #p_sched_table#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
			<!-- application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		<!-- 
		<isNotEmpty property="table_id">
			and t1.table_id = #table_id#
		</isNotEmpty>	
		<isNotEmpty property="job_id">
			and t1.job_id = #job_id#
		</isNotEmpty>
		-->
		order by order_
	</select>
	
	<select id="jobDefineInfoConditionsOut" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoConditionsOut */
	<![CDATA[
		select 
		    t1.condition || ',' || t1.odate || ',' || case when t1.sign='+' then 'add' when t1.sign='-' then 'delete' else t1.sign end AS t_conditions_out
		from def_lnko_p t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id
		and t2.job_name = #job_name#	
	]]>
		<isNotEmpty prepend="and" property="p_sched_table">
			parent_table = #p_sched_table#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		<isNotEmpty property="table_id">
			and t1.table_id = $table_id$
		</isNotEmpty>	
		<isNotEmpty property="job_id">
			and t1.job_id = $job_id$
		</isNotEmpty>

	</select>
	
	<select id="jobDefineInfoResourcesQ" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoResourcesQ */
	<![CDATA[
		select
		    t1.resource_ || ',' || t1.quant AS t_resources_q
		from def_lnki_q t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id
		and t2.job_name = #job_name#	
	]]>
		<isNotEmpty prepend="and" property="p_sched_table">
			parent_table = #p_sched_table#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
			<!-- application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		<!-- 
		<isNotEmpty property="table_id">
			and t1.table_id = #table_id#
		</isNotEmpty>	
		<isNotEmpty property="job_id">
			and t1.job_id = #job_id#
		</isNotEmpty>
		-->
	
	</select>
	
	<select id="jobDefineInfoResourcesC" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoResourcesC */
	<![CDATA[
		select
		    t1.resource_ || ',' || case when t1.type='E' then 'exclusive' when t1.type='S' then 'shared' else  t1.type end AS t_resources_c
		from def_lnki_c t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id
		and t2.job_name = #job_name#	
	]]>
		<isNotEmpty prepend="and" property="p_sched_table">
			parent_table = #p_sched_table#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
			<!-- application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
	
		<!-- 
		<isNotEmpty property="table_id">
			and t1.table_id = #table_id#
		</isNotEmpty>	
		<isNotEmpty property="job_id">
			and t1.job_id = #job_id#
		</isNotEmpty>
		-->
	
	</select>
	
	<select id="jobDefineInfoSetVar" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoSetVar */
	<![CDATA[
		select
		    replace(t1.name, '%', '') || ',' || coalesce(t1.value,'') AS t_set
		from def_setvar t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id
		and t2.job_name = #job_name#	
	]]>
		<isNotEmpty prepend="and" property="p_sched_table">
			parent_table = #p_sched_table#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
			<!-- application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		<!-- 
		<isNotEmpty property="table_id">
			and t1.table_id = #table_id#
		</isNotEmpty>	
		<isNotEmpty property="job_id">
			and t1.job_id = #job_id#
		</isNotEmpty>
		-->
		order by order_	
	</select>
	
	<select id="jobDefineInfoStep" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoStep */
	<![CDATA[
		]]>
		select
			case when u.on_do='on' then 'O' else 'A' end
		    ||','|| u.type
		    || case when u.type = 'Statement' then ',' || u.stmt || ',' || u.code
		        when u.type = 'Set-Var' then ',' || u.setvar_name || ',' || u.setvar_value
		        when u.type = 'Shout' then ',' || u.shout_destination || ',' || case when u.shout_urgency='R' then 'regular' when u.shout_urgency='U' then 'urgent' else 'very_urgent' end  || ',' || shout_message
		        when u.type = 'Force-Job' then ',' || u.forcej_sched_table || ',' || u.forcej_job || ',' || forcej_odate
		        when u.type = 'Sysout' then ',' || u.sysout_sysopt || ',' || u.sysout_parm
		        when u.type = 'Condition' then ',' || u.cond_condition || ',' || u.cond_odate || ',' || (case when u.cond_sign='+' then 'add' when u.cond_sign='-' then 'delete' else u.cond_sign end)
		        when u.type = 'Mail' then ',' || u.mail_destination || ',' || u.mail_cc_destination || ',' || u.mail_subject_line || ',' || case when u.mail_urgency='R' then 'regular' when u.mail_urgency='U' then 'urgent' else 'very_urgent' end || ',' || u.mail_message 
		        else '' end AS t_steps
		from
		    (
		    select
		    	if_no, on_no AS no_,'on' AS on_do, 'Statement' AS type
		    	,stmt AS stmt, code AS code
		    	,'' AS setvar_name, '' AS setvar_value
		    	,'' AS shout_destination, '' AS shout_urgency, '' AS shout_message
		    	,'' AS forcej_sched_table, '' AS forcej_job, '' AS forcej_odate
		    	,'' AS sysout_sysopt, '' AS sysout_parm
		    	,'' AS cond_condition, '' AS cond_odate, '' AS cond_sign
		    	,'' AS mail_destination, '' AS mail_cc_destination, '' AS mail_subject_line, '' AS mail_urgency, '' AS mail_message
		    from def_on t1, def_job t2
			where 1=1 
			and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id
			and t2.job_name = #job_name#
			<isNotEmpty prepend="and" property="p_sched_table">
				parent_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
		    
		    union all
		    select 
		    	if_no, do_no,'do', action
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from def_do t1, def_job t2
			where 1=1 
			and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id
			and t2.job_name = #job_name#
		    <isNotEmpty prepend="and" property="p_sched_table">
				parent_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
			
		    union all
		    select 
		    	if_no, do_no,'do', 'Set-Var'
		    	,'', ''
		    	,name, value
		    	,'', '', ''
		    	,'', '', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from  def_do_setvar t1, def_job t2
			where 1=1 
			and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id
			and t2.job_name = #job_name#
			<isNotEmpty prepend="and" property="p_sched_table">
				parent_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
			
		    union all
		    select 
		    	if_no, do_no,'do', 'Shout'
		    	,'', ''
		    	,'', ''
		    	,destination, urgency, message
		    	,'', '', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from  def_do_shout t1, def_job t2
			where 1=1 
			and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id
			and t2.job_name = #job_name#
			<isNotEmpty prepend="and" property="p_sched_table">
				parent_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
			
		    union all
		    select 
		    	if_no, do_no,'do', 'Force-Job'
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,sched_table, job, odate
		    	,'', ''
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from  def_do_forcej t1, def_job t2
			where 1=1 
			and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id
			and t2.job_name = #job_name#
			<isNotEmpty prepend="and" property="p_sched_table">
				parent_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
			
			union all
		    select 
		    	t1.if_no, t1.do_no,'do', 'Sysout'
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', ''
		    	,t1.sysopt, t1.parm
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from  def_do_sysout t1, def_job t2
			where 1=1 
			and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id
			and t2.job_name = #job_name#
			<isNotEmpty prepend="and" property="p_sched_table">
				parent_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
			
			union all
		    select 
		    	if_no, do_no,'do', 'Condition'
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', ''
		    	,'', ''
		    	,condition, odate, sign
		    	,'', '', '', '', ''
		    from  def_do_cond t1, def_job t2
			where 1=1 
			and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id
			and t2.job_name = #job_name#
			<isNotEmpty prepend="and" property="p_sched_table">
				parent_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
			
			union all
		    select 
		    	if_no, do_no,'do', 'Mail'
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', ''
		    	,'', ''
		    	,'', '', ''
		    	,destination, cc_destination, subject_line, urgency, substring(message, 5)
		    from  def_do_mail t1, def_job t2
			where 1=1 
			and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id
			and t2.job_name = #job_name#			
			<isNotEmpty prepend="and" property="p_sched_table">
				parent_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
			<!--
			<isNotEmpty property="table_id">
				and t1.table_id = #table_id#
			</isNotEmpty>	
			<isNotEmpty property="job_id">
				and t1.job_id = #job_id#
			</isNotEmpty>
			-->
			
		    ) u
		where 1=1
		order by if_no, no_, on_do DESC
	
	
	</select>
	
	<select id="jobDefineInfoShout" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoShout */
	<![CDATA[
		select
		    case when t1.when_cond='OK' then 'ok'
		    			when t1.when_cond='NOTOK' then 'not_ok'
		    			when t1.when_cond='RERUN' then 'rerun'
		    			when t1.when_cond='LATESUB' then 'late_submission'
		    			when t1.when_cond='LATETIME' then 'late_time'
		    			when t1.when_cond='EXECTIME' then 'execution_time'
		    			else t1.when_cond end
		    || ',' || case when t1.shout_time is not null then t1.shout_time else '' end
		    || ',' || t1.destination 
		    || ',' || case when t1.urgency='R' then 'regular' when t1.urgency='U' then 'urgent' else 'very_urgent' end  || ',' || t1.message AS t_postproc
		from def_shout t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id
		and t2.job_name = #job_name#	
	]]>
		<isNotEmpty prepend="and" property="p_sched_table">
			parent_table = #p_sched_table#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		<!--
		<isNotEmpty property="table_id">
			and t1.table_id = #table_id#
		</isNotEmpty>	
		<isNotEmpty property="job_id">
			and t1.job_id = #job_id#
		</isNotEmpty>
		-->
	
	</select>
	
	<select id="jobDefineInfoTags" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoTags */
		SELECT tag_name AS t_tag_name
		  
		<isEqual property="task_type" compareValue="SMART Table">
			FROM DEF_TAGS tb1, DEF_JOB tb2
		</isEqual>
		<isNotEqual property="task_type" compareValue="SMART Table">
			FROM DEF_JOB_TAGS tb1, DEF_JOB tb2
		</isNotEqual>
		  
		 WHERE tb1.table_id = tb2.table_id
		   AND tb1.job_id = tb2.job_id
		   AND tb2.job_name = #job_name#
		   <isNotEmpty prepend="and" property="p_sched_table">
				parent_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
		   <!--
		   <isNotEmpty property="table_id">
				and tb1.table_id = #table_id#
			</isNotEmpty>	
			<isNotEmpty property="job_id">
				and tb1.job_id = #job_id#
			</isNotEmpty>
			-->
		   
	</select>
	
	<!-- job define info (Alert Monitor Click) -->
	
	<select id="jobDefineInfoBasic_new" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoBasic_new */
	<![CDATA[
		select 
		   t2.data_center as data_center
		   ,( CASE WHEN $SCHEMA$.INSTR(t2.data_center, ',') > 0 
					THEN (SELECT scode_nm FROM $SCHEMA$.EZ_SCODE WHERE scode_cd = SUBSTR(t2.data_center, 1, $SCHEMA$.INSTR(t2.data_center, ',')-1)) 
				   ELSE t2.data_center END ) AS data_center_name,
		   ,t2.sched_table as table_name
		   ,t2.user_daily as user_daily
		   ,t1.job_name as job_name
		   ,t1.application as application
		   ,t1.group_name as group_name
		   ,lower(t1.task_type) as task_type
		   ,t1.mem_lib as mem_lib
		   ,t1.memname as mem_name
		   ,t1.owner as owner
		   ,t1.author as author
		   ,t1.description as description
		   ,t1.cmd_line as command
		   ,t1.node_id
		   ,t1.day_str as month_days
		   ,case when t1.days_and_or = 'A' then '1' when t1.days_and_or = 'O' then '0' else t1.days_and_or end as schedule_and_or
		   ,t1.w_day_str as week_days
		   ,t1.weeks_cal as weeks_cal
		   ,t1.days_cal as days_cal
		   ,t1.retro as retro
		   ,t1.month_1
		   ,t1.month_2
		   ,t1.month_3
		   ,t1.month_4
		   ,t1.month_5
		   ,t1.month_6
		   ,t1.month_7
		   ,t1.month_8
		   ,t1.month_9
		   ,t1.month_10
		   ,t1.month_11
		   ,t1.month_12
		   ,case when t1.multy_agent='Y' then '1' else '0' end as multiagent
		   ,t1.confirm_flag 
		   ,t1.priority
		   ,t1.critical
		   ,t1.from_time as time_from
		   ,t1.to_time as time_until
		   ,t1.time_zone
		   ,t1.cyclic
		   ,substr(t1.interval,1,5) as rerun_interval
		   ,substr(t1.interval,6,1) as rerun_interval_time
		   ,case when t1.ind_cyclic='S' then 'start' when t1.ind_cyclic='T' then 'target' when t1.ind_cyclic='E' then 'end' else t1.ind_cyclic end as count_cyclic_from
		   ,t1.max_rerun as rerun_max
		   ,t1.max_wait 
		   ,trim(t1.dates_str) as t_general_date
		from def_job t1, def_tables t2
		where t1.table_id = t2.table_id		
		and t1.job_name = #job_name#
	]]>
	</select>
	
	<select id="jobDefineInfoConditionsIn_new" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoConditionsIn_new */
	<![CDATA[
		select 
			case when t1.and_or = 'A' then 'and' when t1.and_or = 'O' then 'or' else t1.and_or end as in_conditions_opt
			 ,(case when t1.parentheses = '(' then '(' else '' end) ||t1.condition || (case when t1.parentheses = ')' then ')' else '' end) || ',' || t1.odate || ',' || case when t1.and_or = 'A' then 'and' when t1.and_or = 'O' then 'or' else t1.and_or end AS t_conditions_in
		from def_lnki_p t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id 
		and t2.job_name = #job_name#
		order by order_
	]]>
	</select>
	
	<select id="jobDefineInfoConditionsOut_new" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoConditionsOut_new */
	<![CDATA[
		select 
		    t1.condition || ',' || t1.odate || ',' || case when t1.sign='+' then 'add' when t1.sign='-' then 'delete' else t1.sign end  as t_conditions_out
		from def_lnko_p t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id 
		and t2.job_name = #job_name#
	
	]]>
	</select>
	
	<select id="jobDefineInfoResourcesQ_new" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoResourcesQ_new */
	<![CDATA[
		select
		    t1.resource_ || ',' || t1.quant as t_resources_q
		from def_lnki_q t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id 
		and t2.job_name = #job_name#
	
	]]>
	</select>
	
	<select id="jobDefineInfoResourcesC_new" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoResourcesC_new */
	<![CDATA[
		select
		    t1.resource_ || ',' || case when t1.type='E' then 'exclusive' when t1.type='S' then 'shared' else  t1.type end as t_resources_c
		from def_lnki_c t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id 
		and t2.job_name = #job_name#
	
	]]>
	</select>
	
	<select id="jobDefineInfoSetVar_new" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoSetVar_new */
	<![CDATA[
		select
		    replace(t1.name, '%', '') || ',' || t1.value as t_set
		from def_setvar t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id 
		and t2.job_name = #job_name#
		order by order_
	
	]]>
	</select>
	
	<select id="jobDefineInfoStep_new" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoStep_new */
	<![CDATA[
		select
			case when u.on_do='on' then 'O' else 'A' end
		    ||','|| u.type
		    || case when u.type = 'Statement' then ',' || u.stmt || ',' || u.code
		        when u.type = 'Set-Var' then ',' || u.setvar_name || ',' || u.setvar_value
		        when u.type = 'Shout' then ',' || u.shout_destination || ',' || case when u.shout_urgency='R' then 'regular' when u.shout_urgency='U' then 'urgent' else 'very_urgent' end  || ',' || shout_message
		        when u.type = 'Force-Job' then ',' || u.forcej_sched_table || ',' || u.forcej_job || ',' || forcej_odate
		        when u.type = 'Sysout' then ',' || u.sysout_sysopt || ',' || u.sysout_parm
		        when u.type = 'Condition' then ',' || u.cond_condition || ',' || u.cond_odate || ',' || (case when u.cond_sign='+' then 'add' when u.cond_sign='-' then 'delete' else u.cond_sign end)
		        when u.type = 'Mail' then ',' || u.mail_destination || ',' || u.mail_cc_destination || ',' || u.mail_subject_line || ',' || case when u.mail_urgency='R' then 'regular' when u.mail_urgency='U' then 'urgent' else 'very_urgent' end || ',' || u.mail_message 
		        else '' end as t_steps
		from
		    (
		    select
		    	if_no, on_no as no_,'on' as on_do, 'Statement' as type
		    	,stmt as stmt, code as code
		    	,'' as setvar_name, '' as setvar_value
		    	,'' as shout_destination, '' as shout_urgency, ''as shout_message
		    	,'' as forcej_sched_table, '' as forcej_job, '' as forcej_odate
		    	,'' as sysout_sysopt, '' as sysout_parm
		    	,'' as cond_condition, '' as cond_odate, '' as cond_sign
		    	,'' as mail_destination, '' as mail_cc_destination, '' as mail_subject_line, '' as mail_urgency, '' as mail_message
		    from def_on t1, def_job t2
		    where 1=1
		    and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id 
			and t2.job_name = #job_name#
		    
		    union all
		    select 
		    	if_no, do_no,'do', action
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from def_do t1, def_job t2
		    where 1=1
		    and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id 
			and t2.job_name = #job_name#
		    
		    union all
		    select 
		    	if_no, do_no,'do', 'Set-Var'
		    	,'', ''
		    	,name, value
		    	,'', '', ''
		    	,'', '', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from def_do_setvar t1, def_job t2
		    where 1=1
		    and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id 
			and t2.job_name = #job_name#
				
		    union all
		    select 
		    	if_no, do_no,'do', 'Shout'
		    	,'', ''
		    	,'', ''
		    	,destination, urgency, message
		    	,'', '', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from  def_do_shout t1, def_job t2
		    where 1=1
		    and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id 
			and t2.job_name = #job_name#
				
		    union all
		    select 
		    	if_no, do_no,'do', 'Force-Job'
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,sched_table, job, odate
		    	,'', ''
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from  def_do_forcej t1, def_job t2
		    where 1=1
		    and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id 
			and t2.job_name = #job_name#
				
			union all
		    select 
		    	t1.if_no, t1.do_no,'do', 'Sysout'
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', ''
		    	,t1.sysopt, t1.parm
		    	,'', '', ''
		    	,'', '', '', '', ''
		    from  def_do_sysout t1, def_job t2
		    where 1=1
		    and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id 
			and t2.job_name = #job_name#
				
			union all
		    select 
		    	if_no, do_no,'do', 'Condition'
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', ''
		    	,'', ''
		    	,condition, odate, sign
		    	,'', '', '', '', ''
		    from  def_do_cond t1, def_job t2
		    where 1=1
		    and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id 
			and t2.job_name = #job_name#
				
			union all
		    select 
		    	if_no, do_no,'do', 'Mail'
		    	,'', ''
		    	,'', ''
		    	,'', '', ''
		    	,'', '', ''
		    	,'', ''
		    	,'', '', ''
		    	,destination, cc_destination, subject_line, urgency, message
		    from  def_do_mail t1, def_job t2
		    where 1=1
		    and t1.table_id = t2.table_id
			and t1.job_id = t2.job_id 
			and t2.job_name = #job_name#
		    ) u
		where 1=1
		order by if_no, no_
	
	]]>
	</select>
	
	<select id="jobDefineInfoShout_new" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefineInfoShout_new */
	<![CDATA[
		select
		    case when t1.when_cond='OK' then 'ok'
		    			when t1.when_cond='NOTOK' then 'not_ok'
		    			when t1.when_cond='RERUN' then 'rerun'
		    			when t1.when_cond='LATESUB' then 'late_submission'
		    			when t1.when_cond='LATETIME' then 'late_time'
		    			when t1.when_cond='EXECTIME' then 'execution_time'
		    			else t1.when_cond end
		    || ',' || t1.shout_time 
		    || ',' || t1.destination 
		    || ',' || case when t1.urgency='R' then 'regular' when t1.urgency='U' then 'urgent' else 'very_urgent' end  || ',' || t1.message as t_postproc
		from def_shout t1, def_job t2
		where 1=1 
		and t1.table_id = t2.table_id
		and t1.job_id = t2.job_id 
		and t2.job_name = #job_name#
	]]>
	</select>
	
	
	
	<!-- spJobMemoPrc -->
	<parameterMap id="spJobMemoPrcMap" class="java.util.Map">
		<parameter property="r_code" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		<parameter property="r_msg" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		
		<parameter property="flag" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="data_center" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="job" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="seq" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="memo" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		
		<parameter property="s_user_cd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="s_user_ip" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
	</parameterMap>
	<procedure id="spJobMemoPrc" resultClass="java.util.List" parameterMap="spJobMemoPrcMap">
		{ call $SCHEMA$.SP_EZ_JOB_MEMO_PRC	( 	?, ?, ?, ?, ?, 
												?, ?, ?, ?
											) 
		}
	</procedure>
	
		<!-- jobGraphList_ez012 -->
	<select id="jobGraphList_ez012" resultClass="JobGraphBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobGraphList_ez012 */

			SELECT distinct
				a.JOB_NAME AS job_name
				, a.table_id, a.job_id
				, (CASE WHEN a.JOB_NAME = #job_name# then 'Click_Job' else 'Condition' END ) AS state_result 				
				, b.table_id AS ref_table_id, b.job_id AS ref_job_id
				, a.table_id||'/'||a.job_id AS order_id
       				, b.table_id||'/'||b.job_id AS ref_order_id
				, #job_name# AS self_job_name
			FROM DEF_JOB a, DEF_LNK$type1$_P b			
			where 1=1 
			AND a.table_id || '/' || a.job_id = #order_id#

			<isEqual property="type1" compareValue="O">
				AND sign != '-'
			</isEqual>

			and b.CONDITION IN ( 
							  	SELECT CONDITION			  	
							  	FROM DEF_JOB c, DEF_LNK$type2$_P d
							  	
							  	where 1=1
							 	AND c.table_id || '/' || c.job_id = #order_id#
		                        AND c.table_id = d.table_id
		                        AND c.job_id = d.job_id
					                        
					          	<isEqual property="type2" compareValue="O">
									AND sign != '-'
								</isEqual>
					                        
					                         ) 
			union all 
			select 
				distinct
				a.JOB_NAME AS job_name				
				, a.table_id, a.job_id	
				, (CASE WHEN a.JOB_NAME = #job_name# then 'Click_Job' else 'Condition' END ) AS state_result 				
				, CAST(NULL AS INTEGER) AS ref_table_id, CAST(NULL AS INTEGER) AS ref_job_id
				, a.table_id||'/'||a.job_id AS order_id
       				, NULL AS ref_order_id
				, #job_name# AS self_job_name
			from DEF_JOB a
			where 1=1 
			AND a.table_id || '/' || a.job_id = #order_id#
			and 1 > ( select count(*)
						from DEF_LNK$type1$_P s						
						where 1=1 
						AND s.table_id || '/' || s.job_id = #order_id#
												
						<isEqual property="type1" compareValue="O">
							AND sign != '-'
						</isEqual>
						
						and s.CONDITION IN ( 
										  	SELECT CONDITION								  	
										  	FROM DEF_JOB c, DEF_LNK$type2$_P d										  	
										  	where 1=1
										 	AND c.table_id || '/' || c.job_id = #order_id#											
											AND c.table_id = d.table_id
											AND c.job_id = d.job_id
											
											<isEqual property="type2" compareValue="O">
												AND sign != '-'
											</isEqual>
											
											 ) )
		
	</select>
	
	<select id="jobLogContentList" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobLogContentList */
		SELECT keystmp, 
			   keystmp || ' , ' || logdate || ' , ' || logtime || ' , ' || msgid || ' , ' || message AS cm_log     
		  FROM CMR_IOALOG
		 WHERE orderno = #order_36_id#::integer
		 ORDER BY keystmp		
	</select>
	
	<select id="approvalLineCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > approvalLineCnt */
		<![CDATA[
			SELECT COUNT(*) as total_count 
			  FROM $SCHEMA$.EZ_APPROVAL_LINE 
			 WHERE ins_user_cd = ( SELECT user_cd 
			 						 FROM $SCHEMA$.EZ_USER 
			 						WHERE user_id = #user_id#
			 						  AND del_yn = 'N' )
			 						  AND doc_gb = '01'			 						 
		]]>
	</select>
	
	<select id="historyDayCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > historyDayCnt */
		SELECT COUNT(*) AS ajax_value
		  FROM ( 
		        SELECT odate
		        FROM $SCHEMA$.EZ_HISTORY_001
		        GROUP BY odate ) tb1
	</select>
	
	<select id="aJobInfoHistoryBasic" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > aJobInfoHistoryBasic */
	<![CDATA[
		SELECT 	tb1.order_id, tb1.application, tb1.group_name, tb1.memname AS mem_name, tb1.mem_lib, tb1.owner, tb1.task_type, 
				tb1.job_name, tb1.max_wait, tb1.description, tb1.confirm_flag, tb1.from_time AS time_from,
				tb1.to_time AS time_until, tb1.priority, tb1.max_rerun AS rerun_max, tb1.cmd_line AS command, 
				tb1.critical, tb1.cyclic, SUBSTR(tb1.interval,1,5) AS rerun_interval, tb1.nodegroup AS node_id, tb1.order_table AS table_name,
				tb1.odate, tb1.cpu_id, tb1.cyclic_type, tb1.specific_times, tb1.appl_type, tb1.appl_form
		  FROM 	$SCHEMA$.EZ_HISTORY_$data_center_code$ tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
		 WHERE 	tb1.order_id = #order_id#
		   and  tb1.job_name = tb2.job
		   and	tb1.job_name = #job_name#
	]]>
	</select>
	
	<select id="aJobInfoBasic" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > aJobInfoBasic */
	<![CDATA[
		SELECT 	tb1.order_id, tb1.application, tb1.group_name, tb1.memname AS mem_name, tb1.mem_lib, tb1.owner, tb1.task_type, 
				tb1.job_name, tb1.max_wait, tb1.description, tb1.confirm_flag, tb1.from_time AS time_from,
				tb1.to_time AS time_until, tb1.priority, tb1.max_rerun AS rerun_max, tb1.cmd_line AS command, 
				tb1.critical, tb1.cyclic, SUBSTR(tb1.interval,1,5) AS rerun_interval, tb1.nodegroup AS node_id, tb1.order_table AS table_name,
				tb1.odate, tb1.cpu_id, tb1.cyclic_type, tb1.specific_times, tb1.appl_type, tb1.appl_form
		  FROM 	$active_net_name$JOB tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
		 WHERE 	tb1.order_id = #order_id#
		   and  tb1.job_name = tb2.job
		   and	tb1.job_name = #job_name#
	]]>
	</select>
	
	<select id="aJobInfoSetVar" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > aJobInfoSetVar */	
	<![CDATA[
		SELECT  REPLACE(name, '%', '') || ',' || coalesce(value,'') AS t_set
		  FROM 	$active_net_name$setvar tb1
		 WHERE 	tb1.order_id = #order_id#
		 ORDER BY tb1.order_
	]]>
	</select>
	
	<select id="aJobInfoConditionsIn" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > aJobInfoConditionsIn */	
	<![CDATA[
		SELECT  CASE WHEN tb1.and_or = 'A' THEN 'and' WHEN tb1.and_or = 'O' THEN 'or' ELSE tb1.and_or END AS in_conditions_opt,
				(case when tb1.parentheses = '(' then '(' else '' end)||tb1.condition || (case when tb1.parentheses = ')' then ')' else '' end) || ',' || tb1.odate || ',' || case when tb1.and_or = 'A' then 'and' when tb1.and_or = 'O' then 'or' else tb1.and_or end AS t_conditions_in
		  FROM 	$active_net_name$lnki_p tb1
		 WHERE 	tb1.order_id = #order_id#
	]]> 
	</select>
	
	<select id="aJobInfoConditionsOut" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > aJobInfoConditionsOut */
	<![CDATA[
		SELECT 	tb1.condition || ',' || tb1.odate || ',' || CASE WHEN tb1.sign='+' THEN 'add' WHEN tb1.sign='-' THEN 'delete' ELSE tb1.sign END AS t_conditions_out
		  FROM 	$active_net_name$lnko_p tb1
		 WHERE 	tb1.order_id = #order_id#
	
	]]>
	</select>
		
	<select id="aJobInfoHistorySetVar" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > aJobInfoHistorySetVar */	
	<![CDATA[
		SELECT  REPLACE(name, '%', '') || ',' || coalesce(value,'') AS t_set
		  FROM 	$SCHEMA$.EZ_HISTORY_setvar_$data_center_code$ tb1
		 WHERE 	tb1.order_id = #order_id#
		 ORDER BY tb1.order_
	]]>
	</select>
	
	<select id="aJobInfoHistoryConditionsIn" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > aJobInfoHistoryConditionsIn */	
	<![CDATA[
		SELECT  CASE WHEN tb1.and_or = 'A' THEN 'and' WHEN tb1.and_or = 'O' THEN 'or' ELSE tb1.and_or END AS in_conditions_opt, 
				tb1.condition || ',' || tb1.odate || ',' || CASE WHEN tb1.and_or = 'A' THEN 'and' WHEN tb1.and_or = 'O' THEN 'or' ELSE tb1.and_or END AS t_conditions_in
		  FROM 	$SCHEMA$.EZ_HISTORY_i_$data_center_code$ tb1
		 WHERE 	tb1.order_id = #order_id#
	]]> 
	</select>
	
	<select id="aJobInfoHistoryConditionsOut" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > aJobInfoHistoryConditionsOut */
	<![CDATA[
		SELECT 	tb1.condition || ',' || tb1.odate || ',' || CASE WHEN tb1.sign='+' THEN 'add' WHEN tb1.sign='-' THEN 'delete' ELSE tb1.sign END AS t_conditions_out
		  FROM 	$SCHEMA$.EZ_HISTORY_o_$data_center_code$ tb1
		 WHERE 	tb1.order_id = #order_id#
	
	]]>
	</select>
	
	<select id="totalJobBizList" resultClass="TotalJobStatus" parameterClass="java.util.Map">
	/* POSTGRE_M > totalJobBizList */
		
		<![CDATA[
						
		SELECT
			order_table, biz_gb
			,$SCHEMA$.NVL(SUM(CASE WHEN RESULT = 'SUCCESS' THEN 1 ELSE 0 END), 0) AS success
			,$SCHEMA$.NVL(SUM(CASE WHEN RESULT = 'FAIL' THEN 1 ELSE 0 END), 0) AS fail
			,$SCHEMA$.NVL(SUM(CASE WHEN RESULT = 'WAIT' THEN 1 ELSE 0 END), 0) AS wait
			,$SCHEMA$.NVL(SUM(CASE WHEN RESULT = 'RUNNING' THEN 1 ELSE 0 END), 0) AS running
			,COUNT(result) AS total_count
		FROM (
			SELECT order_table,
				   APPLICATION AS biz_gb
				,CASE
					WHEN status LIKE 'Wait%' THEN 'WAIT' 
					WHEN status = 'Executing' THEN 'RUNNING' 
					WHEN status = 'Ended OK' THEN 'SUCCESS' 
					WHEN status = 'Ended Not OK' THEN 'FAIL' 
					END AS result
			FROM
			( 
			select * from $SCHEMA$.EZ_HISTORY_001 where odate between REPLACE(SUBSTR(#odate_from#, 3, 8), '/', '') and REPLACE(SUBSTR(#odate_to#, 3, 8), '/', '') and ORDER_ID NOT IN (select order_id from $act_001$JOB  )
			union all
			select * from $act_001$JOB where odate between REPLACE(SUBSTR(#odate_from#, 3, 8), '/', '') and REPLACE(SUBSTR(#odate_to#, 3, 8), '/', '')
			) tb1
			WHERE 1=1
			AND DELETE_FLAG<>'1'
		]]>	
			
			) tb1
		GROUP BY order_table, biz_gb
		
	</select>
	
	<select id="jobOpListReport" resultClass="TotalJobStatus" parameterClass="java.util.Map">
	/* POSTGRE_M > jobOpListReport */		
		SELECT application, gubun, $SCHEMA$.NVL(total_count, 0) AS total_count, $SCHEMA$.NVL(ended_ok, 0) AS ended_ok, 
		       $SCHEMA$.NVL(ended_not_ok, 0) AS ended_not_ok, $SCHEMA$.NVL(executing, 0) AS executing, $SCHEMA$.NVL(wait, 0) AS wait
		  FROM (
		    SELECT 'SCHEDULE' AS gubun, application, SUM(total_count) AS total_count, SUM(ended_ok) AS ended_ok, 
		           SUM(ended_not_ok) AS ended_not_ok, SUM(executing) AS executing, SUM(wait) AS wait
		      FROM (
		            SELECT  tb2.application, tb1.total_count,
		                    tb1.ended_ok, tb1.ended_not_ok, tb1.executing, tb1.wait
		              FROM  (
		                    SELECT  application,
		                            SUM( CASE WHEN STATUS = 'dual'            THEN 0 ELSE 1 END) as total_count,
		                            SUM( CASE WHEN STATUS = 'Ended OK'        THEN 1 ELSE 0 END) as ended_ok,
		                            SUM( CASE WHEN STATUS = 'Ended Not OK'    THEN 1 ELSE 0 END) as ended_not_ok,
		                            SUM( CASE WHEN STATUS = 'Executing'       THEN 1 ELSE 0 END) as executing,
		                            SUM( CASE WHEN STATUS LIKE 'Wait %'
		                                        OR STATUS = 'Held'            THEN 1 ELSE 0 END) as wait
		                      FROM  $active_net_name$JOB
		                     WHERE  seq_cnt_added = 0
		                     	
		                  	<isNotEmpty property="p_s_odate">
								<![CDATA[
									AND  odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
								]]>
							</isNotEmpty>
							<isNotEmpty property="p_e_odate">
								<![CDATA[
									AND  odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
								]]>
							</isNotEmpty>

		                     GROUP  BY application ) tb1,
		                     ( SELECT application FROM $active_net_name$JOB 
		                        WHERE 1 = 1
		                        
		                        <isNotEmpty property="p_s_odate">
									<![CDATA[
										AND  odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>
								<isNotEmpty property="p_e_odate">
									<![CDATA[
										AND  odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>
		                         
		                        GROUP BY application ) tb2
		             WHERE tb2.application = tb1.application (+) 
		             
		            UNION ALL 
		            
		            SELECT  tb2.application, tb1.total_count,
		                    tb1.ended_ok, tb1.ended_not_ok, tb1.executing, tb1.wait
		              FROM  (
		                    SELECT  application,
		                            SUM( CASE WHEN STATUS = 'dual'            THEN 0 ELSE 1 END) as total_count,
		                            SUM( CASE WHEN STATUS = 'Ended OK'        THEN 1 ELSE 0 END) as ended_ok,
		                            SUM( CASE WHEN STATUS = 'Ended Not OK'    THEN 1 ELSE 0 END) as ended_not_ok,
		                            SUM( CASE WHEN STATUS = 'Executing'       THEN 1 ELSE 0 END) as executing,
		                            SUM( CASE WHEN STATUS LIKE 'Wait %'
		                                        OR STATUS = 'Held'            THEN 1 ELSE 0 END) as wait
		                      FROM  $SCHEMA$.EZ_HISTORY_$data_center_code$
		                     WHERE  seq_cnt_added = 0
		                     
		                  	<isNotEmpty property="p_s_search_odate">
								<![CDATA[
									AND  odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
								]]>
							</isNotEmpty>
							<isNotEmpty property="p_e_search_odate">
								<![CDATA[
									AND  odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
								]]>
							</isNotEmpty>
							
		                       AND  order_id NOT IN ( SELECT order_id FROM $active_net_name$JOB )
		                     GROUP  BY application ) tb1,
		                     ( SELECT application FROM $SCHEMA$.EZ_HISTORY_$data_center_code$		                        
		                        WHERE 1 = 1
		                        
		                      	<isNotEmpty property="p_s_search_odate">
									<![CDATA[
										AND  odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>
								<isNotEmpty property="p_e_search_odate">
									<![CDATA[
										AND  odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>
		                        
								GROUP BY application ) tb2
		             WHERE tb2.application = tb1.application (+) )
		     GROUP BY application
		     
		    UNION ALL 
		     
		    SELECT 'SUSI' AS gubun, application, SUM(total_count), SUM(ended_ok), 
		           SUM(ended_not_ok), SUM(executing), SUM(wait)
		      FROM (
		            SELECT  tb2.application, tb1.total_count,
		                    tb1.ended_ok, tb1.ended_not_ok, tb1.executing, tb1.wait
		              FROM  (
		                    SELECT  application,
		                            SUM( CASE WHEN STATUS = 'dual'            THEN 0 ELSE 1 END) as total_count,
		                            SUM( CASE WHEN STATUS = 'Ended OK'        THEN 1 ELSE 0 END) as ended_ok,
		                            SUM( CASE WHEN STATUS = 'Ended Not OK'    THEN 1 ELSE 0 END) as ended_not_ok,
		                            SUM( CASE WHEN STATUS = 'Executing'       THEN 1 ELSE 0 END) as executing,
		                            SUM( CASE WHEN STATUS LIKE 'Wait %'
		                                        OR STATUS = 'Held'            THEN 1 ELSE 0 END) as wait
		                      FROM  $active_net_name$JOB
		                     WHERE  seq_cnt_added > 0
		                       
							<isNotEmpty property="p_s_search_odate">
								<![CDATA[
									AND  odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
								]]>
							</isNotEmpty>
							<isNotEmpty property="p_e_search_odate">
								<![CDATA[
									AND  odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
								]]>
							</isNotEmpty>

		                     GROUP  BY application ) tb1,
		                     ( SELECT application FROM $active_net_name$JOB 
		                        WHERE 1 = 1
		                        
		                      	<isNotEmpty property="p_s_search_odate">
									<![CDATA[
										AND  odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>
								<isNotEmpty property="p_e_search_odate">
									<![CDATA[
										AND  odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>
								
								 GROUP BY application ) tb2
		             WHERE tb2.application = tb1.application (+) 
		             
		            UNION ALL 
		            
		            SELECT  tb2.application, tb1.total_count,
		                    tb1.ended_ok, tb1.ended_not_ok, tb1.executing, tb1.wait
		              FROM  (
		                    SELECT  application,
		                            SUM( CASE WHEN STATUS = 'dual'            THEN 0 ELSE 1 END) as total_count,
		                            SUM( CASE WHEN STATUS = 'Ended OK'        THEN 1 ELSE 0 END) as ended_ok,
		                            SUM( CASE WHEN STATUS = 'Ended Not OK'    THEN 1 ELSE 0 END) as ended_not_ok,
		                            SUM( CASE WHEN STATUS = 'Executing'       THEN 1 ELSE 0 END) as executing,
		                            SUM( CASE WHEN STATUS LIKE 'Wait %'
		                                        OR STATUS = 'Held'            THEN 1 ELSE 0 END) as wait
		                      FROM  $SCHEMA$.EZ_HISTORY_$data_center_code$
		                     WHERE  seq_cnt_added > 0
		                       
								<isNotEmpty property="p_s_search_odate">
									<![CDATA[
										AND  odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>
								<isNotEmpty property="p_e_search_odate">
									<![CDATA[
										AND  odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>

		                       AND  order_id NOT IN ( SELECT order_id FROM $active_net_name$JOB )
		                     GROUP  BY application ) tb1,
		                     ( SELECT application FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ 
		                        WHERE 1 = 1
		                        
		                      	<isNotEmpty property="p_s_search_odate">
									<![CDATA[
										AND  odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>
								<isNotEmpty property="p_e_search_odate">
									<![CDATA[
										AND  odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
									]]>
								</isNotEmpty>
								
								 GROUP BY application ) tb2
		             WHERE tb2.application = tb1.application (+) )
		     GROUP BY application
		     
		     ORDER BY application, gubun )		
	</select>
	
	<!-- jobOpReportList -->
	<sql id="jobOpReportListInc">
	/* POSTGRE_M > jobOpReportListInc */
				
		<isNotEmpty property="p_s_search_odate">
			<![CDATA[
				AND a.odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
			]]>
		</isNotEmpty>
		<isNotEmpty property="p_e_search_odate">
			<![CDATA[
				AND a.odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
			]]>
		</isNotEmpty>
		
		) AS tb1
		where 1=1
		
		
		<isEqual property="job_gubun" compareValue="SYSTEM">
			AND user_daily = 'SYSTEM' AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>	
		<isEqual property="job_gubun" compareValue="">
			AND user_daily IS NULL AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>
		<isEqual property="job_gubun" compareValue="BEGIN">
			AND (days_cal = 'M_FBiz' OR days_cal = 'M_FBiz-1' OR days_cal = 'M_FSys') AND job_name LIKE 'CBS%'
		</isEqual>
		<isEqual property="job_gubun" compareValue="END">
			AND (days_cal = 'M_LBiz' OR days_cal = 'M_LSys-1') AND job_name LIKE 'CBS%'
		</isEqual>
		<isEqual property="job_gubun" compareValue="SYSTEM_BEGIN_END">
			AND user_daily IS NULL
		</isEqual>
		
		<isEqual property="job_gubun2" compareValue="EDW">
			AND order_table LIKE '%EDW%' AND order_table NOT LIKE 'ALM%' AND order_table NOT LIKE 'RBA%' AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>	
		<isEqual property="job_gubun2" compareValue="">
			AND job_name LIKE 'CBS%' AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>
		<isEqual property="job_gubun2" compareValue="BEGIN">
			AND (days_cal = 'M_FBiz' OR days_cal = 'M_FBiz-1' OR days_cal = 'M_FSys') AND order_table LIKE '%EDW%' AND order_table NOT LIKE 'ALM%' AND order_table NOT LIKE 'RBA%'
		</isEqual>
		<isEqual property="job_gubun2" compareValue="END">
			AND (days_cal = 'M_LBiz' OR days_cal = 'M_LSys-1') AND order_table LIKE '%EDW%' AND order_table NOT LIKE 'ALM%' AND order_table NOT LIKE 'RBA%'
		</isEqual>
		<isEqual property="job_gubun2" compareValue="EDW_BEGIN_END">
			AND job_name LIKE 'CBS%'
		</isEqual>
		
		<isEqual property="job_gubun2" compareValue="IFRS">
			AND order_table LIKE 'IFRS%' AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>	
		<isEqual property="job_gubun2" compareValue="BEGIN_IFRS">
			AND (days_cal = 'M_FBiz' OR days_cal = 'M_FBiz-1' OR days_cal = 'M_FSys') AND order_table LIKE 'IFRS%'
		</isEqual>
		<isEqual property="job_gubun2" compareValue="END_IFRS">
			AND (days_cal = 'M_LBiz' OR days_cal = 'M_LSys-1') AND order_table LIKE 'IFRS%'
		</isEqual>
		
		<isEqual property="job_gubun2" compareValue="AIS">
			AND order_table LIKE 'AIS%' AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>	
		<isEqual property="job_gubun2" compareValue="BEGIN_AIS">
			AND (days_cal = 'M_FBiz' OR days_cal = 'M_FBiz-1' OR days_cal = 'M_FSys') AND order_table LIKE 'AIS%'
		</isEqual>
		<isEqual property="job_gubun2" compareValue="END_AIS">
			AND (days_cal = 'M_LBiz' OR days_cal = 'M_LSys-1') AND order_table LIKE 'AIS%'
		</isEqual>
		
		<isEqual property="job_gubun2" compareValue="ALM">
			AND order_table LIKE 'ALM%' AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>	
		<isEqual property="job_gubun2" compareValue="BEGIN_ALM">
			AND (days_cal = 'M_FBiz' OR days_cal = 'M_FBiz-1' OR days_cal = 'M_FSys') AND order_table LIKE 'ALM%'
		</isEqual>
		<isEqual property="job_gubun2" compareValue="END_ALM">
			AND (days_cal = 'M_LBiz' OR days_cal = 'M_LSys-1') AND order_table LIKE 'ALM%'
		</isEqual>
		
		<isEqual property="job_gubun2" compareValue="NEW_RDM">
			AND order_table LIKE 'NEW_RDM%' AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>	
		<isEqual property="job_gubun2" compareValue="BEGIN_NEW_RDM">
			AND (days_cal = 'M_FBiz' OR days_cal = 'M_FBiz-1' OR days_cal = 'M_FSys') AND order_table LIKE 'NEW_RDM%'
		</isEqual>
		<isEqual property="job_gubun2" compareValue="END_NEW_RDM">
			AND (days_cal = 'M_LBiz' OR days_cal = 'M_LSys-1') AND order_table LIKE 'NEW_RDM%'
		</isEqual>
		
		<isEqual property="job_gubun2" compareValue="RBA">
			AND order_table LIKE 'RBA%' AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>	
		<isEqual property="job_gubun2" compareValue="BEGIN_RBA">
			AND (days_cal = 'M_FBiz' OR days_cal = 'M_FBiz-1' OR days_cal = 'M_FSys') AND order_table LIKE 'RBA%'
		</isEqual>
		<isEqual property="job_gubun2" compareValue="END_RBA">
			AND (days_cal = 'M_LBiz' OR days_cal = 'M_LSys-1') AND order_table LIKE 'RBA%'
		</isEqual>
		
		<isEqual property="job_gubun2" compareValue="CRS">
			AND order_table LIKE 'CRS%' AND (days_cal != 'M_FBiz' AND days_cal != 'M_FBiz-1' AND days_cal != 'M_FSys' AND days_cal != 'M_LBiz' AND days_cal != 'M_LSys')
		</isEqual>	
		<isEqual property="job_gubun2" compareValue="BEGIN_CRS">
			AND (days_cal = 'M_FBiz' OR days_cal = 'M_FBiz-1' OR days_cal = 'M_FSys') AND order_table LIKE 'CRS%'
		</isEqual>
		<isEqual property="job_gubun2" compareValue="END_CRS">
			AND (days_cal = 'M_LBiz' OR days_cal = 'M_LSys-1') AND order_table LIKE 'CRS%'
		</isEqual>
		
		
	</sql>
	
	<select id="jobOpReportList" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobOpReportList */
		SELECT * FROM(
			SELECT TTT.* FROM (
  			
  			select * from(
  			
  				select * from(
	  				SELECT 
	  						TEXT '1' AS active_gb
	  						,A.odate
	  						,A.start_time
				      		,A.end_time
				      		,A.rerun_counter
				      		,A.order_table
				      		,A.application
				      		,A.group_name
				      		,trim(A.job_name) AS job_name
				      		,trim(A.memname) AS memname
				      		,case WHEN A.DELETE_FLAG='1' THEN 'Deleted'
				               	  WHEN  RTRIM(A.STATE) like 'Held%' THEN 'Held'
				               	  WHEN 	A.STATUS='Wait Condition' 
							AND A.from_time != ' ' 
							AND (CASE WHEN 	from_time::bigint > 0000 
									AND from_time::bigint <![CDATA[<]]> 0500 THEN (odate || from_time)::bigint + 2400 
								  ELSE 	(odate || from_time)::bigint END
							     ) > (SELECT TO_CHAR(CURRENT_TIMESTAMP, 'yymmddhh24mi')::bigint) THEN 'Wait Time' 
				               	  ELSE A.STATUS END AS state_result
				          ,trim(A.STATUS) AS status
				          ,A.description
				          ,( SELECT MAX(user_daily) FROM DEF_JOB tb1, DEF_TABLES tb2 
				          	  WHERE tb1.table_id = tb2.table_id 
				          	    AND tb2.data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
														THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
												 	   ELSE #data_center# END ) 
				          	    AND tb1.parent_table = A.order_table 
				          	    AND tb1.job_name = A.job_name ) AS user_daily
				         ,( SELECT MAX(days_cal) FROM DEF_JOB tb1, DEF_TABLES tb2 
				          	  WHERE tb1.table_id = tb2.table_id 
				          	    AND tb2.data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
														THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
												 	   ELSE #data_center# END )
				          	    AND tb1.parent_table = A.order_table 
				          	    AND tb1.job_name = A.job_name ) AS days_cal
				    FROM $active_net_name$JOB A LEFT OUTER JOIN (select * from $SCHEMA$.EZ_JOB_MAPPER  where data_center=#data_center#) B 
				      ON (case when trim(a.job_name) is not null then  a.job_name else a.memname end) = B.JOB				   
				   WHERE 1 = 1 
				    
				<include refid="jobOpReportListInc" />				
				
  				union all
  				
				select * from(	
					SELECT 
							TEXT '0' AS active_gb
							,A.odate
							,A.start_time
				      		,A.end_time
				      		,A.rerun_counter
				      		,A.order_table
				      		,A.application
				      		,A.group_name
				      		,trim(A.job_name) AS job_name
				      		,trim(A.memname) AS memname
				      		,case WHEN A.DELETE_FLAG='1' THEN 'Deleted'
				               	  WHEN  RTRIM(A.STATE) like 'Held%' THEN 'Held'
				               	  WHEN 	A.STATUS='Wait Condition' 
							AND A.from_time != ' ' 
							AND (CASE WHEN 	from_time::bigint > 0000 
									AND from_time::bigint <![CDATA[<]]> 0500 THEN (odate || from_time)::bigint + 2400 
								  ELSE 	(odate || from_time)::bigint END
							     ) > (SELECT TO_CHAR(CURRENT_TIMESTAMP, 'yymmddhh24mi')::bigint) THEN 'Wait Time' 
				               	  ELSE A.STATUS END AS state_result
				          ,trim(A.STATUS) AS status
						  ,A.description
						  ,( SELECT MAX(user_daily) FROM DEF_JOB tb1, DEF_TABLES tb2 
				          	  WHERE tb1.table_id = tb2.table_id 
				          	    AND tb2.data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
														THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
												 	   ELSE #data_center# END ) 
				          	    AND tb1.parent_table = A.order_table 
				          	    AND tb1.job_name = A.job_name ) AS user_daily
				         ,( SELECT MAX(days_cal) FROM DEF_JOB tb1, DEF_TABLES tb2 
				          	  WHERE tb1.table_id = tb2.table_id 
				          	    AND tb2.data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
														THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
												 	   ELSE #data_center# END ) 
				          	    AND tb1.parent_table = A.order_table 
				          	    AND tb1.job_name = A.job_name ) AS days_cal
				    FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ A LEFT OUTER JOIN (select * from $SCHEMA$.EZ_JOB_MAPPER  where data_center=#data_center#) B 
				      ON (case when trim(a.job_name) is not null then  a.job_name else a.memname end) = B.JOB
				   WHERE 1 = 1
					AND a.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)
					
				    <include refid="jobOpReportListInc" />
				
			) AS tb1
						
				ORDER BY odate, start_time, job_name
			
			)TTT
			
		) AS tb1
		
        WHERE 1 = 1
        
	</select>
	
	<!-- jobCondList -->
	<sql id="jobCondListInc">
	/* POSTGRE_M > jobCondListInc */
			FROM 	PUBLIC.CMR_CONTAB a
			WHERE 	1 = 1

			<isNotEmpty property="p_s_cond_date">
				AND SUBSTR(a.conddate, 5, 8) >= #p_s_cond_date#
			</isNotEmpty>
			<isNotEmpty property="p_e_cond_date">
				AND SUBSTR(a.conddate, 5, 8) <![CDATA[ <= ]]> #p_e_cond_date#
			</isNotEmpty>			
			
			<isNotEmpty property="p_s_cond_name">
				AND a.condname LIKE ''||#p_s_cond_name#||'%'
			</isNotEmpty>
						
	</sql>
	
	<select id="jobCondList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobCondList */
			SELECT * FROM(
				SELECT TTT.* FROM (
					SELECT condname, conddate
					<include refid="jobCondListInc" />
		
					ORDER BY condname, conddate
				) TTT
			) tb1
		
	</select>
	
	<select id="jobCondHistoryList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobCondHistoryList */
			SELECT 
				condition_name as condname
				,odate as conddate
				,to_char(ins_date, 'YYYY/MM/DD HH24:MI:SS') as ins_date
				,(SELECT user_nm FROM $SCHEMA$.ez_user WHERE user_cd = t1.ins_user_cd) as user_nm
				,(SELECT user_id FROM $SCHEMA$.ez_user WHERE user_cd = t1.ins_user_cd) as user_id
			FROM $SCHEMA$.ez_cond_history t1
			WHERE 1=1
			AND gubun = 'DEL'
			<isNotEmpty property="p_search_text">
				AND COND_NAME LIKE '%'||#p_search_text#||'%'
			</isNotEmpty>
			<isNotEmpty property="p_search_s_date">
				AND  to_char(ins_date, 'yyyymmdd') >= #p_search_s_date#
			</isNotEmpty>
			<isNotEmpty property="p_search_e_date">
					AND  to_char(ins_date, 'yyyymmdd') <![CDATA[ <= ]]> #p_search_e_date#
			</isNotEmpty>
			ORDER BY ins_date DESC
	</select>
	
	<select id="inCondJobList" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > inCondJobList */
			SELECT job_name, status
			  FROM $active_net_name$JOB 
			 WHERE order_id IN ( SELECT order_id FROM $active_net_name$LNKI_P WHERE condition = #cond_name# AND odate = #cond_date# )			
	</select>
	
	<select id="defInCondJobList" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > defInCondJobList */
			SELECT tb2.job_name AS out_cond_name,
				   tb2.table_id, tb2.job_id 
			  FROM DEF_LNKO_P tb1, DEF_JOB tb2, DEF_TABLES tb3
			 WHERE condition IN ( SELECT condition FROM DEF_LNKI_P WHERE table_id = $table_id$ AND job_id = $job_id$ )
			   AND tb1.table_id = tb2.table_id
			   AND tb1.job_id = tb2.job_id
			   AND tb2.table_id = tb3.table_id
			   <!-- AND tb3.data_center = ( SELECT data_center FROM DEF_TABLES WHERE table_id = $table_id$ ) -->
			 ORDER BY tb2.job_name
	</select>
	
	<select id="defOutCondJobList" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > defOutCondJobList */
			SELECT tb2.job_name AS out_cond_name,
				   tb2.table_id, tb2.job_id 
			  FROM DEF_LNKI_P tb1, DEF_JOB tb2, DEF_TABLES tb3
			 WHERE condition IN ( SELECT condition FROM DEF_LNKO_P WHERE table_id = $table_id$ AND job_id = $job_id$ )
			   AND tb1.table_id = tb2.table_id
			   AND tb1.job_id = tb2.job_id
			   AND tb2.table_id = tb3.table_id
			   <!-- AND tb3.data_center = ( SELECT data_center FROM DEF_TABLES WHERE table_id = $table_id$ ) -->
			 ORDER BY tb2.job_name			
	</select>
	
	<select id="jobAvgInfoList" resultClass="ActiveJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobAvgInfoList */
		SELECT * 
		  FROM (
				SELECT tb1.*,
					   ( SELECT 
						      CEIL(AVG(
						      	extract(epoch from (
						      	TO_TIMESTAMP(end_time, 'yyyymmddhh24miss') - TO_TIMESTAMP(start_time, 'yyyymmddhh24miss')
						      	))
						      )) AS avg_run_time
				           FROM $SCHEMA$.EZ_AVG_INFO t
				          WHERE start_time != ' '
				            AND end_time != ' '
				            AND t.data_center = tb1.data_center
				            AND t.job_name = tb1.job_name 
				            AND t.order_table = tb1.order_table
				            AND t.application = tb1.application
				            AND t.group_name = tb1.group_name ) AS avg_run_time,
				       CEIL(CEIL((TO_DATE(end_time, 'YYYYMMDDHH24MISS') - TO_DATE(start_time, 'YYYYMMDDHH24MISS')) * 24 * 60 * 60)) AS run_time
				  FROM $SCHEMA$.EZ_AVG_INFO tb1, 
				       ( SELECT job_name, order_table, application, group_name FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ WHERE order_id = #order_id#
				         UNION ALL 
				         SELECT job_name, order_table, application, group_name FROM $active_net_name$JOB WHERE order_id = #order_id# ) tb2         
				 WHERE tb1.job_name = tb2.job_name
				   AND tb1.order_table = tb2.order_table
				   AND tb1.application = tb2.application
				   AND tb1.group_name = tb2.group_name
				   AND tb1.start_time != ' '
				   AND tb1.end_time != ' '
				   
				 	<isNotEmpty property="search_odate">
						AND tb1.odate = REPLACE(SUBSTR(#search_odate#, 3, 8), '/', '')
					</isNotEmpty>
					
				 ORDER BY start_time DESC, end_time DESC ) tb1
   		  WHERE 1 = 1
			
		<isNotEmpty property="search_time">
       		AND run_time - avg_run_time >= $search_time$           		
		</isNotEmpty>
		   
		 
	</select>
	
	<select id="jobGroupListCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobGroupListCnt */		
				SELECT count(*) as total_count
				  FROM (  
						SELECT tb1.JOBGROUP_ID, tb1.JOBGROUP_NAME, 
							   ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.INS_USER_CD ) AS INS_USER_NM, 
							   ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.UDT_USER_CD ) AS UDT_USER_NM,
							   TO_CHAR(tb1.INS_DATE, 'YYYY-MM-DD') AS INS_DATE,
							   TO_CHAR(tb1.UDT_DATE, 'YYYY-MM-DD') AS UDT_DATE,
							   tb1.CONTENT			   
						  FROM $SCHEMA$.EZ_JOBGROUP tb1
						 WHERE tb1.JOBGROUP_ID IS NOT NULL
						 
						<isNotEmpty prepend="and" property="jobgroup_name">
							tb1.JOBGROUP_NAME LIKE '%'||#jobgroup_name#||'%'
						</isNotEmpty>
						 	
					   ) TTT				
	</select>
	
	<select id="jobGroupList" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobGroupList */	
		SELECT * 
		  FROM (
				SELECT TTT.* 
				  FROM (  
						SELECT tb1.jobgroup_id, tb1.jobgroup_name, tb1.content, $SCHEMA$.NVL(tb2.success, 0) AS success, $SCHEMA$.NVL(tb2.fail, 0) AS fail,
						       $SCHEMA$.NVL(tb2.wait, 0) AS wait, $SCHEMA$.NVL(tb2.running, 0) AS running, $SCHEMA$.NVL(tb2.total_count, 0) AS total_count
						  FROM $SCHEMA$.EZ_JOBGROUP tb1,
						       (
						        SELECT
						            jobgroup_id
						            ,$SCHEMA$.NVL(SUM(CASE WHEN RESULT = 'SUCCESS' THEN 1 ELSE 0 END), 0) AS success
						            ,$SCHEMA$.NVL(SUM(CASE WHEN RESULT = 'FAIL' THEN 1 ELSE 0 END), 0) AS fail
						            ,$SCHEMA$.NVL(SUM(CASE WHEN RESULT = 'WAIT' THEN 1 ELSE 0 END), 0) AS wait
						            ,$SCHEMA$.NVL(SUM(CASE WHEN RESULT = 'RUNNING' THEN 1 ELSE 0 END), 0) AS running
						            ,COUNT(result) AS total_count
						        FROM (
						            SELECT jobgroup_id
						                ,CASE
						                    WHEN status LIKE 'Wait%' THEN 'WAIT'
						                    WHEN status = 'Executing' THEN 'RUNNING'
						                    WHEN status = 'Ended OK' THEN 'SUCCESS'
						                    WHEN status = 'Ended Not OK' THEN 'FAIL'
						                    END AS result
						            FROM
						            (
						            
						            <iterate property="data_center_items" conjunction=" UNION ALL ">
						            
							            select tb1.*, tb2.jobgroup_id
							              from $SCHEMA$.EZ_HISTORY_$data_center_items[].data_center_code$ tb1, $SCHEMA$.EZ_JOBGROUP_JOB tb2
							             where odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
							               and ORDER_ID NOT IN (select order_id from $data_center_items[].active_net_name$JOB  )
							               AND tb1.job_name = tb2.job_name
							               AND tb2.data_center = '$data_center_items[].data_center$'
							               
							            union all
							
							            select tb1.*, tb2.jobgroup_id
							              from $data_center_items[].active_net_name$JOB tb1, $SCHEMA$.EZ_JOBGROUP_JOB tb2
							             where odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
							               AND tb1.job_name = tb2.job_name
							               AND tb2.data_center = '$data_center_items[].data_center$'
						               
						         	</iterate>
						               
						            ) tb1
						            WHERE 1=1
						            AND DELETE_FLAG <![CDATA[ <> ]]> '1'
						            
						            ) tb1
						        GROUP BY jobgroup_id ) tb2
						 WHERE tb1.jobgroup_id = tb2.jobgroup_id (+)
						 ORDER BY jobgroup_id ) TTT
				) tb1
		
		<isNotEmpty property="startRowNum">
			OFFSET #startRowNum# - 1 LIMIT #endRowNum# - #startRowNum# + 1
		</isNotEmpty>
		
	</select>
	
	<select id="jobGroupInfoList" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobGroupInfoList */	
		SELECT order_id
		  FROM (						            
	            <iterate property="data_center_items" conjunction=" UNION ALL ">
	            
		            select tb1.order_id, tb1.delete_flag
		              from $SCHEMA$.EZ_HISTORY_$data_center_items[].data_center_code$ tb1, $SCHEMA$.EZ_JOBGROUP_JOB tb2
		             where odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		               and ORDER_ID NOT IN (select order_id from $data_center_items[].active_net_name$JOB  )
		               AND tb1.job_name = tb2.job_name
		               AND tb2.data_center = '$data_center_items[].data_center$'
		               AND tb2.jobgroup_id = #jobgroup_id#
		               
		            union all
		
		            select tb1.order_id, tb1.delete_flag
		              from $data_center_items[].active_net_name$JOB tb1, $SCHEMA$.EZ_JOBGROUP_JOB tb2
		             where odate = REPLACE(SUBSTR(#odate#, 3, 8), '/', '')
		               AND tb1.job_name = tb2.job_name
		               AND tb2.data_center = '$data_center_items[].data_center$'
		               AND tb2.jobgroup_id = #jobgroup_id#
	               
	         	</iterate>	               
				) tb1
		  WHERE 1=1
		    AND delete_flag <![CDATA[ <> ]]> '1'
		  ORDER BY order_id		
	</select>
	
	<select id="jobDefInfo" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobDefInfo */	
		SELECT tb1.table_id, tb1.job_id 
		  FROM DEF_JOB tb1, DEF_TABLES tb2 
		 WHERE tb1.table_id = tb2.table_id
		   AND tb2.data_center = #data_center#
		   AND tb1.job_name = #s_job_name#		
	</select>
	
	<select id="m_status_hisList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > m_status_hisList */	
		SELECT job_name FROM $SCHEMA$.EZ_HISTORY_001
		WHERE STATUS like '%'||#strResult#||'%'
		AND ODATE = #odate#
		<isNotEmpty property="group_name">
		-- 일총괄표
		AND group_name = #group_name#
		</isNotEmpty>
		
	</select>
	
	<select id="jobapprovalInfo" parameterClass="java.util.Map" resultClass="JobBasicInfo">
	/* POSTGRE_M > jobapprovalInfo */
	
		select 
		 seq,
		 (select user_nm from $SCHEMA$.ez_user where user_cd = t1.user_cd) as user_nm,
		 (select dept_nm from $SCHEMA$.ez_user where user_cd = t1.user_cd) as dept_nm,
		 (select duty_nm from $SCHEMA$.ez_user where user_cd = t1.user_cd) as duty_nm,
		 approval_comment,
		 approval_cd,
		 approval_date,
		 t2.content as content,
		 t1.doc_cd,
		 '수정요청서' as doc_gb
		from $SCHEMA$.ez_approval_doc t1, $SCHEMA$.ez_doc_04 t2
		where 1 = 1
		and t1.doc_cd = t2.doc_cd
		and t1.approval_cd = '02'
		and t2.job_name = #job_name#
		and t2.data_center = #data_center#	


		union all select 
				
		 seq,
		 (select user_nm from $SCHEMA$.ez_user where user_cd = t1.user_cd) as user_nm,
		 (select dept_nm from $SCHEMA$.ez_user where user_cd = t1.user_cd) as dept_nm,
		 (select duty_nm from $SCHEMA$.ez_user where user_cd = t1.user_cd) as duty_nm,
		 approval_comment,
		 approval_cd,
		 approval_date,
		 t2.content as content,
		 t1.doc_cd,
		 '등록요청서' as doc_gb
		from $SCHEMA$.ez_approval_doc t1, $SCHEMA$.ez_doc_01 t2
		where 1 = 1
		and t1.doc_cd = t2.doc_cd
		and t1.approval_cd = '02'
		and t2.job_name = #job_name#
		and t2.data_center = #data_center#	
		order by approval_date desc	
	
	</select>
	
		
	<select id="jobBasicInfo" parameterClass="java.util.Map" resultClass="JobBasicInfo">
	/* POSTGRE_M > jobBasicInfo */
		select
				b.title
			, 	(select user_nm from $SCHEMA$.ez_user where user_cd = a.user_cd_1 ) as user_nm_1
			, 	(select user_nm from $SCHEMA$.ez_user where user_cd = a.user_cd_2 ) as user_nm_2
			, 	(select user_nm from $SCHEMA$.ez_user where user_cd = a.user_cd_3 ) as user_nm_3
			, 	(select user_nm from $SCHEMA$.ez_user where user_cd = a.user_cd_4 ) as user_nm_4
			, 	user_cd_1
			, 	user_cd_2
			, 	user_cd_3
			, 	user_cd_4
			, 	a.sms_1
			, 	a.sms_2
			, 	a.sms_3
			, 	a.sms_4
			, 	a.mail_1
			, 	a.mail_2
			, 	a.mail_3
			, 	a.mail_4
			, 	a.data_center
			, 	b.content
			, 	a.late_sub
			, 	a.late_time
			, 	a.late_exec
			, 	a.job as job_name
			, 	(select description from def_job where job_name = a.job) as description
		from 	$SCHEMA$.EZ_JOB_MAPPER  a, $SCHEMA$.ez_doc_01 b, $SCHEMA$.ez_doc_master c
		where 	a.job 			= b.job_name
		and 	b.doc_cd 		= c.doc_cd
		and 	a.job 			= #job_name#
		and 	a.data_center 	= #data_center#
	</select>
		
		
	<select id="relationList" parameterClass="java.util.Map" resultClass="RelTableBean">
	/* POSTGRE_M > relationList */
		SELECT
				relation_cd
			,	db_name
			,	user_name
			,	table_name
		FROM 	$SCHEMA$.ez_relation
		<dynamic prepend="WHERE">
			<isNotEmpty property="db_name" prepend="AND">
				db_name = #db_name#
			</isNotEmpty>
			<isNotEmpty property="user_name" prepend="AND">
				user_name = #user_name#
			</isNotEmpty>
			<isNotEmpty property="table_name" prepend="AND">
				table_name = #table_name#
			</isNotEmpty>
		</dynamic>
	</select>
	
	<select id="relationJobList" parameterClass="java.util.Map" resultClass="RelTableBean">
	/* POSTGRE_M > relationJobList */
		SELECT
				a.relation_job_cd
			,	a.data_center
			,	a.table_name
			,	a.job_name
			,	a.relation_cd
			,	b.table_name as relation_table
			
		FROM 	$SCHEMA$.ez_relation_job a, $SCHEMA$.ez_relation b
		WHERE 	a.relation_cd 	= b.relation_cd
		AND		a.data_center	= #data_center#
		AND 	a.table_name 	= #table_name#
		AND 	a.job_name 		= #job_name#
	</select>
	
	<parameterMap id="relationJobPrcMap" class="java.util.Map">
			<parameter property="r_code" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
			<parameter property="r_msg" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
			
			<parameter property="flag" 					javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
			<parameter property="relation_job_cd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
			<parameter property="data_center" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
			<parameter property="table_name" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
			<parameter property="job_name" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
			<parameter property="relation_cd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
								
	</parameterMap>
	<procedure id="relationJobPrc" resultClass="java.util.List" parameterMap="relationJobPrcMap">
		{ call $SCHEMA$.SP_EZ_RELATION_JOB (?, ?, ?, ?, ?, ?, ?, ?)}
	</procedure>
	
	<select id="relForecastTableList" resultClass="PreDateBatchScheduleBean" parameterClass="java.util.Map">
	/* POSTGRE_M > relForecastTableList */
		select
	       t.hh order_hour
	        , t.jobname
	        , t.odate
	        , t.table_id
	        , t.job_id
            , listagg(f.table_name,',') rel_table within group (order by f.table_name)
	
		from (
		    SELECT
		        distinct
		        d.data_center
		        , D.sched_table
		        , A.job_name
		        , substr(c.from_time, 1,2) hh
		        , c.from_time
		        , a.odate
		        , c.table_id
		        , c.job_id
		    FROM $SCHEMA$.EZ_CMR_RPLN A LEFT OUTER JOIN (select * from $SCHEMA$.EZ_JOB_MAPPER  where data_center=#data_center#) B
		    ON A.JOB_NAME = B.JOB
		    join DEF_JOB C
		    on A.JOBNAME = C.JOB_NAME
		    join DEF_TABLES D
		    on C.table_id = D.table_id and d.data_center = #data_center#
		    where a.odate = REPLACE(#s_odate#, '/', '')
		    <isNotEmpty prepend="and" property="sched_table">
				D.sched_table = #sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="application_of_def">
				C.application = #application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="group_name_of_def">
				C.group_name = #group_name_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="job_name">
				C.JOB_NAME = #job_name#
			</isNotEmpty>
		    ) t
		LEFT OUTER JOIN $SCHEMA$.EZ_RELATION_JOB e
		on t.data_center = e.data_center and t.sched_table = e.table_name and e.job_name = t.jobname
		LEFT OUTER JOIN $SCHEMA$.EZ_RELATION f
		on e.relation_cd = f.relation_cd
		group by t.hh
	        , t.jobname
	        , t.odate
	        , t.table_id
	        , t.job_id
		ORDER BY (CASE SUBSTR(t.hh, 0, 2)
		                        WHEN '12' THEN 2
		                        WHEN '13' THEN 3
		                        WHEN '14' THEN 4
		                        WHEN '15' THEN 5
		                        WHEN '16' THEN 6
		                        WHEN '17' THEN 7
		                        WHEN '18' THEN 8
		                        WHEN '19' THEN 9
		                        WHEN '20' THEN 10
		                        WHEN '21' THEN 11
		                        WHEN '22' THEN 12
		                        WHEN '23' THEN 13
		                        WHEN '00' THEN 14
		                        WHEN '01' THEN 15
		                        WHEN '02' THEN 16
		                        WHEN '03' THEN 17
		                        WHEN '04' THEN 18
		                        WHEN '05' THEN 19
		                        WHEN '06' THEN 20
		                        WHEN '07' THEN 21
		                        WHEN '08' THEN 22
		                        WHEN '09' THEN 23
		                        WHEN '10' THEN 24
		                        WHEN '11' THEN 25
		                        ELSE 99
		                END)
	</select>
	
	
	<select id="outCondList" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > outCondList */
	select tb2.job_name, tb3.sched_table, tb2.application, tb2.group_name, tb3.data_center
	from def_lnki_p tb1
	    ,def_job tb2
	    ,def_tables tb3
	<!-- where condition in (select condition from def_lnko_p where table_id = $table_id$ and job_id = $job_id$ and isn_ = 1) -->
	where condition in (select condition from def_lnko_p where table_id = $table_id$ and job_id = $job_id$ and sign = '+' )
	  and tb1.table_id = tb3.table_id
	  and tb1.job_id = tb2.job_id
	  and tb2.table_id = tb3.table_id
	order by tb2.job_name
	
	
<!-- 		select tb1.job_name, tb2.sched_table, tb1.application, tb1.group_name, tb2.data_center
		  from def_job tb1 , def_tables tb2,
		  	   ( select job_id, table_id
		 		   from DEF_LNKI_P
				  where condition = #job_name# || '-OK' OR condition = 'GLOB-' || #job_name# || '-OK' ) tb3
				  where condition = #job_name# || '-ENDED' OR condition = 'GLOB-' || #job_name# || '-ENDED' ) tb3
		 where tb1.table_id = tb2.table_id
		   and tb1.table_id = tb3.table_id
		   and tb1.job_id = tb3.job_id -->
	</select>
	
	<sql id="batchResultTotalList2Inc">
	/* POSTGRE_M > batchResultTotalList2Inc */
	
		<isNotEmpty property="s_odate">
			AND tb1.odate >= REPLACE(SUBSTR(#s_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty property="e_odate">
			AND tb1.odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#e_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_s_odate">
			odate >= REPLACE(SUBSTR(#p_s_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_e_odate">
			odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#p_e_odate#, 3, 8), '/', '')
		</isNotEmpty>
	   	<isNotEmpty prepend="and" property="p_sched_table">
         order_table in
         <iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
            #p_search_text_folder_list[]# 
         </iterate>
      	</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
<!-- 			application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def_text">
			application = #p_application_of_def_text#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>

		<!--<isNotEmpty prepend="and" property="p_application_of_def_text">
			application = #p_application_of_def_text#
		</isNotEmpty>-->

		<!-- 복수 어플리케이션 검색 및 제외(23.03.29 신한캐피탈요건) -->
		<isNotEmpty prepend="and" property="p_application_of_def_text" open="(" close=")">
			<isEqual property="p_chk_app" compareValue="N">

				<iterate property="p_search_text_list" conjunction="OR">
					UPPER(tb1.application) = UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
			<isEqual property="p_chk_app" compareValue="Y">
				<iterate property="p_search_text_list" conjunction="AND">
					UPPER(tb1.application) != UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
		</isNotEmpty>

		<isNotEmpty prepend="and" property="p_group_name_of_def_text">
			group_name = #p_group_name_of_def_text#
		</isNotEmpty>

		<isNotEmpty prepend="and" property="p_cyclic">
			cyclic = #p_cyclic#
		</isNotEmpty>

		<!-- 폴더 권한을 부서명과 동일하게 셋팅 -->
		<!-- 요건 변경 : 선택한 기본 테이블명만 조회 가능  (2020.07.03 강명준) -->
		
		<!-- 운영자는 모든 폴더 조회 가능 -->
		<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
		<!--  
		<isNotEqual property="s_user_gb" compareValue="02">
			AND order_table = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = $s_user_cd$)
		</isNotEqual>
		-->
		
	</sql>
	
	<sql id="batchResultTotalList3Inc">
	/* POSTGRE_M > batchResultTotalList3Inc */
	
		<isNotEmpty property="s_odate">
			AND tb1.odate >= REPLACE(SUBSTR(#s_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty property="e_odate">
			AND tb1.odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#e_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_s_odate">
			odate >= REPLACE(SUBSTR(#p_s_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_e_odate">
			odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#p_e_odate#, 3, 8), '/', '')
		</isNotEmpty>
	   	<isNotEmpty prepend="and" property="p_sched_table">
			order_table = #p_sched_table#
<!-- 			order_table in ($p_sched_table$) -->
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
<!-- 			application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		
		<!--<isNotEmpty prepend="and" property="p_application_of_def_text">
			application = #p_application_of_def_text#
		</isNotEmpty>-->

		<!-- 복수 어플리케이션 검색 및 제외(23.03.29 신한캐피탈요건) -->
		<isNotEmpty prepend="and" property="p_application_of_def_text" open="(" close=")">
			<isEqual property="p_chk_app" compareValue="N">
				<iterate property="p_search_text_list" conjunction="OR">
					UPPER(application) = UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
			<isEqual property="p_chk_app" compareValue="Y">
				<iterate property="p_search_text_list" conjunction="AND">
					UPPER(application) != UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
		</isNotEmpty>

		<isNotEmpty prepend="and" property="p_group_name_of_def_text">
			group_name = #p_group_name_of_def_text#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_cyclic">
			cyclic = #p_cyclic#
		</isNotEmpty>

		<!-- 폴더 권한을 부서명과 동일하게 셋팅 -->
		<!-- 요건 변경 : 선택한 기본 테이블명만 조회 가능  (2020.07.03 강명준) -->
		
		<!-- 운영자는 모든 폴더 조회 가능 -->
		<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
		<!--  
		<isNotEqual property="s_user_gb" compareValue="02">
			AND order_table = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = $s_user_cd$)
		</isNotEqual>
		-->
		
	</sql>
	
	<sql id="batchResultAppList3Inc">
	/* POSTGRE_M > batchResultAppList3Inc */
	
		<isNotEmpty property="s_odate">
			AND tb1.odate >= REPLACE(SUBSTR(#s_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty property="e_odate">
			AND tb1.odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#e_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_s_odate">
			tb1.odate >= REPLACE(SUBSTR(#p_s_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_e_odate">
			tb1.odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#p_e_odate#, 3, 8), '/', '')
		</isNotEmpty>
	   	<isNotEmpty prepend="and" property="p_sched_table">
			order_table = #p_sched_table#
<!-- 			order_table in ($p_sched_table$) -->
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
<!-- 			application in ($p_application_of_def$) -->
			tb1.application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			tb1.group_name = #p_group_name_of_def#
		</isNotEmpty>

		<!--<isNotEmpty prepend="and" property="p_application_of_def_text">
			application = #p_application_of_def_text#
		</isNotEmpty>-->

		<!-- 복수 어플리케이션 검색 및 제외(23.03.29 신한캐피탈요건) -->
		<isNotEmpty prepend="and" property="p_application_of_def_text" open="(" close=")">
			<isEqual property="p_chk_app" compareValue="N">

				<iterate property="p_search_text_list" conjunction="OR">
					UPPER(tb1.application) = UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
			<isEqual property="p_chk_app" compareValue="Y">
				<iterate property="p_search_text_list" conjunction="AND">
					UPPER(tb1.application) != UPPER(#p_search_text_list[]#)
				</iterate>
			</isEqual>
		</isNotEmpty>


		<isNotEmpty prepend="and" property="p_group_name_of_def_text">
			group_name = #p_group_name_of_def_text#
		</isNotEmpty>

		<isNotEmpty prepend="and" property="p_cyclic">
			cyclic = #p_cyclic#
		</isNotEmpty>
		and tb1.application != ' '
		<!-- 폴더 권한을 부서명과 동일하게 셋팅 -->
		<!-- 요건 변경 : 선택한 기본 테이블명만 조회 가능  (2020.07.03 강명준) -->
		
		<!-- 운영자는 모든 폴더 조회 가능 -->
		<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
		<!--  
		<isNotEqual property="s_user_gb" compareValue="02">
			AND order_table = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = $s_user_cd$)
		</isNotEqual>
		-->
		
	</sql>
	
	<sql id="batchResultTotalList3IncAll">
	/* POSTGRE_M > batchResultTotalList3IncAll */
		<iterate property="data_center_items" conjunction=" UNION ALL ">
			select * from(
				SELECT 
<!-- 					'$data_center_items[].data_center$' AS data_center -->
<!-- 					,'$data_center_items[].data_center_code$' AS data_center_code -->
<!-- 					,'$data_center_items[].active_net_name$' AS active_net_name -->
					(select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = '$data_center_items[].data_center$') as data_center
					, order_table
					, application
					, group_name
					, odate
					, status
					, delete_flag
					, job_name
					, cyclic
				FROM $data_center_items[].active_net_name$job
				where 1=1
				 <include refid="batchResultTotalList2Inc" />
				
				UNION ALL
				SELECT 
<!-- 					'$data_center_items[].data_center$' AS data_center -->
<!-- 					,'$data_center_items[].data_center_code$' AS data_center_code -->
<!-- 					,'$data_center_items[].active_net_name$' AS active_net_name -->
					(select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = '$data_center_items[].data_center$') as data_center
					, order_table
					, application
					, group_name
					, odate
					, status
					, delete_flag
					, job_name
					, cyclic
				FROM $SCHEMA$.EZ_HISTORY_$data_center_items[].data_center_code$
				where 1=1
				AND ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)

				 <include refid="batchResultTotalList2Inc" />
				
			) tb1
			where 1=1
		</iterate>
	</sql>
	
	<sql id="batchResultTotalList2IncAll">
	/* POSTGRE_M > batchResultTotalList2IncAll */
		<iterate property="data_center_items" conjunction=" UNION ALL ">
			select * from(
				SELECT 
<!-- 					'$data_center_items[].data_center$' AS data_center -->
<!-- 					,'$data_center_items[].data_center_code$' AS data_center_code -->
<!-- 					,'$data_center_items[].active_net_name$' AS active_net_name -->
					(select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = '$data_center_items[].data_center$') as data_center
					, order_table
					, application
					, group_name
					, odate
					, status
					, delete_flag
					, job_name
					, cyclic
				FROM $data_center_items[].active_net_name$job
				where 1=1
				 <include refid="batchResultTotalList2Inc" />
				
				UNION ALL
				SELECT 
<!-- 					'$data_center_items[].data_center$' AS data_center -->
<!-- 					,'$data_center_items[].data_center_code$' AS data_center_code -->
<!-- 					,'$data_center_items[].active_net_name$' AS active_net_name -->
					(select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = '$data_center_items[].data_center$') as data_center
					, order_table
					, application
					, group_name
					, odate
					, status
					, delete_flag
					, job_name
					, cyclic
				FROM $SCHEMA$.EZ_HISTORY_$data_center_items[].data_center_code$
				where 1=1
				AND ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)

				 <include refid="batchResultTotalList2Inc" />
				
			) tb1
			where 1=1
		</iterate>
	</sql>
	
	<select id="batchResultTotalList2" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > batchResultTotalList2 */
	SELECT * FROM(
			SELECT ROW_NUMBER() OVER() AS row_num
			, data_center
			, order_table as table_name
			, application
			, group_name
			, odate
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended OK' THEN 1 ELSE 0 END) as ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended Not OK' THEN 1 ELSE 0 END) as not_ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Executing' THEN 1 ELSE 0 END) as exec_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Wait User' THEN 1 ELSE 0 END) as wait_user_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Wait Resource' THEN 1 ELSE 0 END) as wait_resource_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Wait Host' THEN 1 ELSE 0 END) as wait_host_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Wait Condition' THEN 1 ELSE 0 END) as wait_condition_cnt
           	, SUM(CASE WHEN delete_flag = '1' THEN 1 ELSE 0 END) as delete_cnt
			, SUM(CASE WHEN status='total' THEN 0 ELSE 1 END) AS total_cnt
			,(case when (select task_type from DEF_JOB f where f.job_name = split_part(order_table, '/', 1)) = 'SMART Table' then 'Y' else 'N' end) as smart_job_yn
			 FROM(
			
			<isNotEmpty property="data_center">
			select * from(
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				,tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				  FROM $active_net_name$JOB tb1
				WHERE 1=1
				 <include refid="batchResultTotalList2Inc" />
				
				UNION ALL
				
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ tb1
				WHERE 1=1
				AND tb1.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)

				 <include refid="batchResultTotalList2Inc" />
				 
				  ) t1
			</isNotEmpty>
			
			<isEmpty property="data_center">
				<include refid="batchResultTotalList2IncAll" />
			</isEmpty>
  			
				)TTT
			 GROUP 	BY data_center, order_table, application, group_name, odate
			 ORDER  BY data_center, order_table, application, group_name, odate
			) tb1
			where 1=1
			
			<isNotEmpty property="startRowNum">
				and row_num between #startRowNum# and #endRowNum#
			</isNotEmpty>
			
	</select>
	
	<select id="batchResultTotalList3" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > batchResultTotalList3 */
	SELECT * FROM(
			SELECT ROW_NUMBER() OVER() AS row_num
			, data_center
			, order_table as table_name
			, application
			, group_name
			, odate
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended OK' THEN 1 ELSE 0 END) as ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended Not OK' THEN 1 ELSE 0 END) as not_ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Executing' THEN 1 ELSE 0 END) as exec_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status in ('Wait User','Wait Resource','Wait Host','Wait Condition', 'Wait Workload') THEN 1 ELSE 0 END) as wait_cnt
           	, SUM(CASE WHEN delete_flag = '1' THEN 1 ELSE 0 END) as delete_cnt
			, SUM(CASE WHEN status='total' THEN 0 ELSE 1 END) AS total_cnt
			 FROM(
			
			<isNotEmpty property="data_center">
			select * from(
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				,tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				, tb1.cyclic
				  FROM $active_net_name$JOB tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
				WHERE 1=1
				and tb1.job_name = tb2.job

				 <include refid="batchResultTotalList3Inc" />
				
				UNION ALL
				
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				, tb1.cyclic
				FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
				WHERE 1=1
				and tb1.job_name = tb2.job
				AND tb1.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)

				 <include refid="batchResultTotalList3Inc" />
				 
				  ) t1
			</isNotEmpty>
			
			<isEmpty property="data_center">
				<include refid="batchResultTotalList3IncAll" />
			</isEmpty>
  			
				)TTT
			 GROUP 	BY data_center, order_table, application, group_name, odate
			 ORDER  BY data_center, order_table, application, group_name, odate
			) tb1
			
		<isNotEmpty property="startRowNum">
			WHERE row_num between #startRowNum# and #endRowNum#
		</isNotEmpty>
		
		
		UNION ALL
		
		SELECT 
		 ROW_NUMBER() OVER() AS row_num
		,''
		,''
		,''
		,''
		,''
		,''
		,'합계'
		,sum(ok_cnt)
		,sum(not_ok_cnt)
		,sum(exec_cnt)
		,sum(wait_cnt)
		,sum(delete_cnt)
		,sum(total_cnt)
		FROM(
			SELECT ROW_NUMBER() OVER() AS row_num
			, data_center
			, order_table as table_name
			, application
			, group_name
			, odate
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended OK' THEN 1 ELSE 0 END) as ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended Not OK' THEN 1 ELSE 0 END) as not_ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Executing' THEN 1 ELSE 0 END) as exec_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status in ('Wait User','Wait Resource','Wait Host','Wait Condition', 'Wait Workload') THEN 1 ELSE 0 END) as wait_cnt
           	, SUM(CASE WHEN delete_flag = '1' THEN 1 ELSE 0 END) as delete_cnt
			, SUM(CASE WHEN status='total' THEN 0 ELSE 1 END) AS total_cnt
			 FROM(
			
			<isNotEmpty property="data_center">
			select * from(
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				,tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				, tb1.cyclic
				  FROM $active_net_name$JOB tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
				WHERE 1=1
				 and tb1.job_name = tb2.job

				 <include refid="batchResultTotalList3Inc" />
				
				UNION ALL
				
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				, tb1.cyclic
				FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
				WHERE 1=1
				and tb1.job_name = tb2.job
				AND tb1.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)

				 <include refid="batchResultTotalList3Inc" />
				 
				  ) t1
			</isNotEmpty>
			
			<isEmpty property="data_center">
				<include refid="batchResultTotalList3IncAll" />
			</isEmpty>
  			
				)TTT
			 GROUP 	BY data_center, order_table, application, group_name, odate
			 ORDER  BY data_center, order_table, application, group_name, odate
			) tb1
			
		<isNotEmpty property="startRowNum">
			WHERE row_num between #startRowNum# and #endRowNum#
		</isNotEmpty>
		
	</select>
	
	<select id="batchResultAppList3" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > batchResultAppList3 */
	SELECT application, sum(ok_cnt) as ok_cnt, sum(not_ok_cnt) as not_ok_cnt, sum(exec_cnt) as exec_cnt, sum(wait_cnt) as wait_cnt, sum(delete_cnt) as delete_cnt, sum(total_cnt) as total_cnt FROM(
			SELECT ROW_NUMBER() OVER() AS row_num
			, application
			, odate
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended OK' THEN 1 ELSE 0 END) as ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended Not OK' THEN 1 ELSE 0 END) as not_ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Executing' THEN 1 ELSE 0 END) as exec_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status in ('Wait User','Wait Resource','Wait Host','Wait Condition', 'Wait Workload') THEN 1 ELSE 0 END) as wait_cnt
           	, SUM(CASE WHEN delete_flag = '1' THEN 1 ELSE 0 END) as delete_cnt
			, SUM(CASE WHEN status='total' THEN 0 ELSE 1 END) AS total_cnt
			 FROM(
			
			<isNotEmpty property="data_center">
			select * from(
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				  FROM $active_net_name$JOB tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
				WHERE 1=1
				 AND tb1.job_name = tb2.job
				 <include refid="batchResultAppList3Inc" />
				
				UNION ALL
				
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
				WHERE 1=1
				 AND tb1.job_name = tb2.job
				AND tb1.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)

				 <include refid="batchResultAppList3Inc" />
				 
				  ) t1
			</isNotEmpty>
			
			<isEmpty property="data_center">
				<include refid="batchResultTotalList3IncAll" />
			</isEmpty>
  			
				)TTT
			 GROUP 	BY data_center, order_table, application, group_name, odate
			 ORDER  BY data_center, order_table, application, group_name, odate
			) tb1
			 group by application
		<isNotEmpty property="startRowNum">
			WHERE row_num between #startRowNum# and #endRowNum#
		</isNotEmpty>
		
		
		UNION ALL
		
		SELECT application, sum(ok_cnt) as ok_cnt, sum(not_ok_cnt) as not_ok_cnt, sum(exec_cnt) as exec_cnt, sum(wait_cnt) as wait_cnt, sum(delete_cnt) as delete_cnt, sum(total_cnt) as total_cnt FROM( 
		SELECT 
		'합계'::text as application
		,sum(ok_cnt) as ok_cnt
		,sum(not_ok_cnt) as not_ok_cnt
		,sum(exec_cnt) as exec_cnt
		,sum(wait_cnt) as wait_cnt
		,sum(delete_cnt) as delete_cnt
		,sum(total_cnt) as total_cnt
		FROM(
			SELECT ROW_NUMBER() OVER() AS row_num
			, data_center
			, order_table as table_name
			, application
			, group_name
			, odate
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended OK' THEN 1 ELSE 0 END) as ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended Not OK' THEN 1 ELSE 0 END) as not_ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Executing' THEN 1 ELSE 0 END) as exec_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status in ('Wait User','Wait Resource','Wait Host','Wait Condition', 'Wait Workload') THEN 1 ELSE 0 END) as wait_cnt
           	, SUM(CASE WHEN delete_flag = '1' THEN 1 ELSE 0 END) as delete_cnt
			, SUM(CASE WHEN status='total' THEN 0 ELSE 1 END) AS total_cnt
			 FROM(
			
			<isNotEmpty property="data_center">
			select * from(
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				,tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				  FROM $active_net_name$JOB tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
				WHERE 1=1
				  AND tb1.job_name = tb2.job
				 <include refid="batchResultAppList3Inc" />
				
				UNION ALL
				
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, tb1.order_table
				, tb1.application
				, tb1.group_name
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2
				WHERE 1=1
				 AND tb1.job_name = tb2.job
				AND tb1.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)

				 <include refid="batchResultAppList3Inc" />
				 
				  ) t1
			</isNotEmpty>
			
			<isEmpty property="data_center">
				<include refid="batchResultTotalList3IncAll" />
			</isEmpty>
  			
				)TTT
			 GROUP 	BY data_center, order_table, application, group_name, odate
			 ORDER  BY data_center, order_table, application, group_name, odate
			) tb1
			) tt
			GROUP 	BY application
		<isNotEmpty property="startRowNum">
			WHERE row_num between #startRowNum# and #endRowNum#
		</isNotEmpty>
		
	</select>
	
	
	<select id="batchResultStatusList3" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > batchResultStatusList3 */
	SELECT * FROM(
			SELECT ROW_NUMBER() OVER() AS row_num, job_name, description, status, final_status,
					(case WHEN cyclic='1' THEN cnt
       			ELSE rerun_counter end) rerun_counter, odate, cyclic
			 FROM(
			
			select * from(
				select data_center, status, final_status, description, job_name, count(job_name) cnt,  
				(case WHEN cyclic='1' THEN rerun_counter1
       			ELSE rerun_counter2 end) rerun_counter, odate, cyclic from (
				select  (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center ,
						'오류'::text as status,
						  (select status from $active_net_name$JOB a where 1=1 and a.order_id = tb1.order_id and a.job_name = tb1.job_name
							union 
							select status from $SCHEMA$.EZ_HISTORY_001 a where 1=1 and a.order_id = tb1.order_id and a.job_name = tb1.job_name AND a.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)) as final_status,
						 tb1.description,
						 tb1.job_name,
						 (select count(job_name) from $SCHEMA$.ez_alarm tt1 where tb1.order_id  = tt1.order_id and tb1.job_name  = tt1.job_name and tb1.odate  = tt1.odate and tt1.job_name = tb2.job_name and tb2.cyclic = '1') as rerun_counter1,

						 (select tt1.run_counter from $SCHEMA$.ez_alarm tt1 where tb1.alarm_cd = tt1.alarm_cd and tt1.job_name = tb2.job_name and tb2.cyclic != '1') as rerun_counter2,

						 tb1.odate,
						 tb2.cyclic
				from $SCHEMA$.ez_alarm tb1
				where 1=1 
				and tb1.job_name = tb2.job_name 
				and message = 'Ended not OK'
				<include refid="batchResultAppList3Inc" />
				) a
				group by data_center, status, final_status, description, job_name, odate, cyclic, a.rerun_counter1,a.rerun_counter2
				UNION ALL
				select data_center, status, final_status, description, job_name, count(doc_cd) cnt, count(doc_cd) rerun_counter, odate, cyclic from (
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, '재수행'::text as status
				, status as final_status
				, tb1.description
				, tb1.job_name
				, tb1.rerun_counter 
				, tb1.odate
				, tb1.cyclic
				, tb5.doc_cd
				  FROM $active_net_name$JOB tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2, $SCHEMA$.ez_doc_master tb5, $SCHEMA$.ez_doc_07 tb6
				WHERE 1=1
					and tb1.job_name = tb2.job
					and tb5.doc_cd = tb6.doc_cd 
					and tb1.order_id = tb6.order_id 
					and tb5.state_cd = '02'
					and tb5.apply_cd = '02'
					and tb6.after_status = 'RERUN'
					and rerun_counter > 1

				 <include refid="batchResultAppList3Inc" />
				) a
				group by data_center, status, final_status, description, job_name, odate, cyclic
				UNION ALL
				select data_center, status, final_status, description, job_name, count(doc_cd) cnt, count(doc_cd) rerun_counter, odate, cyclic from (
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, '재수행'::text as status
				, status as final_status
				, tb1.description
				, tb1.job_name
				, tb1.rerun_counter
				, tb1.odate 
				, tb1.cyclic
				, tb5.doc_cd
				FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ tb1, $SCHEMA$.EZ_JOB_MAPPER  tb2, $SCHEMA$.ez_doc_master tb5, $SCHEMA$.ez_doc_07 tb6
				WHERE 1=1
					AND tb1.job_name = tb2.job
					and tb5.doc_cd = tb6.doc_cd 
					and tb1.order_id = tb6.order_id 
					and tb5.state_cd = '02'
					and tb5.apply_cd = '02'
					and tb6.after_status = 'RERUN'
					AND tb1.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)
					AND rerun_counter > 1

				 <include refid="batchResultAppList3Inc" />
				 ) a
				group by data_center, status, final_status, description, job_name, odate, cyclic
				  ) t1
  			
				)TTT
			) tb1
			order by odate asc, job_name asc, rerun_counter asc

	</select>

	<select id="jobOpReportInfo" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobOpReportInfo */
		SELECT 	#p_s_search_odate#::date || ' ' || SUBSTR(ctm_daily_time, 2, 2) || ':' || SUBSTR(ctm_daily_time, 4, 2) AS s_odate,
       			#p_e_search_odate#::date || ' ' || SUBSTR(ctm_daily_time, 2, 2) || ':' || SUBSTR(ctm_daily_time, 4, 2) AS e_odate
       	  FROM 	COMM
       	 WHERE 	data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
														THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
												 	   ELSE #data_center# END )
	</select>
	<select id="jobOpStatsReportList" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobOpStatsReportList */		
		SELECT	SUM(ended_ok_cnt + ended_not_ok_cnt + wait_cnt + etc_cnt) AS total_cnt,
				SUM(ended_ok_susi_cnt + ended_not_ok_susi_cnt + wait_susi_cnt + etc_susi_cnt) AS total_susi_cnt,
				SUM(ended_ok_cnt) AS ended_ok_cnt, SUM(ended_not_ok_cnt) AS ended_not_ok_cnt, SUM(wait_cnt) AS wait_cnt, SUM(etc_cnt) AS etc_cnt,
				SUM(ended_ok_susi_cnt) AS ended_ok_susi_cnt, SUM(ended_not_ok_susi_cnt) AS ended_not_ok_susi_cnt, SUM(wait_susi_cnt) AS wait_susi_cnt, SUM(etc_susi_cnt) AS etc_susi_cnt,
				SUM(begin_month_cnt) AS begin_month_cnt, SUM(end_month_cnt) AS end_month_cnt, SUM(begin_month_susi_cnt) AS begin_month_susi_cnt, SUM(end_month_susi_cnt) AS end_month_susi_cnt,
			
				SUM(edw_ended_ok_cnt + edw_ended_not_ok_cnt + edw_wait_cnt + edw_etc_cnt) AS edw_total_cnt,
				SUM(edw_ended_ok_susi_cnt + edw_ended_not_ok_susi_cnt + edw_wait_susi_cnt + edw_etc_susi_cnt) AS edw_total_susi_cnt,
				SUM(edw_ended_ok_cnt) AS edw_ended_ok_cnt, SUM(edw_ended_not_ok_cnt) AS edw_ended_not_ok_cnt, SUM(edw_wait_cnt) AS edw_wait_cnt, SUM(edw_etc_cnt) AS edw_etc_cnt,
				SUM(edw_ended_ok_susi_cnt) AS edw_ended_ok_susi_cnt, SUM(edw_ended_not_ok_susi_cnt) AS edw_ended_not_ok_susi_cnt, SUM(edw_wait_susi_cnt) AS edw_wait_susi_cnt, SUM(edw_etc_susi_cnt) AS edw_etc_susi_cnt,
				SUM(edw_begin_month_cnt) AS edw_begin_month_cnt, SUM(edw_end_month_cnt) AS edw_end_month_cnt, SUM(edw_begin_month_susi_cnt) AS edw_begin_month_susi_cnt, SUM(edw_end_month_susi_cnt) AS edw_end_month_susi_cnt,
				
				SUM(ifrs_ended_ok_cnt + ifrs_ended_not_ok_cnt + ifrs_wait_cnt + ifrs_etc_cnt) AS ifrs_total_cnt,
				SUM(ifrs_ended_ok_susi_cnt + ifrs_ended_not_ok_susi_cnt + ifrs_wait_susi_cnt + ifrs_etc_susi_cnt) AS ifrs_total_susi_cnt,
				SUM(ifrs_ended_ok_cnt) AS ifrs_ended_ok_cnt, SUM(ifrs_ended_not_ok_cnt) AS ifrs_ended_not_ok_cnt, SUM(ifrs_wait_cnt) AS ifrs_wait_cnt, SUM(ifrs_etc_cnt) AS ifrs_etc_cnt,
				SUM(ifrs_ended_ok_susi_cnt) AS ifrs_ended_ok_susi_cnt, SUM(ifrs_ended_not_ok_susi_cnt) AS ifrs_ended_not_ok_susi_cnt, SUM(ifrs_wait_susi_cnt) AS ifrs_wait_susi_cnt, SUM(ifrs_etc_susi_cnt) AS ifrs_etc_susi_cnt,
				SUM(ifrs_begin_month_cnt) AS ifrs_begin_month_cnt, SUM(ifrs_end_month_cnt) AS ifrs_end_month_cnt, SUM(ifrs_begin_month_susi_cnt) AS ifrs_begin_month_susi_cnt, SUM(ifrs_end_month_susi_cnt) AS ifrs_end_month_susi_cnt,
				
				SUM(ais_ended_ok_cnt + ais_ended_not_ok_cnt + ais_wait_cnt + ais_etc_cnt) AS ais_total_cnt,
				SUM(ais_ended_ok_susi_cnt + ais_ended_not_ok_susi_cnt + ais_wait_susi_cnt + ais_etc_susi_cnt) AS ais_total_susi_cnt,
				SUM(ais_ended_ok_cnt) AS ais_ended_ok_cnt, SUM(ais_ended_not_ok_cnt) AS ais_ended_not_ok_cnt, SUM(ais_wait_cnt) AS ais_wait_cnt, SUM(ais_etc_cnt) AS ais_etc_cnt,
				SUM(ais_ended_ok_susi_cnt) AS ais_ended_ok_susi_cnt, SUM(ais_ended_not_ok_susi_cnt) AS ais_ended_not_ok_susi_cnt, SUM(ais_wait_susi_cnt) AS ais_wait_susi_cnt, SUM(ais_etc_susi_cnt) AS ais_etc_susi_cnt,
				SUM(ais_begin_month_cnt) AS ais_begin_month_cnt, SUM(ais_end_month_cnt) AS ais_end_month_cnt, SUM(ais_begin_month_susi_cnt) AS ais_begin_month_susi_cnt, SUM(ais_end_month_susi_cnt) AS ais_end_month_susi_cnt,
				
				SUM(alm_ended_ok_cnt + alm_ended_not_ok_cnt + alm_wait_cnt + alm_etc_cnt) AS alm_total_cnt,
				SUM(alm_ended_ok_susi_cnt + alm_ended_not_ok_susi_cnt + alm_wait_susi_cnt + alm_etc_susi_cnt) AS alm_total_susi_cnt,
				SUM(alm_ended_ok_cnt) AS alm_ended_ok_cnt, SUM(alm_ended_not_ok_cnt) AS alm_ended_not_ok_cnt, SUM(alm_wait_cnt) AS alm_wait_cnt, SUM(alm_etc_cnt) AS alm_etc_cnt,
				SUM(alm_ended_ok_susi_cnt) AS alm_ended_ok_susi_cnt, SUM(alm_ended_not_ok_susi_cnt) AS alm_ended_not_ok_susi_cnt, SUM(alm_wait_susi_cnt) AS alm_wait_susi_cnt, SUM(alm_etc_susi_cnt) AS alm_etc_susi_cnt,
				SUM(alm_begin_month_cnt) AS alm_begin_month_cnt, SUM(alm_end_month_cnt) AS alm_end_month_cnt, SUM(alm_begin_month_susi_cnt) AS alm_begin_month_susi_cnt, SUM(alm_end_month_susi_cnt) AS alm_end_month_susi_cnt,
				
				SUM(new_rdm_ended_ok_cnt + new_rdm_ended_not_ok_cnt + new_rdm_wait_cnt + new_rdm_etc_cnt) AS new_rdm_total_cnt,
				SUM(new_rdm_ended_ok_susi_cnt + new_rdm_ended_not_ok_susi_cnt + new_rdm_wait_susi_cnt + new_rdm_etc_susi_cnt) AS new_rdm_total_susi_cnt,
				SUM(new_rdm_ended_ok_cnt) AS new_rdm_ended_ok_cnt, SUM(new_rdm_ended_not_ok_cnt) AS new_rdm_ended_not_ok_cnt, SUM(new_rdm_wait_cnt) AS new_rdm_wait_cnt, SUM(new_rdm_etc_cnt) AS new_rdm_etc_cnt,
				SUM(new_rdm_ended_ok_susi_cnt) AS new_rdm_ended_ok_susi_cnt, SUM(new_rdm_ended_not_ok_susi_cnt) AS new_rdm_ended_not_ok_susi_cnt, SUM(new_rdm_wait_susi_cnt) AS new_rdm_wait_susi_cnt, SUM(new_rdm_etc_susi_cnt) AS new_rdm_etc_susi_cnt,
				SUM(new_rdm_begin_month_cnt) AS new_rdm_begin_month_cnt, SUM(new_rdm_end_month_cnt) AS new_rdm_end_month_cnt, SUM(new_rdm_begin_month_susi_cnt) AS new_rdm_begin_month_susi_cnt, SUM(new_rdm_end_month_susi_cnt) AS new_rdm_end_month_susi_cnt,
				
				SUM(rba_ended_ok_cnt + rba_ended_not_ok_cnt + rba_wait_cnt + rba_etc_cnt) AS rba_total_cnt,
				SUM(rba_ended_ok_susi_cnt + rba_ended_not_ok_susi_cnt + rba_wait_susi_cnt + rba_etc_susi_cnt) AS rba_total_susi_cnt,
				SUM(rba_ended_ok_cnt) AS rba_ended_ok_cnt, SUM(rba_ended_not_ok_cnt) AS rba_ended_not_ok_cnt, SUM(rba_wait_cnt) AS rba_wait_cnt, SUM(rba_etc_cnt) AS rba_etc_cnt,
				SUM(rba_ended_ok_susi_cnt) AS rba_ended_ok_susi_cnt, SUM(rba_ended_not_ok_susi_cnt) AS rba_ended_not_ok_susi_cnt, SUM(rba_wait_susi_cnt) AS rba_wait_susi_cnt, SUM(rba_etc_susi_cnt) AS rba_etc_susi_cnt,
				SUM(rba_begin_month_cnt) AS rba_begin_month_cnt, SUM(rba_end_month_cnt) AS rba_end_month_cnt, SUM(rba_begin_month_susi_cnt) AS rba_begin_month_susi_cnt, SUM(rba_end_month_susi_cnt) AS rba_end_month_susi_cnt,
				
				SUM(crs_ended_ok_cnt + crs_ended_not_ok_cnt + crs_wait_cnt + crs_etc_cnt) AS crs_total_cnt,
				SUM(crs_ended_ok_susi_cnt + crs_ended_not_ok_susi_cnt + crs_wait_susi_cnt + crs_etc_susi_cnt) AS crs_total_susi_cnt,
				SUM(crs_ended_ok_cnt) AS crs_ended_ok_cnt, SUM(crs_ended_not_ok_cnt) AS crs_ended_not_ok_cnt, SUM(crs_wait_cnt) AS crs_wait_cnt, SUM(crs_etc_cnt) AS crs_etc_cnt,
				SUM(crs_ended_ok_susi_cnt) AS crs_ended_ok_susi_cnt, SUM(crs_ended_not_ok_susi_cnt) AS crs_ended_not_ok_susi_cnt, SUM(crs_wait_susi_cnt) AS crs_wait_susi_cnt, SUM(crs_etc_susi_cnt) AS crs_etc_susi_cnt,
				SUM(crs_begin_month_cnt) AS crs_begin_month_cnt, SUM(crs_end_month_cnt) AS crs_end_month_cnt, SUM(crs_begin_month_susi_cnt) AS crs_begin_month_susi_cnt, SUM(crs_end_month_susi_cnt) AS crs_end_month_susi_cnt
				
				
				
				
		  FROM	(
			SELECT 	( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS etc_susi_cnt,				
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%' THEN 1 ELSE 0 END ) AS begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%' THEN 1 ELSE 0 END ) AS end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%' THEN 1 ELSE 0 END ) AS begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%' THEN 1 ELSE 0 END ) AS end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%' THEN 1 ELSE 0 END ) AS edw_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%' THEN 1 ELSE 0 END ) AS edw_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%' THEN 1 ELSE 0 END ) AS edw_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%' THEN 1 ELSE 0 END ) AS edw_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%' THEN 1 ELSE 0 END ) AS ifrs_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%' THEN 1 ELSE 0 END ) AS ifrs_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%' THEN 1 ELSE 0 END ) AS ifrs_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%' THEN 1 ELSE 0 END ) AS ifrs_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%' THEN 1 ELSE 0 END ) AS ais_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%' THEN 1 ELSE 0 END ) AS ais_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%' THEN 1 ELSE 0 END ) AS ais_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%' THEN 1 ELSE 0 END ) AS ais_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%' THEN 1 ELSE 0 END ) AS alm_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%' THEN 1 ELSE 0 END ) AS alm_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%' THEN 1 ELSE 0 END ) AS alm_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%' THEN 1 ELSE 0 END ) AS alm_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%' THEN 1 ELSE 0 END ) AS new_rdm_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%' THEN 1 ELSE 0 END ) AS new_rdm_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%' THEN 1 ELSE 0 END ) AS new_rdm_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%' THEN 1 ELSE 0 END ) AS new_rdm_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%' THEN 1 ELSE 0 END ) AS rba_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%' THEN 1 ELSE 0 END ) AS rba_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%' THEN 1 ELSE 0 END ) AS rba_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%' THEN 1 ELSE 0 END ) AS rba_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%' THEN 1 ELSE 0 END ) AS crs_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%' THEN 1 ELSE 0 END ) AS crs_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%' THEN 1 ELSE 0 END ) AS crs_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%' THEN 1 ELSE 0 END ) AS crs_end_month_susi_cnt
					
			  FROM $active_net_name$JOB tb1, DEF_JOB tb2, DEF_TABLES tb3
			 WHERE 1 = 1
			   
		   	<isNotEmpty property="p_s_odate">
			<![CDATA[
					AND tb1.odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
				]]>
			</isNotEmpty>
			<isNotEmpty property="p_e_odate">
				<![CDATA[
					AND tb1.odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
				]]>
			</isNotEmpty>

			   AND tb1.job_name = tb2.job_name
			   AND tb1.order_table = tb2.parent_table
			   AND tb2.table_id = tb3.table_id
			   AND tb3.data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
														THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
												 	   ELSE #data_center# END )
			   
			 UNION ALL
			 
		 	SELECT 	( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS etc_susi_cnt,				
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%' THEN 1 ELSE 0 END ) AS begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.job_name LIKE 'CBS%' THEN 1 ELSE 0 END ) AS end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%' THEN 1 ELSE 0 END ) AS begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.job_name LIKE 'CBS%' THEN 1 ELSE 0 END ) AS end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS edw_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%' THEN 1 ELSE 0 END ) AS edw_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%' THEN 1 ELSE 0 END ) AS edw_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%' THEN 1 ELSE 0 END ) AS edw_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE '%EDW%' AND tb1.order_table NOT LIKE 'ALM%' AND tb1.order_table NOT LIKE 'RBA%' THEN 1 ELSE 0 END ) AS edw_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ifrs_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%' THEN 1 ELSE 0 END ) AS ifrs_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'IFRS%' THEN 1 ELSE 0 END ) AS ifrs_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%' THEN 1 ELSE 0 END ) AS ifrs_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'IFRS%' THEN 1 ELSE 0 END ) AS ifrs_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS ais_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%' THEN 1 ELSE 0 END ) AS ais_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'AIS%' THEN 1 ELSE 0 END ) AS ais_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%' THEN 1 ELSE 0 END ) AS ais_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'AIS%' THEN 1 ELSE 0 END ) AS ais_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS alm_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%' THEN 1 ELSE 0 END ) AS alm_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'ALM%' THEN 1 ELSE 0 END ) AS alm_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%' THEN 1 ELSE 0 END ) AS alm_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'ALM%' THEN 1 ELSE 0 END ) AS alm_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS new_rdm_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%' THEN 1 ELSE 0 END ) AS new_rdm_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'NEW_RDM%' THEN 1 ELSE 0 END ) AS new_rdm_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%' THEN 1 ELSE 0 END ) AS new_rdm_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'NEW_RDM%' THEN 1 ELSE 0 END ) AS new_rdm_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS rba_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%' THEN 1 ELSE 0 END ) AS rba_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'RBA%' THEN 1 ELSE 0 END ) AS rba_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%' THEN 1 ELSE 0 END ) AS rba_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'RBA%' THEN 1 ELSE 0 END ) AS rba_end_month_susi_cnt,
					
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_ended_ok_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_ended_not_ok_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_wait_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_etc_cnt,
					( CASE WHEN (STATUS = 'Ended OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_ended_ok_susi_cnt,
					( CASE WHEN (STATUS = 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_ended_not_ok_susi_cnt,
					( CASE WHEN (STATUS LIKE 'Wait%' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_wait_susi_cnt,
					( CASE WHEN (STATUS != 'Ended OK' AND STATUS NOT LIKE 'Wait%' AND STATUS != 'Ended Not OK' AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%') AND (tb2.days_cal != 'M_FBiz' AND tb2.days_cal != 'M_FBiz-1' AND tb2.days_cal != 'M_FSys' AND tb2.days_cal != 'M_LBiz' AND tb2.days_cal != 'M_LSys') THEN 1 ELSE 0 END ) AS crs_etc_susi_cnt,					
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%' THEN 1 ELSE 0 END ) AS crs_begin_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily = 'SYSTEM' AND tb1.order_table LIKE 'CRS%' THEN 1 ELSE 0 END ) AS crs_end_month_cnt,
					( CASE WHEN (tb2.days_cal = 'M_FBiz' OR tb2.days_cal = 'M_FBiz-1' OR tb2.days_cal = 'M_FSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%' THEN 1 ELSE 0 END ) AS crs_begin_month_susi_cnt,
					( CASE WHEN (tb2.days_cal = 'M_LBiz' OR tb2.days_cal = 'M_LSys') AND tb3.user_daily IS NULL AND tb1.order_table LIKE 'CRS%' THEN 1 ELSE 0 END ) AS crs_end_month_susi_cnt
					
		  	  FROM 	$SCHEMA$.EZ_HISTORY_$data_center_code$ tb1,DEF_JOB tb2, DEF_TABLES tb3
		 	 WHERE 	1 = 1
			   
			<isNotEmpty property="p_s_odate">
			<![CDATA[
					AND tb1.odate >= REPLACE(SUBSTR(#p_s_search_odate#, 3, 8), '/', '')
				]]>
			</isNotEmpty>
			<isNotEmpty property="p_e_odate">
				<![CDATA[
					AND tb1.odate <= REPLACE(SUBSTR(#p_e_search_odate#, 3, 8), '/', '')
				]]>
			</isNotEmpty>

		   	   AND 	tb1.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)
		   	   AND  tb1.job_name = tb2.job_name
			   AND  tb1.order_table = tb2.parent_table
			   AND  tb2.table_id = tb3.table_id
			   AND 	tb3.data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
														THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
												 	   ELSE #data_center# END )
			   
			   ) AS tb1	
	</select>
	
	
	<select id="preDateAJobInfo" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* POSTGRE_M > preDateAJobInfo */
	<![CDATA[
		SELECT 	tb1.order_id
		  FROM 	$active_net_name$JOB tb1
		 WHERE 	tb1.job_name = #job_name#
		   AND 	tb1.odate = #odate#
		   AND	tb1.delete_flag != '1'
	]]>
	</select>
	
	
	<select id="historyFailJobList" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > historyFailJobList */
	
		select array_to_string(array_agg(job_name), ',') as failJobList
		from (
			select distinct job_name
			from(SELECT job_name
			FROM $active_net_name$JOB a 
			WHERE 1=1 
			AND status = 'Ended Not OK'
			<isNotEmpty property="s_odate">
				AND a.odate >= REPLACE(SUBSTR(#s_odate#, 3, 8), '/', '')
			</isNotEmpty>
			<isNotEmpty property="e_odate">
				AND a.odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#e_odate#, 3, 8), '/', '')
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_s_odate">
				a.odate >= REPLACE(SUBSTR(#p_s_odate#, 3, 8), '/', '')
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_e_odate">
				a.odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#p_e_odate#, 3, 8), '/', '')
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_sched_table">
				order_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
	
			<!--<isNotEmpty prepend="and" property="p_application_of_def_text">
				application = #p_application_of_def_text#
			</isNotEmpty>-->
	
			<!-- 복수 어플리케이션 검색 및 제외(23.03.29 신한캐피탈요건) -->
			<isNotEmpty prepend="and" property="p_application_of_def_text" open="(" close=")">
				<isEqual property="p_chk_app" compareValue="N">
	
					<iterate property="p_search_text_list" conjunction="OR">
						UPPER(application) = UPPER(#p_search_text_list[]#)
					</iterate>
				</isEqual>
				<isEqual property="p_chk_app" compareValue="Y">
					<iterate property="p_search_text_list" conjunction="AND">
						UPPER(application) != UPPER(#p_search_text_list[]#)
					</iterate>
				</isEqual>
			</isNotEmpty>
	
	
			<isNotEmpty prepend="and" property="p_group_name_of_def_text">
				group_name = #p_group_name_of_def_text#
			</isNotEmpty>
	
			<isNotEmpty prepend="and" property="p_cyclic">
				cyclic = #p_cyclic#
			</isNotEmpty>
			union all
		
			SELECT job_name
			FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ a 
			WHERE 1=1 
			AND status = 'Ended Not OK'
			AND ORDER_ID NOT IN (select order_id from $active_net_name$JOB)
			<isNotEmpty property="s_odate">
				AND a.odate >= REPLACE(SUBSTR(#s_odate#, 3, 8), '/', '')
			</isNotEmpty>
			<isNotEmpty property="e_odate">
				AND a.odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#e_odate#, 3, 8), '/', '')
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_s_odate">
				a.odate >= REPLACE(SUBSTR(#p_s_odate#, 3, 8), '/', '')
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_e_odate">
				a.odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#p_e_odate#, 3, 8), '/', '')
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_sched_table">
				order_table = #p_sched_table#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_application_of_def">
				application = #p_application_of_def#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_group_name_of_def">
				group_name = #p_group_name_of_def#
			</isNotEmpty>
	
			<!--<isNotEmpty prepend="and" property="p_application_of_def_text">
	                application = #p_application_of_def_text#
	            </isNotEmpty>-->
	
			<!-- 복수 어플리케이션 검색 및 제외(23.03.29 신한캐피탈요건) -->
			<isNotEmpty prepend="and" property="p_application_of_def_text" open="(" close=")">
				<isEqual property="p_chk_app" compareValue="N">
	
					<iterate property="p_search_text_list" conjunction="OR">
						UPPER(application) = UPPER(#p_search_text_list[]#)
					</iterate>
				</isEqual>
				<isEqual property="p_chk_app" compareValue="Y">
					<iterate property="p_search_text_list" conjunction="AND">
						UPPER(application) != UPPER(#p_search_text_list[]#)
					</iterate>
				</isEqual>
			</isNotEmpty>
	
	
			<isNotEmpty prepend="and" property="p_group_name_of_def_text">
				group_name = #p_group_name_of_def_text#
			</isNotEmpty>
	
			<isNotEmpty prepend="and" property="p_cyclic">
				cyclic = #p_cyclic#
			</isNotEmpty>
			)a
		)aa
		
	</select>
	
		<!-- activeJobList -->
	<sql id="jobLogHistoryListInc">
	/* POSTGRE_M > jobLogHistoryListInc */

			FROM
				(SELECT '1' AS active_gb, A.*,
				(SELECT sysout_yn FROM $SCHEMA$.ez_runinfo_history where order_id = A.order_id and rerun_counter = A.rerun_counter) FROM $active_net_name$JOB A
				UNION all
				SELECT '0' AS active_gb, B.*,
				(select sysout_yn from $SCHEMA$.ez_runinfo_history where order_id = B.order_id and rerun_counter = B.rerun_counter) FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ B where order_id not in (select s.order_id from $active_net_name$JOB s where s.odate = odate)) A

				,( SELECT job,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_nm,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_nm2,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_nm3,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_nm4,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_nm5,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_nm6,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_nm7,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_nm8,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_nm9,
				( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_nm10,
		        ( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = tb1.grp_cd_1 ) AS grp_nm_1,
		        ( SELECT group_line_grp_nm FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE group_line_grp_cd = tb1.grp_cd_2 ) AS grp_nm_2,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_id,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_id2,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_id3,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_id4,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_id5,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_id6,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_id7,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_id8,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_id9,
				( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_id10,
				error_description, ins_date,
				( SELECT dept_cd FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS dept_cd,
				jobSchedGb
			   FROM $SCHEMA$.EZ_JOB_MAPPER  tb1 WHERE data_center = #data_center# ) B
		   WHERE 1=1
		     AND A.job_name = B.job
		) tb1
		where 1=1

		<!-- <isNotEmpty property="order_id">
			AND order_id = #order_id#
		</isNotEmpty> -->
		
		<!-- ODATE -->
		<isNotEmpty property="p_s_odate">
			AND odate >= REPLACE(SUBSTR(#p_s_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<isNotEmpty property="p_e_odate">
			AND odate <![CDATA[ <= ]]> REPLACE(SUBSTR(#p_e_odate#, 3, 8), '/', '')
		</isNotEmpty>
		<!-- 시작일시 -->
		<isNotEmpty property="p_s_time1">
			AND SUBSTR(start_time, 1, 12) >= REPLACE(#p_s_time1#, '/', '')
		</isNotEmpty>
		<isNotEmpty property="p_e_time1">
			AND SUBSTR(start_time, 1, 12) <![CDATA[ < ]]> REPLACE(#p_e_time1#, '/', '')
		</isNotEmpty>
		<!-- 종료일시 -->
		<isNotEmpty property="p_s_time2">
			AND SUBSTR(end_time, 1, 12) >= REPLACE(#p_s_time2#, '/', '')
		</isNotEmpty>
		<isNotEmpty property="p_e_time2">
			AND SUBSTR(end_time, 1, 12) <![CDATA[ < ]]> REPLACE(#p_e_time2#, '/', '')
		</isNotEmpty>
	
		<isNotEmpty prepend="and" property="p_sched_table">
			order_table in
			<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
				#p_search_text_folder_list[]# 
			</iterate>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
<!-- 			application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>		
		<isNotEmpty prepend="and" property="sub_table_of_def">
			job_name = #sub_table_of_def#
		</isNotEmpty>
		
		
		<isNotEmpty property="applicationList"> 
			AND application IN
			<iterate property="applicationList" open="(" close=")" conjunction=",">
	        	#applicationList[]#
	    	</iterate>
	    </isNotEmpty>
		<isEmpty property="applicationList">
			<isNotEmpty prepend="and" property="p_application_of_def_text">
				application = #p_application_of_def_text#
			</isNotEmpty>
		</isEmpty>
		
		<isNotEmpty property="groupNameList"> 
			AND group_name IN
			<iterate property="groupNameList" open="(" close=")" conjunction=",">
	        	#groupNameList[]#
	    	</iterate>
	    </isNotEmpty>
		<isEmpty property="groupNameList">
			<isNotEmpty prepend="and" property="p_group_name_of_def_text">
				group_name = #p_group_name_of_def_text#
			</isNotEmpty>
		</isEmpty>
		<!-- 
		<isNotEmpty prepend="and" property="p_application_of_def_text">
			application = #p_application_of_def_text#
		</isNotEmpty>
		
		<isNotEmpty prepend="and" property="p_group_name_of_def_text">
			group_name = #p_group_name_of_def_text#
		</isNotEmpty> -->

		<isNotEmpty property="p_status">
			AND (status IN
			<iterate property="statusList" open="(" close=")" conjunction=",">
				#statusList[]#
			</iterate>
			)
		</isNotEmpty>

		<isNotEmpty property="p_chk_hold">
			AND holdflag = #p_chk_hold#
		</isNotEmpty>
		
		<!-- 조회조건 담당자/작업 정보 분리 22.08.25 김은희 -->
		<isNotEmpty prepend="and" property="p_search_text">
			<isEqual property="p_search_gubun" compareValue="user_nm">
				((user_nm  like '%'||#p_search_text#||'%' or user_id  = #p_search_text#) OR
				(user_nm2 like '%'||#p_search_text#||'%' or user_id2 = #p_search_text#) OR
				(user_nm3 like '%'||#p_search_text#||'%' or user_id3 = #p_search_text#) OR
				(user_nm4 like '%'||#p_search_text#||'%' or user_id4 = #p_search_text#) OR
				(user_nm5 like '%'||#p_search_text#||'%' or user_id5 = #p_search_text#) OR
				(user_nm6 like '%'||#p_search_text#||'%' or user_id6 = #p_search_text#) OR
				(user_nm7 like '%'||#p_search_text#||'%' or user_id7 = #p_search_text#) OR
				(user_nm8 like '%'||#p_search_text#||'%' or user_id8 = #p_search_text#))
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm1">
				(user_nm like '%'||#p_search_text#||'%' or user_id = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm2">
				(user_nm2 like '%'||#p_search_text#||'%' or user_id2 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm3">
				(user_nm3 like '%'||#p_search_text#||'%' or user_id3 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm4">
				(user_nm4 like '%'||#p_search_text#||'%' or user_id4 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm5">
				(user_nm5 like '%'||#p_search_text#||'%' or user_id5 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm6">
				(user_nm6 like '%'||#p_search_text#||'%' or user_id6 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm7">
				(user_nm7 like '%'||#p_search_text#||'%' or user_id7 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm8">
				(user_nm8 like '%'||#p_search_text#||'%' or user_id8 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm9">
				(user_nm9 like '%'||#p_search_text#||'%' or user_id9 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm10">
				(user_nm10 like '%'||#p_search_text#||'%' or user_id10 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="grp_nm1">
				(grp_nm_1 like '%'||#p_search_text#||'%' )
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="grp_nm2">
				(grp_nm_2 like '%'||#p_search_text#||'%' )
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="description">
				description like '%'||#p_search_text#||'%'
			</isEqual>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_search_text2">
			<!--<isEqual property="p_search_gubun2" compareValue="job_name">
				UPPER(job_name) like UPPER('%'||#p_search_text2#||'%')
			</isEqual>-->
			<!-- 작업명 다중 검색 -->
			<isEqual property="p_search_gubun2" compareValue="job_name">
				<isNotEmpty property="p_search_job_name_list" open="(" close=")">
					<iterate property="p_search_job_name_list" conjunction="OR">
						job_name ILIKE '%' || #p_search_job_name_list[]# || '%'
					</iterate>
				</isNotEmpty>
			</isEqual>
			<isEqual property="p_search_gubun2" compareValue="description">
				description like '%'||#p_search_text2#||'%'
			</isEqual>
			<isEqual property="p_search_gubun2" compareValue="command">
				cmd_line like '%'||#p_search_text2#||'%'
			</isEqual>
			<isEqual property="p_search_gubun2" compareValue="order_id">
				order_id like '%'||#p_search_text2#||'%'
			</isEqual>
		</isNotEmpty>
		
		<isNotEmpty prepend="and" property="p_node_id">
<!-- 			node_id = #p_node_id# -->
			node_id like #p_node_id#||'%'
		</isNotEmpty>
		
		<isNotEmpty property="p_mcode_nm" prepend="AND">
			mcode_nm = #p_mcode_nm#
		</isNotEmpty>
		<isNotEmpty property="p_scode_nm" prepend="AND">
			scode_nm in ($p_scode_nm$)
		</isNotEmpty>
		<isNotEmpty property="p_moneybatchjob" prepend="AND">
			moneybatchjob = #p_moneybatchjob#
		</isNotEmpty>
		<isNotEmpty property="p_critical" prepend="AND">
			critical_yn = #p_critical#
		</isNotEmpty>
		
		<isNotEmpty prepend="and" property="p_search_user_daily">
			<isEqual property="p_search_user_daily" compareValue="S">
				susi_cnt != 0
			</isEqual>
			<isEqual property="p_search_user_daily" compareValue="Y">
				user_daily = 'SYSTEM' AND susi_cnt = 0
			</isEqual>
			<isEqual property="p_search_user_daily" compareValue="N">
				(user_daily != 'SYSTEM' OR user_daily IS NULL) AND susi_cnt = 0
			</isEqual>
		</isNotEmpty>
		
	</sql>
	

	<!-- 과거 수행(최종)/배치수행결과 -->
	<select id="jobLogHistoryList" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobLogHistoryList */
		SELECT * FROM(
			SELECT row_number() over() as row_num, TTT.* FROM(
  			
  			select *
  					, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_doc_master where doc_cd = susi_doc_cd)) as ins_nm1
  					, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_approval_doc where doc_cd = susi_doc_cd and seq = '1' and approval_cd = '02')) as approval_nm1
					, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_approval_doc where doc_cd = susi_doc_cd and seq = '2' and approval_cd = '02')) as approval_nm2
  			from(
				SELECT A.start_time
			      		,A.end_time
			      		,A.rerun_counter
			      		,A.task_type
			      		,A.order_table
			      		,A.application
			      		,A.group_name
			      		,trim(A.job_name) AS job_name
			      		,trim(A.memname) AS memname
			      		,case WHEN A.DELETE_FLAG='1' THEN 'Deleted'
				                WHEN  RTRIM(A.STATE) like 'Held%' THEN 'Held' 
				               <!--  WHEN (A.STATUS='Wait Condition' AND trim(A.FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
				               ELSE A.STATUS END AS state_result
			           ,case WHEN RTRIM(A.STATE) like 'Held%' THEN 'Y' ELSE 'N' END AS holdflag 
			          ,A.active_gb
			          ,A.order_id
			          ,case when A.DELETE_FLAG='1' THEN 'Deleted'
			                ELSE trim(A.STATUS) END AS status
			          ,A.odate
			          ,A.state
			          ,A.job_id 
			          ,( CASE WHEN A.CRITICAL = '1' THEN 'Y' ELSE 'N' END ) AS critical_yn
			          ,A.cmd_line
			          , A.description
					  , B.user_nm, B.user_nm2, B.user_nm3, B.user_nm4, B.user_nm5, B.user_nm6
					  , B.user_nm7, B.user_nm8, B.user_nm9, B.user_nm10
					  , B.user_id, B.user_id2, B.user_id3, B.user_id4, B.user_id5, B.user_id6, B.user_id7, B.user_id8, B.user_id9, B.user_id10
					  , B.grp_nm_1, B.grp_nm_2
			          ,( SELECT dept_nm FROM $SCHEMA$.EZ_DEPT WHERE dept_cd = b.dept_cd) AS dept_nm
<!-- 			          , (CASE WHEN COALESCE(TRIM(a.cpu_id),'')='' THEN  a.nodegroup ELSE a.cpu_id END) AS node_id -->
   			          , CASE  WHEN A.CPU_ID = NULL OR COALESCE(TRIM(A.CPU_ID),'')='' THEN A.NODEGROUP
				              WHEN A.NODEGROUP = A.CPU_ID THEN A.CPU_ID
				              ELSE NODEGROUP ||'('||A.CPU_ID||')' END NODE_ID
			          ,CASE WHEN a.status = 'Wait User' THEN 'WAIT' 
			      				WHEN a.status = 'Wait Condition' THEN 'WAIT' 
			      				WHEN a.status = 'Wait Resource' THEN 'WAIT'
			      				WHEN a.status = 'Wait Host' THEN 'WAIT' 
			      				WHEN a.status = 'Executing' THEN 'RUNNING' 
			      				WHEN a.status = 'Ended OK' THEN 'SUCCESS' 
							    WHEN a.status = 'Ended Not OK' THEN 'FAIL' 
							    ELSE 'ETC'  END AS state_result2
					  ,a.from_time
					  ,a.to_time AS 	time_until
					  ,a.critical
					  ,b.jobschedgb
					  ,(select user_daily from def_tables where sched_table = a.order_table AND data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
																								     THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
																	 	   							 ELSE #data_center# END )) as user_daily
					  , (select doc_cd from $SCHEMA$.ez_doc_05 where job_name = a.job_name and order_id = a.order_id) as susi_doc_cd
					  , (select count(*) from $SCHEMA$.ez_doc_05 where job_name = a.job_name and order_id = a.order_id) as susi_cnt
					  , ( SELECT value FROM $active_net_name$SETVAR WHERE order_id = A.order_id AND order_ = 1 ) AS set_value
					 ,TO_CHAR(TO_TIMESTAMP('2002-01-01', 'YYYY-MM-DD') + (SELECT (SELECT AVG_RUN_TIME FROM $SCHEMA$.EZ_AVG_TIME WHERE JOB_NAME = A.JOB_NAME
                    														AND DATA_CENTER = (CASE WHEN $SCHEMA$.INSTR( #data_center#, ',') > 0
																			THEN SUBSTR( #data_center#, $SCHEMA$.INSTR( #data_center#, ',')+1, LENGTH( #data_center#))
																			ELSE  #data_center# END))) * INTERVAL '1 second', 'HH24:MI:SS') AS AVG_RUN_TIME
					,sysout_yn
					,a.appl_type
					,(case when (select f.task_type from DEF_JOB f where f.job_name = split_part( a.order_table, '/', 1)) = 'SMART Table' then 'Y' else 'N' end) as smart_job_yn
					<include refid="jobLogHistoryListInc" />
		
		ORDER BY odate, START_TIME desc
		
			)TTT
		) tb1
		
		WHERE 1 = 1
		<isNotEmpty property="pagingNum">
			OFFSET $startRowNum$ ROWS FETCH FIRST $pagingNum$ ROWS ONLY
		</isNotEmpty>		
	</select>
	
	<!-- 과거 수행(최종) 건수 -->
	<select id="jobLogHistoryListCnt" resultClass="JobLogBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobLogHistoryListCnt */
		SELECT count(*) as total_cnt FROM(
			SELECT TTT.* FROM(
  			
  			select *
  					, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_doc_master where doc_cd = susi_doc_cd)) as ins_nm1
  					, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_approval_doc where doc_cd = susi_doc_cd and seq = '1' and approval_cd = '02')) as approval_nm1
					, (select user_nm from $SCHEMA$.ez_user where user_cd = (select user_cd from $SCHEMA$.ez_approval_doc where doc_cd = susi_doc_cd and seq = '2' and approval_cd = '02')) as approval_nm2
  			from(
				SELECT A.start_time
			      		,A.end_time
			      		,A.rerun_counter
			      		,A.order_table
			      		,A.application
			      		,A.group_name
			      		,trim(A.job_name) AS job_name
			      		,trim(A.memname) AS memname
			      		,case WHEN A.DELETE_FLAG='1' THEN 'Deleted'
				                WHEN  RTRIM(A.STATE) like 'Held%' THEN 'Held' 
				               <!--  WHEN (A.STATUS='Wait Condition' AND trim(A.FROM_TIME) IS NOT NULL) THEN 'Wait Time' -->
				               ELSE A.STATUS END AS state_result
			           ,case WHEN RTRIM(A.STATE) like 'Held%' THEN 'Y' ELSE 'N' END AS holdflag 
			          
			          ,A.order_id
			          ,case when A.DELETE_FLAG='1' THEN 'Deleted'
			                ELSE trim(A.STATUS) END AS status
			          ,A.odate
			          ,A.state
			          ,A.job_id 
			          ,( CASE WHEN A.CRITICAL = '1' THEN 'Y' ELSE 'N' END ) AS critical_yn
			          ,A.cmd_line
			          , A.description
					  , B.user_nm, B.user_nm2, B.user_nm3, B.user_nm4, B.user_nm5, B.user_nm6
					  , B.user_nm7, B.user_nm8, B.user_nm9, B.user_nm10
					  , B.user_id, B.user_id2, B.user_id3, B.user_id4, B.user_id5, B.user_id6, B.user_id7, B.user_id8, B.user_id9, B.user_id10
					  , B.grp_nm_1, B.grp_nm_2
			          ,( SELECT dept_nm FROM $SCHEMA$.EZ_DEPT WHERE dept_cd = b.dept_cd) AS dept_nm
			          , (CASE WHEN COALESCE(TRIM(a.cpu_id),'')='' THEN  a.nodegroup ELSE a.cpu_id END) AS node_id
			          ,CASE WHEN a.status = 'Wait User' THEN 'WAIT' 
			      				WHEN a.status = 'Wait Condition' THEN 'WAIT' 
			      				WHEN a.status = 'Wait Resource' THEN 'WAIT'
			      				WHEN a.status = 'Wait Host' THEN 'WAIT' 
			      				WHEN a.status = 'Executing' THEN 'RUNNING' 
			      				WHEN a.status = 'Ended OK' THEN 'SUCCESS' 
							    WHEN a.status = 'Ended Not OK' THEN 'FAIL' 
							    ELSE 'ETC'  END AS state_result2
					  ,a.from_time AS 	time_from
					  ,a.to_time AS 	time_until
					  ,a.critical
					  ,b.jobschedgb
					  ,(select user_daily from def_tables where sched_table = a.order_table AND data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
																								     THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
																	 	   							 ELSE #data_center# END )) as user_daily
					  , (select doc_cd from $SCHEMA$.ez_doc_05 where job_name = a.job_name and order_id = a.order_id) as susi_doc_cd
					  , (select count(*) from $SCHEMA$.ez_doc_05 where job_name = a.job_name and order_id = a.order_id) as susi_cnt
					  
					<include refid="jobLogHistoryListInc" />
		
		ORDER BY odate, START_TIME desc
		
			)TTT
		) tb1
		
		WHERE 1 = 1
	</select>
	<sql id="jobGroupDefJobListInc">
		/* POSTGRE_M > jobGroupDefJobListInc */
		FROM DEF_JOB a 
			 LEFT OUTER JOIN ( SELECT table_id, job_id FROM $SCHEMA$.EZ_JOBGROUP_JOB 
			 					WHERE jobgroup_id = #jobgroup_id# 
			 					  AND data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
														     THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   							 ELSE #data_center# END ) ) c 
			 ON a.table_id = c.table_id AND a.job_id = c.job_id
		     , ( SELECT job, 
			        	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_nm,
				        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_nm2,
				        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_nm3,
				        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_nm4,
				        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_nm5,
				        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_nm6,
				        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_nm7,
				        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_nm8,
				        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_nm9,
				        ( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_nm10,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS user_id,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_2 ) AS user_id2,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_3 ) AS user_id3,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_4 ) AS user_id4,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_5 ) AS user_id5,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_6 ) AS user_id6,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_7 ) AS user_id7,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_8 ) AS user_id8,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_9 ) AS user_id9,
						( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_10 ) AS user_id10,
						error_description, ins_date,
			         	( SELECT dept_cd FROM $SCHEMA$.EZ_USER WHERE user_cd = tb1.user_cd_1 ) AS dept_cd, jobSchedGb
					   FROM $SCHEMA$.EZ_JOB_MAPPER  tb1 WHERE data_center = #data_center# ) d
		      , DEF_TABLES b
		where 1 = 1
		AND a.job_name = d.job
		AND a.table_id = b.table_id
		
		<!-- 그룹에 포함되어 있지 않은 작업 노출 -->
		AND c.table_id is null
		
		and b.data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )
        <!-- AND a.application != 'BMC-Script' -->
        AND a.task_type != 'SMART Table'
        AND a.task_type != 'Sub-Table'

		<isNotEmpty prepend="and" property="p_sched_table">
			sched_table in
			<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
				#p_search_text_folder_list[]# 
			</iterate>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def">
<!-- 			application in ($p_application_of_def$) -->
			application = #p_application_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def">
			group_name = #p_group_name_of_def#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_application_of_def_text">
			application = #p_application_of_def_text#
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_group_name_of_def_text">
		    group_name = #p_group_name_of_def_text#
		</isNotEmpty>
		<isEqual property="s_user_gb" compareValue="05">
			and d.dept_cd = $s_dept_cd$
		</isEqual>
		<isNotEmpty prepend="and" property="sub_table_of_def">
			CASE WHEN $SCHEMA$.INSTR(parent_table, '/', 1) = 0 THEN job_name 
		            ELSE SUBSTR(parent_table, $SCHEMA$.INSTR(parent_table, '/', 1)+1, LENGTH(parent_table)) || '/' || job_name END = #sub_table_of_def#
		</isNotEmpty>
		
		<isNotEmpty property="critical">
			<isEqual prepend="and" property="critical" compareValue="1">
				<!-- description = 'CRITICAL' -->
				critical = '1'
			</isEqual>
			<isNotEqual prepend="and" property="critical" compareValue="1">
				critical <![CDATA[ <> ]]> '1'
			</isNotEqual>
		</isNotEmpty>
		
		<!-- 조회조건 담당자/작업 정보 분리 22.08.25 김은희 -->
		<isNotEmpty prepend="and" property="p_search_text">
			<isEqual property="p_search_gubun" compareValue="user_nm">
				(
				user_nm like '%'||#p_search_text#||'%' or user_id = #p_search_text#
				or user_nm2 like '%'||#p_search_text#||'%' or user_id2 = #p_search_text#
				or user_nm3 like '%'||#p_search_text#||'%' or user_id3 = #p_search_text#
				or user_nm4 like '%'||#p_search_text#||'%' or user_id4 = #p_search_text#
				or user_nm5 like '%'||#p_search_text#||'%' or user_id5 = #p_search_text#
				or user_nm6 like '%'||#p_search_text#||'%' or user_id6 = #p_search_text#
				or user_nm7 like '%'||#p_search_text#||'%' or user_id7 = #p_search_text#
				or user_nm8 like '%'||#p_search_text#||'%' or user_id8 = #p_search_text#
				or user_nm9 like '%'||#p_search_text#||'%' or user_id9 = #p_search_text#
				or user_nm10 like '%'||#p_search_text#||'%' or user_id10 = #p_search_text#
				)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm1">
				(user_nm like '%'||#p_search_text#||'%' or user_id = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm2">
				(user_nm2 like '%'||#p_search_text#||'%' or user_id2 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm3">
				(user_nm3 like '%'||#p_search_text#||'%' or user_id3 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm4">
				(user_nm4 like '%'||#p_search_text#||'%' or user_id4 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm5">
				(user_nm5 like '%'||#p_search_text#||'%' or user_id5 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm6">
				(user_nm6 like '%'||#p_search_text#||'%' or user_id6 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm7">
				(user_nm7 like '%'||#p_search_text#||'%' or user_id7 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm8">
				(user_nm8 like '%'||#p_search_text#||'%' or user_id8 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm9">
				(user_nm9 like '%'||#p_search_text#||'%' or user_id9 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="user_nm10">
				(user_nm10 like '%'||#p_search_text#||'%' or user_id10 = #p_search_text#)
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="grp_nm1">
				(grp_nm_1 like '%'||#p_search_text#||'%' )
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="grp_nm2">
				(grp_nm_2 like '%'||#p_search_text#||'%' )
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="job_name">
				UPPER(job_name) like UPPER('%'||#p_search_text#||'%')
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="description">
				description like '%'||#p_search_text#||'%'
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="error_description">
				error_description like '%'||#p_search_text#||'%'
			</isEqual>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="p_search_text2">
			<!--<isEqual property="p_search_gubun2" compareValue="job_name">
				UPPER(job_name) like UPPER('%'||#p_search_text2#||'%')
			</isEqual>-->
			<!-- 작업명 다중 검색 -->
			<isEqual property="p_search_gubun2" compareValue="job_name">
				<isNotEmpty property="p_search_text2" open="(" close=")">
					<iterate property="p_search_job_name_list" conjunction="OR">
						UPPER(job_name) like UPPER('%'||#p_search_job_name_list[]#||'%')
					</iterate>
				</isNotEmpty>
			</isEqual>
			<isEqual property="p_search_gubun2" compareValue="description">
				description like '%'||#p_search_text2#||'%'
			</isEqual>
			<isEqual property="p_search_gubun" compareValue="error_description">
				error_description like '%'||#p_search_text2#||'%'
			</isEqual>
		</isNotEmpty>
		
		<isNotEmpty property="p_mcode_nm" prepend="AND">
			d.mcode_nm = #p_mcode_nm#
		</isNotEmpty>
		<isNotEmpty property="p_scode_nm" prepend="AND">
			d.scode_nm in ($p_scode_nm$)
		</isNotEmpty>
		<isNotEmpty property="p_moneybatchjob" prepend="AND">
			moneybatchjob = #p_moneybatchjob#
		</isNotEmpty>
		<isNotEmpty property="p_critical" prepend="AND">
			critical = #p_critical#
		</isNotEmpty>
		
	</sql>
	<!-- 수시작업 list 조회 쿼리 -->
	<select id="jobGroupDefJobList" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobGroupDefJobList */
			SELECT * 
			  FROM (	
			  		SELECT ttt.*
			  		  FROM (	
							
							SELECT  /*+no_merge leading(d) use_hash(d a b) */
									a.parent_table AS sched_table
									,a.TABLE_ID AS table_id
									,a.APPLICATION AS application
									,a.GROUP_NAME AS group_name
									,trim(a.JOB_NAME) AS job_name
									,trim(a.MEMNAME) AS memname
									,$SCHEMA$.NVL(a.FROM_TIME,'') AS from_time
									,$SCHEMA$.NVL(a.TO_TIME,'') AS to_time
									,CASE WHEN trim(a.DAYS_CAL) IS NULL THEN 'OTHER' ELSE a.DAYS_CAL END AS days_cal								
							        ,$SCHEMA$.NVL(a.DAY_STR,'') AS day_str
							        ,trim(a.CMD_LINE) AS cmd_line
							        ,CASE WHEN trim(a.W_DAY_STR) IS NULL THEN 'OTHER' ELSE a.W_DAY_STR END AS w_day_str
							        ,CASE WHEN trim(a.WEEKS_CAL) IS NULL THEN 'OTHER' ELSE a.WEEKS_CAL END AS weeks_cal	        
							        ,a.JOB_ID AS job_id
							        ,$SCHEMA$.NVL(a.MONTH_1,'0') || $SCHEMA$.NVL(a.MONTH_2,'0') || $SCHEMA$.NVL(a.MONTH_3,'0') || $SCHEMA$.NVL(a.MONTH_4,'0') || $SCHEMA$.NVL(a.MONTH_5,'0') || $SCHEMA$.NVL(a.MONTH_6,'0') || $SCHEMA$.NVL(a.MONTH_7,'0') || $SCHEMA$.NVL(a.MONTH_8,'0') || $SCHEMA$.NVL(a.MONTH_9,'0') || $SCHEMA$.NVL(a.MONTH_10,'0') || $SCHEMA$.NVL(a.MONTH_11,'0') || $SCHEMA$.NVL(a.MONTH_12,'0') AS monthstr
									,CASE WHEN a.cyclic = '1' THEN 'Y' ELSE 'N' END AS cyclic 
						         	,a.description
						         	,a.node_id AS node_grp
						         	,trim(a.dates_str) AS dates_str
									,user_nm
									,error_description
									,a.critical
									,to_char(d.ins_date,'YYYY-MM-DD HH24:MI:SS') ins_date
									,d.dept_cd
									,d.jobSchedGb
									,b.user_daily
									,b.data_center
									 
									<include refid="jobGroupDefJobListInc" />
									
							ORDER BY JOB_NAME DESC
						)TTT
				) tb1
				
				WHERE 1 = 1
				<isNotEmpty property="pagingNum">
					OFFSET $startRowNum$ ROWS FETCH FIRST $pagingNum$ ROWS ONLY
				</isNotEmpty>			
	</select>
	<select id="jobGroupDefJobListCnt" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > jobGroupDefJobListCnt */
			SELECT count(*) as total_cnt	
			  FROM (	
			  		SELECT ttt.*
			  		  FROM (	
							
							SELECT  /*+no_merge leading(d) use_hash(d a b) */
									a.parent_table AS sched_table
									,a.TABLE_ID AS table_id
									,a.APPLICATION AS application
									,a.GROUP_NAME AS group_name
									,trim(a.JOB_NAME) AS job_name
									,trim(a.MEMNAME) AS memname
									,$SCHEMA$.NVL(a.FROM_TIME,'') AS from_time
									,$SCHEMA$.NVL(a.TO_TIME,'') AS to_time
									,CASE WHEN trim(a.DAYS_CAL) IS NULL THEN 'OTHER' ELSE a.DAYS_CAL END AS days_cal								
							        ,$SCHEMA$.NVL(a.DAY_STR,'') AS day_str
							        ,trim(a.CMD_LINE) AS cmd_line
							        ,CASE WHEN trim(a.W_DAY_STR) IS NULL THEN 'OTHER' ELSE a.W_DAY_STR END AS w_day_str
							        ,CASE WHEN trim(a.WEEKS_CAL) IS NULL THEN 'OTHER' ELSE a.WEEKS_CAL END AS weeks_cal	        
							        ,a.JOB_ID AS job_id
							        ,$SCHEMA$.NVL(a.MONTH_1,'0') || $SCHEMA$.NVL(a.MONTH_2,'0') || $SCHEMA$.NVL(a.MONTH_3,'0') || $SCHEMA$.NVL(a.MONTH_4,'0') || $SCHEMA$.NVL(a.MONTH_5,'0') || $SCHEMA$.NVL(a.MONTH_6,'0') || $SCHEMA$.NVL(a.MONTH_7,'0') || $SCHEMA$.NVL(a.MONTH_8,'0') || $SCHEMA$.NVL(a.MONTH_9,'0') || $SCHEMA$.NVL(a.MONTH_10,'0') || $SCHEMA$.NVL(a.MONTH_11,'0') || $SCHEMA$.NVL(a.MONTH_12,'0') AS monthstr
									,CASE WHEN a.cyclic = '1' THEN 'Y' ELSE 'N' END AS cyclic 
						         	,a.description
						         	,a.node_id AS node_grp
						         	,trim(a.dates_str) AS dates_str
									,user_nm
									,a.critical
									,to_char(d.ins_date,'YYYY-MM-DD HH24:MI:SS') ins_date
									,d.dept_cd
									,d.jobSchedGb
									,b.user_daily

									<include refid="jobGroupDefJobListInc" />
									
							ORDER BY JOB_NAME DESC
						)TTT
				) tb1
				
				WHERE 1 = 1
						
	</select>

	<select id="activeJobListCnt" resultClass="DefJobBean" parameterClass="java.util.Map">
	/* POSTGRE_M > activeJobListCnt */
		SELECT count(job_id) as total_cnt
		FROM DEF_JOB tb1, DEF_TABLES tb2, $SCHEMA$.EZ_SCODE tb3
		WHERE 1=1
		AND tb1.table_id = tb2.TABLE_ID
		AND tb2.DATA_CENTER = tb3.scode_eng_nm
		AND tb3.scode_cd = #scode_cd#

		<isNotEmpty property="folder_nm">
			AND tb2.sched_table = #folder_nm#
		</isNotEmpty>

		<isNotEmpty property="application_nm">
			AND tb1.application = #application_nm#
		</isNotEmpty>

		<isNotEmpty property="group_nm">
			AND tb1.GROUP_NAME = #group_nm#
		</isNotEmpty>

	</select>

	<select id="resourceNMList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > resourceNMList */
		SELECT QRESNAME, QRTOTAL
		  FROM $SCHEMA$.EZ_RESOURCE
		 WHERE 1=1
		 and REPLACE(to_char(ins_date, 'YYYY/MM/DD HH24'), '/', '') between to_char(to_timestamp(REPLACE(#search_start_date#::text, '/', '')||' '||#search_start_time#::text, 'YYYYMMDD HH24'), 'YYYYMMDD HH24') and to_char(to_timestamp(REPLACE(#search_start_date#::text, '/', '')||' '||lpad(#search_end_time#::text, 2, '0'), 'YYYYMMDD HH24'), 'YYYYMMDD HH24')
		 AND data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )
		 <isNotEmpty property="search_text">
		 AND QRESNAME like '%'||#search_text#||'%'
		 </isNotEmpty>
		 GROUP BY QRESNAME, QRTOTAL
		 ORDER BY QRESNAME

	</select>

	<select id="resourceHHList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > resourceHHList */
		SELECT QRESNAME, QRTOTAL, MAX(INS_DATE) INS_DATE, to_char(INS_DATE, 'HH24') INS_DATE_HH
		  FROM $SCHEMA$.EZ_RESOURCE
		 WHERE 1=1
		 and REPLACE(to_char(ins_date, 'YYYY/MM/DD HH24'), '/', '') between to_char(to_timestamp(REPLACE(#search_start_date#::text, '/', '')||' '||#search_start_time#::text, 'YYYYMMDD HH24'), 'YYYYMMDD HH24') and to_char(to_timestamp(REPLACE(#search_start_date#::text, '/', '')||' '||lpad(#search_end_time#::text, 2, '0'), 'YYYYMMDD HH24'), 'YYYYMMDD HH24')
		 AND data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )
		 <isNotEmpty property="search_text">
		 AND QRESNAME like '%'||#search_text#||'%'
		 </isNotEmpty>

		 GROUP BY QRESNAME, QRTOTAL, to_char(INS_DATE, 'HH24')
		 ORDER BY QRESNAME

	</select>

	<!-- nodeTimeList -->
	<select id="resourceTimeList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* POSTGRE_M > resourceTimeList */
			SELECT * FROM( SELECT QRESNAME, QRTOTAL ,QRUSED,  to_char(INS_DATE, 'YYYY-MM-DD HH24:MI:SS') INS_DATE, data_center, to_char(INS_DATE, 'YYYY-MM-DD HH24:MI') INS_DATE_HH
		  FROM $SCHEMA$.EZ_RESOURCE
		WHERE 1=1
		 AND data_center = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )
		 and REPLACE(to_char(ins_date, 'YYYY/MM/DD HH24'), '/', '') between to_char(to_timestamp(REPLACE(#search_start_date#::text, '/', '')||' '||#search_start_time#::text, 'YYYYMMDD HH24'), 'YYYYMMDD HH24') and to_char(to_timestamp(REPLACE(#search_start_date#::text, '/', '')||' '||lpad(#search_end_time#::text, 2, '0'), 'YYYYMMDD HH24'), 'YYYYMMDD HH24')
		 ORDER BY INS_DATE desc) t1
		where 1=1
		 <isNotEmpty property="search_text">
		 AND QRESNAME like '%'||#search_text#||'%'
		 </isNotEmpty>

	 	ORDER BY INS_DATE asc
	</select>
	
	<!-- batchReport(배치마감보고서) -->
	<select id="batchReport" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* POSTGRE_M > batchReport */
	SELECT * FROM(
			SELECT ROW_NUMBER() OVER() AS row_num
			  data_center
			, order_table as table_name
			, application
			, odate
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended OK' THEN 1 ELSE 0 END) as ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Ended Not OK' THEN 1 ELSE 0 END) as not_ok_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Executing' THEN 1 ELSE 0 END) as exec_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Wait User' THEN 1 ELSE 0 END) as wait_user_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Wait Resource' THEN 1 ELSE 0 END) as wait_resource_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Wait Host' THEN 1 ELSE 0 END) as wait_host_cnt
			, SUM(CASE WHEN delete_flag != '1' AND status='Wait Condition' THEN 1 ELSE 0 END) as wait_condition_cnt
           	, SUM(CASE WHEN delete_flag = '1' THEN 1 ELSE 0 END) as delete_cnt
			, SUM(CASE WHEN status='total' THEN 0 ELSE 1 END) AS total_cnt
			 FROM(
			
			<isNotEmpty property="data_center">
			select * from(
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, tb1.order_table
				, tb1.application
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				  FROM $active_net_name$JOB tb1
				WHERE 1=1
				 <include refid="batchResultTotalList2Inc" />
				
				UNION ALL
				
				SELECT (select scode_nm from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_eng_nm = ( CASE WHEN $SCHEMA$.INSTR(#data_center#, ',') > 0
									THEN SUBSTR(#data_center#, $SCHEMA$.INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	   ELSE #data_center# END )) as data_center
				, tb1.order_table
				, tb1.application
				, tb1.odate
				, tb1.status
				, tb1.delete_flag
				, tb1.job_name
				FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ tb1
				WHERE 1=1
				AND tb1.ORDER_ID NOT IN (select s.order_id from $active_net_name$JOB s)

				 <include refid="batchResultTotalList2Inc" />
				 
				  ) t1
			</isNotEmpty>
			
			<isEmpty property="data_center">
				<include refid="batchResultTotalList2IncAll" />
			</isEmpty>
  			
				)TTT
			 GROUP 	BY data_center, order_table, application, odate
			 ORDER  BY data_center, order_table, application, odate
			) tb1
			where 1=1
			
			<isNotEmpty property="startRowNum">
				and row_num between #startRowNum# and #endRowNum#
			</isNotEmpty>
			
	</select>

	<select id="jobLogInfoList" resultClass="JobLogBean" parameterClass="java.util.Map">
		/* POSTGRE_M > jobLogInfoList */
		select 
			data_center
			, order_id
			, node_id
			, job_name
			, odate
			, rerun_counter
			, appl_type 
		from $SCHEMA$.ez_runinfo_history
		where sysout_yn = 'N'
			and node_id = #node_id#

	</select>


	<select id="jobSysout" resultClass="JobLogBean" parameterClass="java.util.Map">
		/* POSTGRE_M > jobSysout */
		select sysout  
		from $SCHEMA$.ez_runinfo_history
		where sysout_yn = 'Y'
			and order_id = #order_id#
			and rerun_counter = #rerun_count#::integer
	</select>

</sqlMap>