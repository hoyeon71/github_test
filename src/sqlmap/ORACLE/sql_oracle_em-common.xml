<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap
	PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
	"http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="ORACLE_Common">

	<typeAlias alias="CommonBean" 				type="com.ghayoun.ezjobs.comm.domain.CommonBean" />
	<typeAlias alias="AlertBean" 				type="com.ghayoun.ezjobs.a.domain.AlertBean" />
	<typeAlias alias="DocInfoBean" 				type="com.ghayoun.ezjobs.t.domain.DocInfoBean" />
	<typeAlias alias="BatchResultTotalBean" 	type="com.ghayoun.ezjobs.m.domain.BatchResultTotalBean" />
	<typeAlias alias="UserBean" 				type="com.ghayoun.ezjobs.t.domain.UserBean" />
	<typeAlias alias="BoardBean" 				type="com.ghayoun.ezjobs.comm.domain.BoardBean" />
	<typeAlias alias="HolidayBean" 				type="com.ghayoun.ezjobs.comm.domain.HolidayBean" />
	<typeAlias alias="AppGrpBean" 				type="com.ghayoun.ezjobs.comm.domain.AppGrpBean" />
	<typeAlias alias="CalCodeBean" 				type="com.ghayoun.ezjobs.comm.domain.CalCodeBean" />
	<typeAlias alias="JobMapperBean" 			type="com.ghayoun.ezjobs.t.domain.JobMapperBean" />
	<typeAlias alias="Doc06Bean" 				type="com.ghayoun.ezjobs.t.domain.Doc06Bean" />
	<typeAlias alias="JobDefineInfoBean" 		type="com.ghayoun.ezjobs.m.domain.JobDefineInfoBean" />
	<typeAlias alias="CtmInfoBean" 				type="com.ghayoun.ezjobs.m.domain.CtmInfoBean" />
	<typeAlias alias="BatchTotalBean" 			type="com.ghayoun.ezjobs.m.domain.BatchTotalBean" />
	<typeAlias alias="DocApprovalTotalBean"		type="com.ghayoun.ezjobs.m.domain.DocApprovalTotalBean" />
	<typeAlias alias="JobCondTotalBean"			type="com.ghayoun.ezjobs.m.domain.JobCondTotalBean" />
	<typeAlias alias="ErrorLogTotalBean"		type="com.ghayoun.ezjobs.m.domain.ErrorLogTotalBean" />
		
	<select id="odateList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > odateList */
	SELECT odate, '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) AS view_odate
	  FROM (
			select distinct u.odate
			from (
			<![CDATA[
				  SELECT SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDD'), 3, 2) || SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDD'), 5, 2) || SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDD'), 7, 2) AS odate
      			  FROM dual
			]]>
				<isNotEmpty property="active_net_names">
					UNION ALL 
					
					<iterate property="active_net_names" conjunction=" UNION ALL ">
						SELECT  distinct odate FROM $active_net_names[]$job 
					</iterate>
					
				</isNotEmpty>
				
				<isNotEmpty property="data_center_code">
					UNION ALL 
				
					<iterate property="data_center_code" conjunction=" UNION ALL ">
						SELECT  distinct odate FROM $SCHEMA$.EZ_HISTORY_$data_center_code[]$
					</iterate>
					
				</isNotEmpty>
				
			) u
		) t order by odate desc
	</select>
	
	<select id="odatePostList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > odatePostList */
	<![CDATA[
	SELECT odate, '20' || SUBSTR(odate, 0, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) AS view_odate
	  FROM (
			SELECT 
				to_char( (TO_DATE (to_char(sysdate+1,'YYYYMMDD'), 'YYYYMMDD') + LEVEL - 1),'YYMMDD') as odate
			FROM DUAL 
			CONNECT BY (TO_DATE (to_char(sysdate+1,'YYYYMMDD'), 'YYYYMMDD') + LEVEL - 1) <= TO_DATE(to_char(sysdate+30,'YYYYMMDD'), 'YYYYMMDD')
			order by odate )
	]]>
	</select>

	<!-- dataCenterList -->
	<select id="dataCenterList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dataCenterList */
	<![CDATA[
		SELECT distinct A.CODE AS DATA_CENTER_CODE, A.DATA_CENTER, 'A'||A.ACTIVE_NET_NAME AS ACTIVE_NET_NAME, B.scode_cd
				, SUBSTR(A.CTM_DAILY_TIME,2) AS CTM_DAILY_TIME, to_char(sysdate,'HH24MI') AS CHECK_TIME
		  FROM COMM A, $SCHEMA$.EZ_SCODE B
		 WHERE A.DATA_CENTER = B.SCODE_ENG_NM
		   AND B.MCODE_CD = #mcode_cd#
		   AND B.SCODE_USE_YN = 'Y'
		 ORDER BY A.CODE ASC
	]]>
	</select>
	
	<!-- applicationlist -->
	<select id="applicationList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > applicationList */
		SELECT DISTINCT application
		FROM ( 
			SELECT DISTINCT APPLICATION
         	FROM $active_net_name$JOB
          	WHERE 1=1 
            AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) = #odate#
        	UNION 
        	SELECT DISTINCT APPLICATION
        	FROM $SCHEMA$.EZ_HISTORY_$data_center_code$
          	WHERE 1=1 
            AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) = #odate#
        ) tb1
        where 1=1 
        
        <!-- 
        <isEqual property="sc" compareValue="ez041">
			and application  not in ('ONBT_CORAP1','ONBT_INFAP1','COR_RG_CC')
		</isEqual>
         -->
         
    	ORDER BY APPLICATION 
	</select>
	
	<!-- groupNameList -->
	<select id="groupNameList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > groupNameList */
		SELECT DISTINCT group_name 
		FROM ( 
			SELECT DISTINCT GROUP_NAME 
			FROM $active_net_name$JOB 
			WHERE 1=1 
			AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) = #odate#
			<!-- AND application = #application# -->
			UNION 
			SELECT DISTINCT GROUP_NAME 
			FROM $SCHEMA$.EZ_HISTORY_$data_center_code$
			WHERE 1=1 
			AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) = #odate#
			<!-- AND application = #application# -->
			) tb1
		ORDER BY GROUP_NAME
	</select>
	
	<!-- monthTableList -->
	<select id="monthTableList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > monthTableList */
		SELECT DISTINCT order_table
		FROM ( 
			SELECT DISTINCT order_table
         	FROM $active_net_name$JOB
          	WHERE 1=1 
        	UNION 
        	SELECT DISTINCT order_table
        	FROM $SCHEMA$.EZ_HISTORY_$data_center_code$
          	WHERE 1=1 
        ) tb1
        where 1=1 
    	ORDER BY order_table 
	</select>	
	
	<!-- monthApplicationlist -->
	<select id="monthApplicationList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > monthApplicationList */
		SELECT DISTINCT application
		FROM ( 
			SELECT DISTINCT APPLICATION
         	FROM $active_net_name$JOB
          	WHERE 1=1 
        	UNION 
        	SELECT DISTINCT APPLICATION
        	FROM $SCHEMA$.EZ_HISTORY_$data_center_code$
          	WHERE 1=1 
        ) tb1
        where 1=1 
    	ORDER BY APPLICATION 
	</select>
	
	<!-- monthGroupNameList -->
	<select id="monthGroupNameList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > monthGroupNameList */
		SELECT DISTINCT group_name 
		FROM ( 
			SELECT DISTINCT GROUP_NAME 
			FROM $active_net_name$JOB 
			WHERE 1=1 
			<!-- AND application = #monthApplication# -->
			UNION 
			SELECT DISTINCT GROUP_NAME 
			FROM $SCHEMA$.EZ_HISTORY_$data_center_code$
			WHERE 1=1 
			<!-- AND application = #monthApplication# -->
			) tb1
		ORDER BY GROUP_NAME 
	</select>
	
	
	<!-- schedTableList -->
	<select id="schedTableList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > schedTableList */
	<![CDATA[
		SELECT sched_table 
		FROM DEF_TABLES 
		WHERE DATA_CENTER = #data_center#
		ORDER BY sched_table
	]]>
	</select>
	
	<!-- applicationOfDefList -->
	<select id="applicationOfDefList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > applicationOfDefList */
		SELECT  DISTINCT application as application_of_def 
		FROM DEF_JOB
		
		<isNotNull property="sched_table">
 			WHERE table_id in (SELECT TABLE_ID FROM DEF_TABLES WHERE SCHED_TABLE = #sched_table# ) 
 		</isNotNull> 
		
		ORDER BY application	
	</select>
	
	<!-- groupNameOfDefList -->
	<select id="groupNameOfDefList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > groupNameOfDefList */
		SELECT  DISTINCT group_name as group_name_of_def 
		FROM DEF_JOB 
		WHERE APPLICATION = #application_of_def#
		
		ORDER BY group_name		
	</select>
	
	<!-- calendarList -->
	<select id="calendarList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > calendarList */
	<![CDATA[
		select distinct calendar
		from df_calendar
		where 1 = 1
		
	]]>
	<isNotEmpty prepend="and" property="data_center">
		 data_center = ( CASE WHEN INSTR(#data_center#, ',') > 0
								   THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
								   ELSE #data_center# END )
    </isNotEmpty>
		order by calendar
	</select>
	
	<!-- nodeIdList -->
	<select id="nodeIdList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > nodeIdList */
	<![CDATA[
		select
			distinct node_id
		from def_job 
		where node_id is not null
	]]>
	</select>
	
	<!-- jobNameList -->
	<select id="jobNameList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > jobNameList */
		SELECT distinct job_name
		  FROM DEF_JOB
	     WHERE 1 = 1
	     
	   	<isNotEmpty prepend="and" property="auto_job_name">
			job_name LIKE '%'||#auto_job_name#||'%'
		</isNotEmpty>
		
	</select>
	
	<select id="userDailyList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > userDailyList */
	<![CDATA[
		select distinct * from
		(
			select 'SYSTEM' AS user_daily
			from dual
			union all
			select 
			   t1.user_daily AS user_daily
			from def_tables t1
			where 1=1
			and t1.data_center = #data_center#
			and trim(user_daily) is not null
		) t
	
	]]>
	</select>
	
	<!-- calendarDetail -->
	<select id="calendarDetail" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > calendarDetail */
	<![CDATA[
		select
			days_1
			,days_2
			,description
		from df_years
		where data_center = ( CASE WHEN INSTR(#data_center#, ',') > 0
								   THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
								   ELSE #data_center# END )
		and calendar = #calendar#
		and year = #year#
	]]>
	</select>
	
	<!-- calendarYearList -->
	<select id="calendarYearList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > calendarYearList */
		select
			year
		from df_years
		where 1=1
		group by year
		order by year asc
	</select>
	
	<!-- hostList -->
	<select id="hostList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > hostList */
		select TTT.* from(
		
		select * FROM (
			select 	host_cd,
					( CASE WHEN INSTR(data_center, ',') > 0 
							THEN (SELECT scode_nm FROM $SCHEMA$.EZ_SCODE WHERE scode_cd = SUBSTR(data_center, 1, INSTR(data_center, ',')-1)) 
						   ELSE data_center END ) AS data_center_name,
					data_center,
					agent AS node_id,
					agent_nm AS node_nm,
					agent_id,
					agent_pw,		
					file_path,
					access_gubun,
					access_port,
					server_gubun,
					server_lang,
					certify_gubun
			 from 	$SCHEMA$.EZ_host
			where 	1=1
			
			<isNotEmpty prepend="and" property="data_center">
				data_center = #data_center#
			</isNotEmpty>
			
			) tb1
			WHERE 1 = 1
	
		<isNotEmpty prepend="and" property="p_search_text">			
			<isEqual property="p_search_gubun" compareValue="agent">
				node_id like '%'||#p_search_text#||'%'
			</isEqual>
		</isNotEmpty>
		
		<isNotEmpty prepend="and" property="host_cd">
			host_cd = $host_cd$
		</isNotEmpty>
		
		<!-- 폴더권한 수행서버조회(22.08.01 김은희) -->
		<isNotEmpty prepend="and" property="grp_eng_nm">
			host_cd in (select host_cd from $SCHEMA$.ez_app_grp_code where (grp_depth = 1) and grp_eng_nm = #grp_eng_nm#)
		</isNotEmpty>
		
		<isNotEmpty property="host_nm" prepend="and">
			node_id like '%'||#host_nm#||'%'
		</isNotEmpty>
		
		order by data_center, node_id
		
		) TTT
	</select>
	
	
	<select id="SearchHostList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > SearchHostList */
	<![CDATA[
		select TTT.* from(
		
		select 	host_cd,
				data_center, 
				agent AS node_id,
				agent_nm AS node_nm,
				agent_id,
				agent_pw,		
				file_path,
				access_gubun,
				access_port,
				server_gubun		
		 from 	$SCHEMA$.EZ_host
		where 	1=1
	]]>
		<isNotEmpty prepend="and" property="data_center">
			data_center = #data_center#
		</isNotEmpty>
		
		and access_port is not null
		
		order by data_center, agent
		
		) TTT
	</select>
	
	<!-- hostInfo -->
	<select id="hostInfo" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > hostInfo */
	<![CDATA[
		select
			host_cd,
			data_center, 
			agent AS node_id, 
			agent_nm AS node_nm,			 
			agent_id,
			agent_pw,		
			file_path,
			access_gubun,
			access_port,
			server_gubun,
			server_lang,
			certify_gubun
		from $SCHEMA$.EZ_host
		where 1=1
	]]>
		<isNotEmpty prepend="and" property="data_center">
			data_center = #data_center#
		</isNotEmpty>
		
		<isNotEmpty prepend="and" property="host">
			<isNotEqual property="server_gubun" compareValue="S">
					UPPER(agent) = UPPER(#host#)
			</isNotEqual>
		</isNotEmpty>
		<isNotEmpty property="server_gubun">
			<isEqual property="server_gubun" compareValue="S">
				AND server_gubun = #server_gubun#
			</isEqual>
			<isEqual property="server_gubun" compareValue="E">
				AND server_gubun = #server_gubun#
			</isEqual>
			<isEqual property="server_gubun" compareValue="A">
				AND server_gubun = (CASE WHEN (SELECT COUNT(*) FROM $SCHEMA$.EZ_HOST WHERE data_center = #data_center# AND agent = #host# AND server_gubun = 'A') > 0 THEN 'A'
				     					 ELSE 'S' END) 
			</isEqual>
		</isNotEmpty>
		
		
		<isEqual property="forecast" compareValue="Y">
			and substr(data_center, 1, INSTR(data_center, ',')-1) = (select scode_cd from $SCHEMA$.ez_scode where mcode_cd = 'M6' and scode_use_yn = 'Y' and scode_nm like '%EXPERT')
		</isEqual>
		
	</select>
	
	
	<select id="SearcHostInfo" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > SearcHostInfo */
	<![CDATA[
		select
			data_center, 
			agent AS node_id, 
			agent_nm AS node_nm,			 
			agent_id,
			agent_pw,		
			file_path,
			access_gubun,
			access_port,
			server_gubun
		from $SCHEMA$.EZ_host
		where 1=1
		and access_port is not null
	]]>
	</select>
	
	<update id="grpHostInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > grpHostInsert */
		MERGE INTO $SCHEMA$.EZ_GRP_HOST
		USING DUAL ON (GRP_CD = #grp_cd# AND HOST_CD = #host_cd#)
		WHEN MATCHED THEN
			UPDATE SET INS_DATE = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), INS_USER_CD = #s_user_cd#
		WHEN NOT MATCHED THEN
			INSERT(GRP_CD, HOST_CD, INS_DATE, INS_USER_CD)
			VALUES(#grp_cd#, #host_cd#, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), #s_user_cd# )
		<!-- 	VALUES(#grp_cd#, #host_cd#, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), #s_user_cd# where not exists (select 1 from upsert u where GRP_CD = $grp_cd$ and HOST_CD = $host_cd$ ) -->
	</update>
	<delete id="grpHostDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > grpHostDelete */
		DELETE FROM $SCHEMA$.EZ_GRP_HOST 
		WHERE 
			GRP_CD = $grp_cd$ 
			<isNotEmpty property="host_cd" prepend="AND">
				HOST_CD = $host_cd$
			</isNotEmpty>
	</delete>
	
	<!-- spHostPrc -->
	<parameterMap id="spHostPrcMap" class="java.util.Map">
		<parameter property="r_code" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		<parameter property="r_msg" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		
		<parameter property="flag" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="host_cd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="data_center" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="agent" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="agent_nm" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="agent_id" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="agent_pw" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />		
		<parameter property="file_path" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="access_gubun" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="access_port" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="server_gubun" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />		
		<parameter property="server_lang" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />	
		<parameter property="grp_cd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="owner" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />		
		<parameter property="certify_gubun" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />	
		
		<parameter property="s_user_cd" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="s_user_ip" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
	</parameterMap>
	<procedure id="spHostPrc" resultClass="java.util.List" parameterMap="spHostPrcMap">
		{ call $SCHEMA$.SP_EZ_HOST_PRC	( 	?, ?, ?, ?, ?, 
											?, ?, ?, ?, ?, 
											?, ?, ?, ?, ?,
											?, ?, ?, ?
										) 
		}
	</procedure>
	
	<select id="sCodeList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > sCodeList */
		SELECT SCODE_NM, SCODE_DESC, SCODE_ENG_NM, SCODE_CD
		  FROM $SCHEMA$.EZ_SCODE 
		 WHERE mcode_cd = #mcode_cd#

		<isNotEmpty property="scode_eng_nm">
			AND SCODE_ENG_NM = #scode_eng_nm#
		</isNotEmpty>

		 ORDER BY order_no ASC
	</select>
	
	<!-- defJobCnt -->
	<select id="defJobCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > defJobCnt */
		SELECT COUNT(*) AS total_count FROM DEF_JOB WHERE job_name = #job_name#
	</select>
	
	<select id="dataCenterInfo" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dataCenterInfo */	
			SELECT tb1.code as data_center_code,
		       tb1.data_center,
		       'A'||tb1.active_net_name as active_net_name,
		       SUBSTR(tb2.scode_nm, 5, 7) AS data_center_name,
		       SUBSTR(ctm_odate, 3, 6) AS ctm_odate		       
		  FROM COMM tb1, $SCHEMA$.EZ_SCODE tb2
		 WHERE tb2.mcode_cd = 'M6'
		   AND tb1.data_center = tb2.scode_eng_nm
		   
			<isNotEmpty property="data_center_code">
				AND tb1.code = #data_center_code#
			</isNotEmpty>
		   
		   	<isNotEmpty property="data_center">
				<!-- AND tb1.data_center = #data_center# -->
				
				AND tb1.data_center = ( CASE WHEN INSTR(#data_center#, ',') > 0
 												THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
											 ELSE #data_center# END )
				
			</isNotEmpty>
			
	</select>

	<select id="dataCenterCode" parameterClass="java.util.Map" resultClass="java.lang.String">
	/* ORACLE_Common > dataCenterCode */
		SELECT tb1.code as data_center_code
		FROM COMM tb1, $SCHEMA$.EZ_SCODE tb2
		WHERE tb1.DATA_CENTER = tb2.SCODE_ENG_NM
		AND tb2.MCODE_CD = 'M6'
		AND tb2.SCODE_USE_YN = 'Y'

		<isNotEmpty property="data_center">
			AND tb1.data_center = ( CASE WHEN INSTR(#data_center#, ',') > 0
			THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
			ELSE #data_center# END )
		</isNotEmpty>

	</select>

	<select id="dataCenterInfoAjob" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dataCenterInfoAjob */	
		SELECT A.CODE AS DATA_CENTER_CODE, A.DATA_CENTER, 'A'||A.ACTIVE_NET_NAME AS ACTIVE_NET_NAME
		  FROM COMM A, $SCHEMA$.EZ_SCODE B
		 WHERE A.DATA_CENTER = B.SCODE_ENG_NM
		   AND B.MCODE_CD = 'M6'
		   AND B.SCODE_USE_YN = 'Y'
		
		<isNotEmpty property="data_center">
			AND A.data_center = ( CASE WHEN INSTR(#data_center#, ',') > 0
									    THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	       ELSE #data_center# END )
		</isNotEmpty>
		
		GROUP BY A.CODE, A.DATA_CENTER, A.ACTIVE_NET_NAME
		
	</select>
	
	
	
	
	
	<!-- applicationFromToList -->
	<select id="applicationFromToList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > applicationFromToList */
		SELECT DISTINCT application
		FROM ( 
			SELECT DISTINCT APPLICATION
         	FROM $active_net_name$JOB
          	WHERE 1=1 

			<isNotEmpty property="from_odate">
	    		AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) >= #from_odate#
			</isNotEmpty>
			<isNotEmpty property="to_odate">
	    		AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) <![CDATA[ <= ]]> #to_odate#
			</isNotEmpty>            

        	UNION all
        	SELECT DISTINCT APPLICATION
        	FROM $SCHEMA$.EZ_HISTORY_$data_center_code$
          	WHERE 1=1
          	
          	<isNotEmpty property="from_odate">
	    		AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) >= #from_odate#
			</isNotEmpty>
			<isNotEmpty property="to_odate">
	    		AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) <![CDATA[ <= ]]> #to_odate#
			</isNotEmpty>  
        ) tb1
        where 1=1 
		
		ORDER BY APPLICATION 
	 
	</select>
	
	<!-- groupNameFromToList -->
	<select id="groupNameFromToList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > groupNameFromToList */
		SELECT DISTINCT group_name 
		FROM ( 
			SELECT DISTINCT GROUP_NAME 
			FROM $active_net_name$JOB 
			WHERE 1=1 
			
			<isNotEmpty property="from_odate">
	    		AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) >= #from_odate#
			</isNotEmpty>
			<isNotEmpty property="to_odate">
	    		AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) <![CDATA[ <= ]]> #to_odate#
			</isNotEmpty>
			
			AND application = #applicationFromTo#
			UNION all
			SELECT DISTINCT GROUP_NAME 
			FROM $SCHEMA$.EZ_HISTORY_$data_center_code$
			WHERE 1=1

			<isNotEmpty property="from_odate">
	    		AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) >= #from_odate#
			</isNotEmpty>
			<isNotEmpty property="to_odate">
	    		AND '20' || SUBSTR(odate, 1, 2) || '/' || SUBSTR(odate, 3, 2) || '/' || SUBSTR(odate, 5, 2) <![CDATA[ <= ]]> #to_odate#
			</isNotEmpty>			
 
			AND application = #applicationFromTo#
			) tb1
		ORDER BY GROUP_NAME
	</select>
	
	<!-- EZ_HISTORY_CNT -->
	<select id="EZ_HISTORY_CNT" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > EZ_HISTORY_CNT */
		SELECT 
	    	   (SELECT COUNT(*) FROM $active_net_name$) AS total_ajob_cnt,
	    	   (SELECT COUNT(*) 
	              FROM $active_net_name$ tb1
	              JOIN $SCHEMA$.ez_history_$data_center_code$ tb2
	                ON tb1.order_id = tb2.order_id AND tb1.job_name = tb2.job_name) AS matched_cnt
		  FROM dual
	</select>
	
	<!-- aJobList -->
	<select id="aJobList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > aJobList */
		SELECT tname AS active_net_name FROM TAB WHERE tname LIKE #active_net_name# ORDER BY tname DESC
	</select>
	
	<!-- aJobGrantAuth -->
	<select id="aJobGrantAuth" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > aJobGrantAuth */
		grant SELECT ON $active_net_name$ TO $SCHEMA$
	</select>
	
	<select id="aInGrantAuth" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > aInGrantAuth */
		grant SELECT ON $in_name$ TO $SCHEMA$
	</select>

	<select id="aOutGrantAuth" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > aOutGrantAuth */
		grant SELECT ON $out_name$ TO $SCHEMA$
	</select>
	
	<select id="aSetVarAuth" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > aSetVarAuth */
		grant SELECT ON $setvar$ TO $SCHEMA$
	</select>

	<!-- Quartz -->
	<parameterMap id="spQuartzPrcMap" class="java.util.Map">
		<parameter property="r_code" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		<parameter property="r_msg" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		<parameter property="r_cnt" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		
		<parameter property="flag" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="data_center_code" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="active_net_name" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />		
		<parameter property="doc_cd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="fail_comment" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
				
		<parameter property="job_name"	 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="odate" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="result" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="result_time" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="result_hp" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		
		<parameter property="org_cd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="org_nm" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="org_nm_eng" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="bos_emp_no" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="emp_no" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		
		<parameter property="emp_nm" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="state_cd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="in_email" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="duty_cd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="duty_nm" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		
		<parameter property="sta_ymd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="end_ymd" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="quartz_name" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="trace_log_path" 	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="status_cd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		
		<parameter property="status_log" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="data_center" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />

		<parameter property="s_user_cd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="s_user_ip" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
	</parameterMap>
	<procedure id="spQuartzPrc" resultClass="java.util.List" parameterMap="spQuartzPrcMap">
		{ call $SCHEMA$.SP_QUARTZ_PRC( 	?, ?, ?, 
										?, ?, ?, ?, ?, 
										?, ?, ?, ?, ?,
										?, ?, ?, ?, ?,
										?, ?, ?, ?, ?,
										?, ?, ?, ?, ?,
										?, ?, ?, ?
									) 
		}
	</procedure>
	
	<!-- parentSchedTableList -->
	<select id="parentSchedTableList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > parentSchedTableList */
		SELECT tb1.sched_table, CASE WHEN tb2.table_type = 2 THEN 'SMART' ELSE 'REGUR' END AS table_type
		  FROM (
				SELECT tb1.parent_table AS sched_table
				  FROM (
				        SELECT CASE WHEN INSTR(parent_table ,'/') > 0 THEN SUBSTR(parent_table, 0, INSTR(parent_table, '/')) ELSE parent_table END AS parent_table
				          FROM DEF_JOB
				         WHERE table_id IN ( SELECT table_id FROM DEF_TABLES WHERE DATA_CENTER = #data_center#
				        
				      	<isEqual prepend="AND" property="job_gubun" compareValue="SMART Table">
				      		<!--  (task_type = 'SMART Table' OR task_type = 'Sub-Table') -->
				      		(task_type = 'SMART Table')
				      	</isEqual>
				           
				            ) ) tb1 
				 GROUP BY tb1.parent_table ) tb1, DEF_TABLES tb2, $SCHEMA$.EZ_USER_FOLDER tb3
		 WHERE tb1.sched_table = tb2.sched_table
		 and tb1.sched_table = tb3.folder_auth
	     and tb3.user_cd = #s_user_cd#
		 ORDER BY tb1.sched_table
	</select>
	
	<!-- subSchedTableList -->
	<select id="subSchedTableList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > subSchedTableList */
	<![CDATA[
		SELECT sub_table
		  FROM (
			SELECT SUBSTR(SUBSTR(parent_table, LENGTH((STRING_TO_ARRAY(parent_table, '/'))[1])+1, LENGTH(parent_table) ) || '/' || job_name, 2, 1000) AS sub_table
			,CASE WHEN (STRING_TO_ARRAY(parent_table, '/'))[2] IS NULL THEN job_name ELSE (STRING_TO_ARRAY(parent_table, '/'))[2] END AS temp_table
		
				     FROM DEF_JOB tb1
				    WHERE (STRING_TO_ARRAY(parent_table, '/'))[1] = #sched_table# 
				      AND tb1.task_type = 'Sub-Table'
				    ORDER BY parent_table ) tb1
		 ORDER BY temp_table, sub_table
	]]>
	</select>
	
	<select id="smsAlarmList" resultClass="AlertBean" parameterClass="java.util.Map">
	/* ORACLE_Common > smsAlarmList */
	SELECT 
				tb1.job_name
			, 	tb1.host_time
			, 	tb1.order_id
			, 	tb1.serial
			,	tb2.user_cd_1
			,	tb2.user_cd_2
			,	tb2.user_cd_3
			,	tb2.user_cd_4
			,	tb2.user_cd_5
			,	tb2.user_cd_6
			,	tb2.user_cd_7
			,	tb2.user_cd_8
			,	tb2.user_cd_9
			,	tb2.user_cd_10
			,	tb2.grp_cd_1
			,	tb2.grp_cd_2
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_1 ) AS user_id
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_2 ) AS user_id2
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_3 ) AS user_id3
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_4 ) AS user_id4
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_5 ) AS user_id5
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_6 ) AS user_id6
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_7 ) AS user_id7
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_8 ) AS user_id8
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_9 ) AS user_id9
			,	( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_10 ) AS user_id10
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_1 ) AS user_hp
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_2 ) AS user_hp2
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_3 ) AS user_hp3
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_4 ) AS user_hp4
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_5 ) AS user_hp5
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_6 ) AS user_hp6
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_7 ) AS user_hp7
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_8 ) AS user_hp8
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_9 ) AS user_hp9
			, 	( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_10 ) AS user_hp10
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_1 ) AS user_email
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_2 ) AS user_email2
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_3 ) AS user_email3
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_4 ) AS user_email4
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_5 ) AS user_email5
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_6 ) AS user_email6
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_7 ) AS user_email7
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_8 ) AS user_email8
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_9 ) AS user_email9
		    , 	( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_10 ) AS user_email10
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_1 ) AS user_nm
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_2 ) AS user_nm2
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_3 ) AS user_nm3
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_4 ) AS user_nm4
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_5 ) AS user_nm5
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_6 ) AS user_nm6
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_7 ) AS user_nm7
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_8 ) AS user_nm8
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_9 ) AS user_nm9
		    , 	( SELECT user_nm FROM $SCHEMA$.EZ_USER WHERE user_cd = tb2.user_cd_10 ) AS user_nm10
	       	, 	tb2.sms_1
	       	, 	tb2.sms_2
	       	, 	tb2.sms_3
	       	, 	tb2.sms_4
	       	, 	tb2.sms_5	
	       	, 	tb2.sms_6	
	       	, 	tb2.sms_7	
	       	, 	tb2.sms_8		       	
	       	,   tb2.sms_9
			,   tb2.sms_10
			,	tb2.grp_sms_1
			,	tb2.grp_sms_2
	       	, 	tb2.mail_1
	       	, 	tb2.mail_2
	       	, 	tb2.mail_3
	       	, 	tb2.mail_4
	       	, 	tb2.mail_5
	       	, 	tb2.mail_6
	       	, 	tb2.mail_7
	       	, 	tb2.mail_8
	       	, 	tb2.mail_9
			, 	tb2.mail_10
			,	tb2.grp_mail_1
			,	tb2.grp_mail_2
	       	, 	tb1.message as msg
	       	,	tb2.data_center
	       	,	tb1.application
	       	,	tb1.group_name
	       	,	tb2.late_sub
	       	, 	tb2.late_time
	       	, 	tb2.late_exec
	       	,	tb1.message
	       	,	tb1.run_counter
	       	,	tb2.user_cd_1 as user_cd
	       	,	tb2.error_description
	       	, 	tb1.node_id
	       	<!-- , 	tb2.description -->
	       	,(
	       	<iterate property="data_center_items" conjunction="UNION ALL">
				SELECT description FROM $data_center_items[].active_net_name$JOB WHERE order_id = tb1.order_id and job_name = tb1.job_name
			</iterate>
			) AS description
			,(
	       	<iterate property="data_center_items" conjunction="UNION ALL">
				SELECT start_time FROM $data_center_items[].active_net_name$JOB WHERE order_id = tb1.order_id and job_name = tb1.job_name
			</iterate>
			) AS start_time	       	
	       	,(
	       	<iterate property="data_center_items" conjunction="UNION ALL">
				SELECT end_time FROM $data_center_items[].active_net_name$JOB WHERE order_id = tb1.order_id and job_name = tb1.job_name
			</iterate>
			) AS end_time	 
			,(
	       	<iterate property="data_center_items" conjunction="UNION ALL">
				SELECT odate FROM $data_center_items[].active_net_name$JOB WHERE order_id = tb1.order_id and job_name = tb1.job_name
			</iterate>
			) AS odate	 
			,(
	       	<iterate property="data_center_items" conjunction="UNION ALL">
				SELECT order_table FROM $data_center_items[].active_net_name$JOB WHERE order_id = tb1.order_id and job_name = tb1.job_name
			</iterate>
			) AS order_table	 
	       	,(
	       	<iterate property="data_center_items" conjunction="UNION ALL">
				SELECT critical FROM $data_center_items[].active_net_name$JOB WHERE order_id = tb1.order_id and job_name = tb1.job_name
			</iterate>
			) AS critical
	       	
	       		
		  FROM ALARM tb1, $SCHEMA$.EZ_JOB_MAPPER tb2
		 WHERE (tb1.message = 'Ended not OK' OR tb1.message = 'LATE_SUB' OR tb1.message = 'LATE_TIME' OR tb1.message = 'LATE_EXEC' OR tb1.message = 'Ended OK')
		   AND tb1.job_name = tb2.job
		   <!-- AND tb1.host_time > (SELECT MAX(host_time) FROM $SCHEMA$.EZ_ALARM) -->
		   AND tb1.serial > (SELECT nvl(MAX(alarm_cd), 0) FROM $SCHEMA$.EZ_ALARM)
		   AND tb1.host_time > sysdate - 10/1440
		   <!-- 10/1440 : 10분 -->
	</select>
	
	<select id="commOdateInfo" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > commOdateInfo */
	<![CDATA[
		SELECT SUBSTR(ctm_odate, 1, 4) || '/' || SUBSTR(ctm_odate, 5, 2) || '/' || SUBSTR(ctm_odate, 7, 2) AS view_odate,
			   ctm_odate 
		  FROM COMM 
		 WHERE code = ( SELECT MIN(code) FROM COMM )
	]]>
	</select>
	
	<select id="resourceList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > resourceList */
	
	<![CDATA[
			SELECT SUBSTR(a.QRESNAME, INSTR(a.QRESNAME, '@')+1) AS QRESNAME
		     , a.QRTOTAL
		     , sum(b.JOBUSED) AS QRUSED
		     , MAX(c.agent_nm) AS agent_id
		  FROM $ctmuser$.CMR_QRTAB a, 
		       $ctmuser$.CMR_QRUSE b,
		        $SCHEMA$.ez_host c
		 WHERE a.QRESNAME = b.QRESNAME(+) 
		   AND SUBSTR(a.QRESNAME, INSTR(a.QRESNAME, '@')+1) = c.agent(+)
		 GROUP BY  a.QRESNAME , a.QRTOTAL
	]]>
		
	</select>

	<select id="usedJobList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > usedJobList */
	<![CDATA[
		SELECT a.JOBNAME, a.DESCRIPT, a.NODEID, to_char(to_date(a.STARTRUN, 'yyyy-mm-dd hh24:mi:ss'), 'yyyy/mm/dd hh24:mi:ss') AS start_time
		FROM $ctmuser$.CMR_AJF a, $ctmuser$.CMR_QRUSE b
		WHERE a.ORDERNO = b.ORDERNO
		AND b.QRESNAME = #qresname#
	]]>
		
	</select>
	
	<select id="avgTimeOverJobList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > avgTimeOverJobList */
		SELECT * FROM (
				SELECT data_center, t1.order_id, t1.job_name, t1.description, odate, rerun_counter, start_time AS s_start_time, to_char(sysdate, 'YYYYMMDDHH24MISS') as s_end_time,
						to_char(to_date(start_time, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS') as start_time,
						(SELECT to_char(trunc(sysdate)+numtodsinterval(ROUND(AVG_RUN_TIME),'second'),'hh24:mi:ss') FROM $SCHEMA$.EZ_AVG_TIME c where t1.job_name = c.job_name AND c.data_center = ( CASE WHEN INSTR(#data_center#, ',') > 0 THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))  ELSE #data_center# END )) AS avg_run,
						(SELECT AVG_RUN_TIME FROM $SCHEMA$.EZ_AVG_TIME c where t1.job_name = c.job_name AND c.data_center = ( CASE WHEN INSTR(#data_center#, ',') > 0 THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))  ELSE #data_center# END )) AS avg_run_time,
						b.user_cd_1 as send_user_cd,
				        b.user_cd_2 as send_user_cd2,
				        b.user_cd_3 as send_user_cd3,
				        b.user_cd_4 as send_user_cd4,
				        b.user_cd_5 as send_user_cd5,
				        b.user_cd_6 as send_user_cd6,
				        b.user_cd_7 as send_user_cd7,
				        b.user_cd_8 as send_user_cd8,
				        b.user_cd_9 as send_user_cd9,
				        b.user_cd_10 as send_user_cd10,
				        b.sms_1 as send_sms,
				        b.sms_2 as send_sms2,
				        b.sms_3 as send_sms3,
				        b.sms_4 as send_sms4,
				        b.sms_5 as send_sms5,
				        b.sms_6 as send_sms6,
				        b.sms_7 as send_sms7,
				        b.sms_8 as send_sms8,
				        b.sms_9 as send_sms9,
				        b.sms_10 as send_sms10,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_1 ) as send_user_hp,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_2 ) as send_user_hp2,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_3 ) as send_user_hp3,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_4 ) as send_user_hp4,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_5 ) as send_user_hp5,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_6 ) as send_user_hp6,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_7 ) as send_user_hp7,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_8 ) as send_user_hp8,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_9 ) as send_user_hp9,
				        (SELECT USER_HP FROM $SCHEMA$.EZ_USER WHERE USER_CD =  b.user_cd_10) as send_user_hp10
				        
				FROM $active_net_name$JOB t1 
				     left outer join(select * from $SCHEMA$.EZ_JOB_MAPPER where data_center=#data_center#) B on (case when trim(t1.job_name) is not null then  t1.job_name else t1.memname end) = B.JOB
				WHERE 1=1
				AND t1.start_time  <![CDATA[ <> ]]>  ' '
				AND t1.end_time = ' '
				AND t1.status = 'Executing'
				AND not exists (
					SELECT 1
					FROM $SCHEMA$.EZ_SEND_LOG ts1
					WHERE 1=1
					AND ts1.data_center = #data_center#
					AND t1.order_id = ts1.order_id
					AND t1.job_name = ts1.job_name
					AND t1.odate = ts1.odate
					AND t1.rerun_counter = ts1.rerun_counter
				)
			)
			WHERE 1=1
		<isNotEmpty property="alarm_min">
			AND avg_run_time  >= #alarm_min#
		</isNotEmpty>
		<isNotEmpty property="alarm_max">
			AND avg_run_time <![CDATA[ <= ]]> #alarm_max#
		</isNotEmpty>
		<isNotEmpty property="alarm_time">
			<isNotEmpty property="alarm_over">
				<isEqual property="alarm_time" compareValue="perform">
					and round(abs(sysdate - to_date(s_start_time, 'YYYYMMDDHH24MISS'))*24*60*60) >= #alarm_over#
				</isEqual>
				<isEqual property="alarm_time" compareValue="average">
					and round(abs(sysdate - to_date(s_start_time, 'YYYYMMDDHH24MISS'))*24*60*60)-avg_run_time >= #alarm_over#
				</isEqual>
			</isNotEmpty>
		</isNotEmpty>
		
	</select>
	
	
	<parameterMap id="spLogPrcMap" class="java.util.Map">
		<parameter property="r_code" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		<parameter property="r_msg" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		
		<parameter property="flag" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="order_id"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="before_status"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="after_status"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />		
		<parameter property="data_center"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />

		<parameter property="owner"				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="time_from"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="time_until"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="priority"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="rerun_max"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />

		<parameter property="command"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="cyclic"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="rerun_interval"	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="node_id"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="t_set"				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />

		<parameter property="t_conditions_in"	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="t_conditions_out"	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="job_name"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="send_gubun"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="message"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />

		<parameter property="send_info"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="send_user_cd"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="return_code"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="send_date"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="odate"				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />

		<parameter property="send_desc"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="description"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="avg_runtime"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_standard"	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_time"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />

		<parameter property="alarm_over"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_over_time"	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="rerun_counter"		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="send_description"	javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="sysout"			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />

		<parameter property="s_user_cd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="s_user_ip" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" /> 
	</parameterMap>
	<procedure id="spLogPrc" resultClass="java.util.List" parameterMap="spLogPrcMap">
		{ call $SCHEMA$.SP_EZ_LOG_PRC( 	?, ?, ?, ?, ?,
										?, ?, ?, ?, ?,
										?, ?, ?, ?, ?,
										?, ?, ?, ?, ?,
										?, ?, ?, ?, ?,
										?, ?, ?, ?, ?,
										?, ?, ?, ?, ?,
										?, ?, ?, ?
									)
		}
	</procedure>
	
	<select id="aJobCheckCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > aJobCheckCnt */
	<![CDATA[
		SELECT (CASE WHEN cnt1 = 1 AND cnt2 != cnt3 THEN 1 ELSE 0 END) AS total_count
		  FROM (
		  		SELECT MAX(cnt1) AS cnt1, MAX(cnt2) AS cnt2, MAX(cnt3) AS cnt3
		  		  FROM (
		  		  		SELECT COUNT(*) AS cnt1, 0 AS cnt2, 0 AS cnt3
		  		  		  FROM COMM 
		  		  		 WHERE code = #data_center_code#
		  		  		   AND ctm_odate = ( SELECT TO_CHAR(CURRENT_DATE, 'yyyymmdd') AS now_date )
		  		  		   
		  		  		UNION ALL
		  		  		
		  		  		SELECT 0 AS cnt1, COUNT(*) AS cnt2, 0 AS cnt3 FROM $active_net_name$
		  		  		
		  		  		UNION ALL
		  		  		
		  		  		SELECT 0 AS cnt1, 0 AS cnt2, COUNT(*) AS cnt3 
		  		  		  FROM $SCHEMA$.EZ_HISTORY_$data_center_code$ WHERE order_id IN (SELECT order_id FROM $active_net_name$ ) ) AS a ) as t
	]]>
	</select>
	
	<select id="apiCallJobList" resultClass="DocInfoBean" parameterClass="java.util.Map">
	/* ORACLE_Common > apiCallJobList */
		SELECT t1.doc_gb, t1.doc_cd, t1.apply_date, t1.data_center, t1.table_name, t1.job_name, t1.table_id, t1.job_id, t1.apply_cd, t1.doc_group_id
		  FROM (
		        SELECT tb1.doc_gb, tb1.doc_cd, tb1.apply_cd, 
		               ( CASE WHEN tb1.doc_gb = '01' THEN (SELECT apply_date FROM $SCHEMA$.EZ_DOC_01 WHERE doc_cd = tb1.doc_cd)
							  WHEN tb1.doc_gb = '02' THEN (SELECT apply_date FROM $SCHEMA$.EZ_DOC_02 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '03' THEN (SELECT apply_date FROM $SCHEMA$.EZ_DOC_03 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '04' THEN (SELECT apply_date FROM $SCHEMA$.EZ_DOC_04 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '05' THEN (SELECT order_date FROM $SCHEMA$.EZ_DOC_05 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '06' THEN (SELECT apply_date FROM $SCHEMA$.EZ_DOC_06 WHERE doc_cd = tb1.doc_cd)
							  WHEN tb1.doc_gb = '07' THEN (SELECT apply_date FROM $SCHEMA$.EZ_DOC_07 WHERE doc_cd = tb1.doc_cd)
		                      ELSE '' END ) AS apply_date,
		               ( CASE WHEN tb1.doc_gb = '01' THEN (SELECT data_center FROM $SCHEMA$.EZ_DOC_01 WHERE doc_cd = tb1.doc_cd)
							  WHEN tb1.doc_gb = '02' THEN (SELECT data_center FROM $SCHEMA$.EZ_DOC_02 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '03' THEN (SELECT data_center FROM $SCHEMA$.EZ_DOC_03 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '04' THEN (SELECT data_center FROM $SCHEMA$.EZ_DOC_04 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '05' THEN (SELECT data_center FROM $SCHEMA$.EZ_DOC_05 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '06' THEN (SELECT data_center FROM $SCHEMA$.EZ_DOC_06 WHERE doc_cd = tb1.doc_cd)
							  WHEN tb1.doc_gb = '07' THEN (SELECT data_center FROM $SCHEMA$.EZ_DOC_07 WHERE doc_cd = tb1.doc_cd)
		                      ELSE '' END ) AS data_center,
		               ( CASE WHEN tb1.doc_gb = '01' THEN (SELECT table_name FROM $SCHEMA$.EZ_DOC_01 WHERE doc_cd = tb1.doc_cd)
							  WHEN tb1.doc_gb = '02' THEN (SELECT table_name FROM $SCHEMA$.EZ_DOC_02 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '03' THEN (SELECT table_name FROM $SCHEMA$.EZ_DOC_03 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '04' THEN (SELECT table_name FROM $SCHEMA$.EZ_DOC_04 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '05' THEN (SELECT table_name FROM $SCHEMA$.EZ_DOC_05 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '06' THEN (SELECT table_name FROM $SCHEMA$.EZ_DOC_06 WHERE doc_cd = tb1.doc_cd)
							  WHEN tb1.doc_gb = '07' THEN (SELECT table_name FROM $SCHEMA$.EZ_DOC_07 WHERE doc_cd = tb1.doc_cd)
		                   	  ELSE '' END ) AS table_name,
		               ( CASE WHEN tb1.doc_gb = '01' THEN (SELECT job_name FROM $SCHEMA$.EZ_DOC_01 WHERE doc_cd = tb1.doc_cd)
							  WHEN tb1.doc_gb = '02' THEN (SELECT job_name FROM $SCHEMA$.EZ_DOC_02 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '03' THEN (SELECT job_name FROM $SCHEMA$.EZ_DOC_03 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '04' THEN (SELECT job_name FROM $SCHEMA$.EZ_DOC_04 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '05' THEN (SELECT job_name FROM $SCHEMA$.EZ_DOC_05 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '06' THEN (SELECT file_nm FROM $SCHEMA$.EZ_DOC_06 WHERE doc_cd = tb1.doc_cd)
							  WHEN tb1.doc_gb = '07' THEN (SELECT job_name FROM $SCHEMA$.EZ_DOC_07 WHERE doc_cd = tb1.doc_cd)
		                      ELSE '' END ) AS job_name,
                       ( CASE WHEN tb1.doc_gb = '04' THEN (SELECT table_id FROM $SCHEMA$.EZ_DOC_04 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '05' THEN (SELECT table_id FROM $SCHEMA$.EZ_DOC_05 WHERE doc_cd = tb1.doc_cd)
		                      ELSE 0 END ) AS table_id,
                        ( CASE WHEN tb1.doc_gb = '04' THEN (SELECT job_id FROM $SCHEMA$.EZ_DOC_04 WHERE doc_cd = tb1.doc_cd)
		                      WHEN tb1.doc_gb = '05' THEN (SELECT job_id FROM $SCHEMA$.EZ_DOC_05 WHERE doc_cd = tb1.doc_cd)
		                      ELSE 0 END ) AS job_id,
						 tb1.doc_group_id
		          FROM $SCHEMA$.EZ_DOC_MASTER tb1
		          WHERE 1=1
						<isNotEmpty property="doc_cd_list" prepend="and">
							tb1.apply_cd = '04'
						</isNotEmpty>
						<isEmpty property="doc_cd_list" prepend="and">
							tb1.apply_cd = '01'
						</isEmpty>
		            AND tb1.del_yn != 'Y' ) t1
		 WHERE 
		 	1=1
 		 AND (t1.apply_date <![CDATA[ <= ]]> TO_CHAR(CURRENT_DATE, 'yyyymmdd') or t1.apply_date is null)
		 AND data_center = #data_center#
		<isNotEmpty property="doc_cd_list" open="(" close=")" prepend="and">
			<iterate property="doc_cd_list" conjunction="OR">
				t1.doc_cd = #doc_cd_list[]#
			</iterate>
		</isNotEmpty>
	</select>
	
	<select id="preDateBatchJobList" resultClass="DocInfoBean" parameterClass="java.util.Map">
	/* ORACLE_Common > preDateBatchJobList */
	<![CDATA[
		SELECT doc_gb, doc_cd, apply_date, data_center, table_name, job_name, from_time, after_status, description, order_id, user_cd, user_hp
		  FROM (
		        SELECT 
		        	tb1.doc_gb, 
		        	tb1.doc_cd, 
		        	tb2.order_date AS apply_date, 
		        	tb2.data_center, 
		        	tb2.table_name,
		        	tb2.job_name,
		        	tb2.from_time,
		        	tb2.after_status,
		        	tb2.description,
		        	tb2.order_id,
		        	tb3.user_cd,
		        	tb3.user_hp
		          FROM $SCHEMA$.EZ_DOC_MASTER tb1, $SCHEMA$.EZ_DOC_08 tb2, $SCHEMA$.ez_user tb3
		          WHERE tb1.doc_cd = tb2.doc_cd
		          	AND tb1.user_cd = tb3.user_cd 
		          	AND tb1.apply_cd = '01'
		            AND tb1.del_yn != 'Y' )
		 WHERE apply_date = TO_CHAR(CURRENT_DATE, 'yyyymmdd')
		 	AND from_time = TO_CHAR(sysdate, 'HH24MI')
	]]>
	</select>
	
	<select id="susiApiCallJobList" resultClass="DocInfoBean" parameterClass="java.util.Map">
	/* ORACLE_Common > susiApiCallJobList */
	<![CDATA[
		SELECT MAX(tb1.doc_cd) AS doc_cd, MAX(tb1.s_apply_date) AS s_apply_date, MAX(tb1.data_center) AS data_center
		  FROM $SCHEMA$.EZ_DOC_02 tb1, $SCHEMA$.EZ_DOC_MASTER tb2
		 WHERE s_apply_date = (SELECT MAX(ctm_odate) FROM COMM)
		   AND tb1.doc_cd = tb2.doc_cd
		   AND tb2.del_yn != 'Y'
		   AND tb2.apply_cd = '01'
		 GROUP BY tb1.doc_cd, tb1.s_apply_date, tb1.data_center
	]]>
	</select>
	
	<insert id="insertEzAlram" parameterClass="AlertBean">
	/* ORACLE_Common > insertEzAlram */
		INSERT INTO $SCHEMA$.EZ_ALARM (
				alarm_cd
			, 	data_center
			, 	host_time
			, 	job_name
			, 	application
			, 	group_name
			, 	message
			, 	run_counter
			, 	user_cd 
		) values (
				#serial#
			,	#data_center#
			,	to_timestamp(#host_time#, 'YYYY-MM-DD HH24:MI')
			,	#job_name#
			,	#application#
			,	#group_name#
			,	#message#
			,	#run_counter#
			,	#user_cd#
		)
	
	</insert>
		
	<select id="dailyReportList" resultClass="BatchResultTotalBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dailyReportList */	
		select 
			group_name
			,SUM(CASE WHEN STATE_RESULT='dual' THEN 0 ELSE 1 END) AS total
			,SUM(CASE WHEN STATE_RESULT='Wait User' THEN 1 ELSE 0 END) AS wait_confirm
			,SUM(CASE WHEN STATE_RESULT='Wait Time' THEN 1 ELSE 0 END) AS wait_time
			,SUM(CASE WHEN STATE_RESULT='Wait Condition' THEN 1 ELSE 0 END) AS wait_condition
			,SUM(CASE WHEN STATE_RESULT='Wait Resource' THEN 1 ELSE 0 END) AS wait_resource
			,SUM(CASE WHEN STATE_RESULT='Wait Host' THEN 1 ELSE 0 END) AS wait_host
			,SUM(CASE WHEN STATE_RESULT='Held' THEN 1 ELSE 0 END) AS hold
			,SUM(CASE WHEN STATE_RESULT='Executing' THEN 1 ELSE 0 END) AS executing
			,SUM(CASE WHEN STATE_RESULT='Ended OK' THEN 1 ELSE 0 END) AS ended_ok
			,SUM(CASE WHEN STATE_RESULT='Ended Not OK' THEN 1 ELSE 0 END) AS ended_not_ok
			,SUM(CASE WHEN STATE_RESULT='Unknown' THEN 1 ELSE 0 END) AS unknown
			,SUM(CASE WHEN STATE_RESULT='Deleted' THEN 1 ELSE 0 END) AS deletes
			,SUM(CASE WHEN STATE_RESULT='Not in AJF' THEN 1 ELSE 0 END) AS etc
		from(	
				select
					0 AS gb
					,u.* 
				from(
						select 
							'[TOTAL]' AS group_name
							,case when DELETE_FLAG='1' then 'Deleted'
										else STATUS end AS state_result
						from $active_net_name$job tb1, $SCHEMA$.EZ_JOB_MAPPER tb2
						where odate = #odate#
						AND tb1.job_name = tb2.job (+)
						
						<isNotEmpty property="user_cd_1">
							AND tb2.user_cd_1 = #user_cd_1#
						</isNotEmpty>
				) u
		
				union all
				
				select 
					1 as gb
					,u.* 
				from(
						select 
							group_name
							,case when DELETE_FLAG='1' then 'Deleted'
										else STATUS end AS state_result
						from $active_net_name$job tb1, $SCHEMA$.EZ_JOB_MAPPER tb2
						where odate = #odate#
						  AND tb1.job_name = tb2.job (+)
						  
						<isNotEmpty property="user_cd_1">
							AND tb2.user_cd_1 = #user_cd_1#
						</isNotEmpty>
				) u
		) u
		where 1=1
		
		group by gb, group_name
		order by gb, group_name

	</select>
	
	<select id="dailyReportSendUserList" resultClass="UserBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dailyReportSendUserList */	
		SELECT tb2.user_cd_1 AS user_cd, tb3.user_email
	  	 FROM $active_net_name$job tb1, $SCHEMA$.EZ_JOB_MAPPER tb2, $SCHEMA$.EZ_USER tb3
	   WHERE tb1.job_name = tb2.job
	   	   AND tb2.user_cd_1 = tb3.user_cd
           AND tb3.user_email IS NOT NULL  
	   GROUP BY tb2.user_cd_1, tb3.user_email
	</select>
	
	<select id="dailyReportSendAdminList" resultClass="UserBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dailyReportSendAdminList */	
		SELECT user_email FROM $SCHEMA$.EZ_USER
	     WHERE user_gb = '02'
	</select>
	
	<select id="boardCd" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > boardCd */
		SELECT 
			nvl(MAX(BOARD_CD)+1,1)
		FROM
			$SCHEMA$.EZ_BOARD		
	</select>
		
	<select id="boardList" resultClass="BoardBean" parameterClass="java.util.Map">
	/* ORACLE_Common > boardList */		
	    SELECT 		      
	        AA.BOARD_CD, AA.TITLE, AA.STATUS, AA.INS_USER_CD, AA.APP_USER_CD,
	        AA.INS_USER_NM, AA.APP_USER_NM, AA.FILE_NM, AA.FILE_PATH, TO_CHAR(AA.INS_DATE,'YYYY.MM.DD') AS INS_DATE,
	        AA.SEQ, AA.POPUP_YN, AA.POPUP_S_DATE, AA.POPUP_E_DATE
	    FROM(
	        SELECT
	            ROWNUM rn, A.BOARD_CD, A.TITLE, A.STATUS, A.INS_USER_CD, A.APP_USER_CD,
	            (SELECT USER_NM FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.INS_USER_CD) AS INS_USER_NM,
	            (SELECT USER_NM FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APP_USER_CD) AS APP_USER_NM,
	            A.FILE_NM, A.FILE_PATH, A.INS_DATE, A.DEL_YN, A.NOTI_YN, A.SEQ, A.POPUP_YN, A.POPUP_S_DATE, A.POPUP_E_DATE
	        FROM
	            $SCHEMA$.EZ_BOARD A
	        WHERE 1=1		        	
	        	AND A.DEL_YN = 'N'	
	        	AND A.BOARD_GB = #board_gb#
	        	<isNotEmpty property="board_cd" prepend="AND">
	        		A.BOARD_CD = #board_cd#
	        	</isNotEmpty>        
        		<isEqual property="front" compareValue="Y" prepend="AND">
	        		A.STATUS = '01'
	        	</isEqual>        
	        	<isNotEmpty property="p_search_text">
	        		<isEqual property="p_search_gubun" compareValue="title" prepend="AND">
	        			A.TITLE LIKE #p_search_text#||'%'
	        		</isEqual>
	        		<isEqual property="p_search_gubun" compareValue="content" prepend="AND">
	        			A.CONTENT LIKE '%'||#p_search_text#||'%'
	        		</isEqual>
	        	</isNotEmpty>
	        	<isNotEmpty property="p_s_date" prepend="AND">
	        		to_char(A.INS_DATE,'YYYYMMDDHH24MISS') BETWEEN #p_s_date#||'000000' AND #p_e_date#||'999999'
	        	</isNotEmpty>
	        	
	        	<isEqual property="popup" compareValue="Y">
			        AND to_char(sysdate,'YYYYMMDD') BETWEEN A.POPUP_S_DATE AND A.POPUP_E_DATE
	        		AND A.POPUP_YN = 'Y'
	        	</isEqual>
		        
	        ORDER BY A.SEQ
	        
	        ) AA	
	        <isNotEmpty property="orderby">
	        	<isEqual property="orderby" compareValue="Y">
	        		<isNotEmpty property="count" prepend="WHERE">
	        		 aa.rn <![CDATA[ < ]]>  $count$ 
	        		</isNotEmpty>
	        	</isEqual>
	        </isNotEmpty>				
	</select>
	<select id="boardInfo" resultClass="BoardBean" parameterClass="java.util.Map">
	/* ORACLE_Common > boardInfo */
		SELECT
			 A.BOARD_CD, A.TITLE, A.CONTENT, A.STATUS, A.INS_USER_CD, A.APP_USER_CD,
            (SELECT USER_NM FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.INS_USER_CD) AS INS_USER_NM,
            (SELECT USER_NM FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APP_USER_CD) AS APP_USER_NM,
            A.FILE_NM, A.FILE_PATH, TO_CHAR(A.INS_DATE,'YYYY.MM.DD') AS INS_DATE,
            A.NOTI_YN, A.DEL_YN, A.SEQ, A.POPUP_YN, A.POPUP_S_DATE, A.POPUP_E_DATE
		FROM
			$SCHEMA$.EZ_BOARD A
		WHERE
		<!-- 	A.BOARD_CD = $board_cd$ -->
			A.BOARD_CD = #board_cd#
	</select>
	<select id="boardNotice" resultClass="BoardBean" parameterClass="java.util.Map">
	/* ORACLE_Common > boardNotice */
		SELECT BOARD_CD FROM $SCHEMA$.EZ_BOARD WHERE STATUS = '01' AND NOTI_YN = 'N' AND DEL_YN = 'N'
	</select>	
	
	<!-- Board Procedure -->	
	<parameterMap id="spBoardPrcMap" class="java.util.Map">
		<parameter property="r_code" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		<parameter property="r_msg"  javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		
		<parameter property="flag"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="board_cd"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="title"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="content"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="status"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="ins_user_cd"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="app_user_cd"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="file_nm"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="file_path"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="del_yn"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="noti_yn"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
	</parameterMap>
	
	<procedure id="spBoardPrc" resultClass="java.util.List" parameterMap="spBoardPrcMap">
		{ call $SCHEMA$.SP_EZ_BOARD_PRC( ?, ?, 
										?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
		}
	</procedure>
	
	<!-- Holiday Procedure  -->
	<parameterMap id="spHolidayPrcMap" class="java.util.Map">
		<parameter property="r_code" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		<parameter property="r_msg"  javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		
		<parameter property="yyyymmdd"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="title"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="ins_user_cd"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="flag"  javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />		
	</parameterMap>
	<procedure id="spHolidayPrc" resultClass="java.util.List" parameterMap="spHolidayPrcMap">
		{ call $SCHEMA$.SP_EZ_HOLIDAY_PRC( ?, ?, 
										?, ?, ?, ? ) 
		}
	</procedure>
	
	<select id="holidayListCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > holidayListCnt */
		SELECT
			COUNT(*) AS TOTAL_COUNT
		FROM(
			SELECT
				A.YYYYMMDD
			FROM
				$SCHEMA$.EZ_HOLIDAY A
			WHERE 1=1
				<isNotEmpty property="search_gubun">
				AND A.YYYYMMDD LIKE #search_gubun#||'%'
				</isNotEmpty>
			) AA
	</select>
	<select id="holidayList" resultClass="HolidayBean" parameterClass="java.util.Map">
	/* ORACLE_Common > holidayList */
		SELECT
			AAA.*
		FROM(
			SELECT
				count(*) as row_num, TO_CHAR(TO_DATE(AA.YYYYMMDD,'YYYYMMDD'),'YYYY.MM.DD') AS YYYYMMDD, AA.TITLE,
				TO_CHAR(TO_DATE(AA.INS_DATE,'YYYYMMDDHH24MISS'),'YYYY.MM.DD') AS INS_DATE
			FROM(
				SELECT
					A.YYYYMMDD, A.TITLE, A.INS_DATE
				FROM
					$SCHEMA$.EZ_HOLIDAY A
				WHERE 1=1
					<isNotEmpty property="search_gubun">
					AND A.YYYYMMDD LIKE #search_gubun#||'%'
					</isNotEmpty>
				ORDER BY A.YYYYMMDD ASC
				) AA
			) AAA
		<isNotEmpty property="startRowNum">
		WHERE
		   	ROW_NUM BETWEEN #startRowNum# AND #endRowNum#
		</isNotEmpty>
	</select>
	<select id="holidayDayList" resultClass="HolidayBean" parameterClass="java.util.Map">
	/* ORACLE_Common > holidayDayList */
		SELECT
			YYYYMMDD
		FROM
			$SCHEMA$.EZ_HOLIDAY
		WHERE
			YYYYMMDD LIKE #search_gubun#||'%'
	</select>

	<select id="scodeList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > scodeList */
		SELECT SCODE_CD, SCODE_NM, SCODE_ENG_NM
		  FROM $SCHEMA$.EZ_SCODE
		 WHERE MCODE_CD = #mcode_cd#
		 
		 	<isNotEqual property="admin" compareValue="Y">
				AND SCODE_USE_YN = 'Y'
			</isNotEqual>
			<isNotEmpty property="scode_eng_nm">
				AND SCODE_ENG_NM = #scode_eng_nm#
			</isNotEmpty>	
		ORDER BY ORDER_NO ASC
	</select>
	
	<select id="appGrpCodeList" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > appGrpCodeList */
		SELECT
			GRP_CD, GRP_NM, GRP_ENG_NM, GRP_DESC, HOST_CD, user_daily
		FROM
			$SCHEMA$.EZ_APP_GRP_CODE
		WHERE 1=1
			
			AND GRP_USE_YN = 'Y'
			
			<isNotEmpty property="grp_depth">
				<!-- AND (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) -->
				AND GRP_DEPTH = $grp_depth$
				
				<!-- 폴더 권한을 부서명과 동일하게 셋팅 -->
				<!-- 요건 변경 : 선택한 기본 테이블명만 조회 가능  (2020.07.03 강명준) -->
				<isEqual property="grp_depth" compareValue="1">
				
					<!-- 관리자는 모든 폴더 조회 가능 -->
					<isNotEmpty property="s_user_gb">
						<isNotEqual property="s_user_gb" compareValue="99">
							AND GRP_ENG_NM IN (SELECT FOLDER_AUTH FROM $SCHEMA$.EZ_USER_FOLDER WHERE user_cd = $s_user_cd$)
						</isNotEqual>
					</isNotEmpty>
					 
				</isEqual>
				
			</isNotEmpty>
			<isNotEmpty property="scode_cd">
				AND SCODE_CD = #scode_cd#
			</isNotEmpty>
			<isNotEmpty property="grp_cd">
				AND GRP_PARENT_CD = #grp_cd#
			</isNotEmpty>
			<isNotEmpty property="grp_nm">
				AND GRP_ENG_NM = #grp_nm#
					<isEqual property="grp_depth" compareValue="2">
						AND grp_parent_cd = (SELECT grp_cd from $SCHEMA$.EZ_APP_GRP_CODE where (grp_depth = 1) and grp_eng_nm = #tb_nm# 
						<isNotEmpty property="data_center">
							and scode_cd = SUBSTR(#data_center#, 1, INSTR(#data_center#, ',')-1)
						</isNotEmpty>
						)
					</isEqual>
					<isEqual property="grp_depth" compareValue="3">
						AND	grp_parent_cd = (SELECT grp_cd FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (grp_depth = 2) and grp_eng_nm = #ap_nm#
							AND grp_parent_cd = (SELECT grp_cd from $SCHEMA$.EZ_APP_GRP_CODE where (grp_depth = 1) and grp_eng_nm = #tb_nm#
							<isNotEmpty property="data_center">
								and scode_cd = SUBSTR(#data_center#, 1, INSTR(#data_center#, ',')-1)
							</isNotEmpty>
							))
					</isEqual>
			</isNotEmpty>
			<isNotEmpty property="grp_eng_nm">
				AND GRP_ENG_NM = #grp_eng_nm#
			</isNotEmpty>
			<isNotEmpty property="app_eng_nm">
				AND (GRP_PARENT_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE GRP_ENG_NM = #app_eng_nm#)
					<!-- GRP_ENG_NM이 숫자일 경우 관계 없는 어플리케이션, 그룹이 조회되는데 왜 아래 조건이 있는지 모르겠음 (2020.06.26 강명준) -->
					<!-- or GRP_PARENT_CD = #app_eng_nm# -->
					)
			</isNotEmpty>
			<isEmpty property="app_search_gubun">
				<isNotEmpty property="app_nm">
					AND GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND GRP_NM LIKE #app_nm#||'%')
				</isNotEmpty>
			</isEmpty>
			<isNotEmpty property="app_search_gubun">
				<isEqual property="app_search_gubun" compareValue="t">
					<isNotEmpty property="app_nm" prepend="AND">
						(
						GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND GRP_NM LIKE #app_nm#||'%') or
						GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#app_nm#)||'%') or
						GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 OR GRP_DEPTH = 4) AND UPPER(GRP_ENG_NM) = UPPER(#app_nm#))
						)
					</isNotEmpty>
				</isEqual>
				<isEqual property="app_search_gubun" compareValue="h">
					<isNotEmpty property="app_nm" prepend="AND">
						GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND GRP_NM LIKE #app_nm#||'%')
					</isNotEmpty>
				</isEqual>
				<isEqual property="app_search_gubun" compareValue="e">
					<isNotEmpty property="app_nm" prepend="AND">
						GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#app_nm#)||'%')
					</isNotEmpty>
				</isEqual>
				<isEqual property="app_search_gubun" compareValue="L4">
					<isNotEmpty property="app_nm" prepend="AND">
						GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 OR GRP_DEPTH = 4) AND UPPER(GRP_ENG_NM) = UPPER(#app_nm#))
					</isNotEmpty>
				</isEqual>
			</isNotEmpty>
		ORDER BY GRP_ENG_NM ASC
	</select>
	
	<select id="appGrpCodeList2" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > appGrpCodeList2 */
		SELECT
			A.GRP_CD
			, A.GRP_NM
			, A.GRP_ENG_NM
			, A.GRP_DESC
			, A.HOST_CD
			, A.user_daily
			, B.TASK_TYPE
			, B.TABLE_ID
		FROM
			$SCHEMA$.EZ_APP_GRP_CODE A
			LEFT OUTER JOIN def_job B on A.GRP_ENG_NM = B.JOB_NAME and B.TASK_TYPE = 'SMART Table'
		WHERE 1=1
			
			AND A.GRP_USE_YN = 'Y'
			
			<isNotEmpty property="grp_depth">
				<!-- AND (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) -->
				AND A.GRP_DEPTH = $grp_depth$
				
				<!-- 폴더 권한을 부서명과 동일하게 셋팅 -->
				<!-- 요건 변경 : 선택한 기본 테이블명만 조회 가능  (2020.07.03 강명준) -->
				<isEqual property="grp_depth" compareValue="1">
				
					<!-- 관리자는 모든 폴더 조회 가능 -->
					<isNotEqual property="s_user_gb" compareValue="99">
						AND A.GRP_ENG_NM IN (SELECT FOLDER_AUTH FROM $SCHEMA$.EZ_USER_FOLDER WHERE user_cd = $s_user_cd$)
					</isNotEqual>
					 
				</isEqual>
				
			</isNotEmpty>
			<isNotEmpty property="scode_cd">
				AND A.SCODE_CD = #scode_cd#
			</isNotEmpty>
			<isNotEmpty property="grp_cd">
				AND A.GRP_PARENT_CD = #grp_cd#
			</isNotEmpty>
			<isNotEmpty property="grp_eng_nm">
				AND A.GRP_ENG_NM = #grp_eng_nm#
			</isNotEmpty>
			<isNotEmpty property="app_eng_nm">
				AND (A.GRP_PARENT_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE GRP_ENG_NM = #app_eng_nm#)
					<!-- GRP_ENG_NM이 숫자일 경우 관계 없는 어플리케이션, 그룹이 조회되는데 왜 아래 조건이 있는지 모르겠음 (2020.06.26 강명준) -->
					<!-- or GRP_PARENT_CD = #app_eng_nm# -->
					)
			</isNotEmpty>
			<isEmpty property="app_search_gubun">
				<isNotEmpty property="app_nm">
					AND A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND GRP_NM LIKE #app_nm#||'%')
				</isNotEmpty>
			</isEmpty>
			<isNotEmpty property="app_search_gubun">
				<isEqual property="app_search_gubun" compareValue="t">
					<isNotEmpty property="app_nm" prepend="AND">
						(
						A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND GRP_NM LIKE #app_nm#||'%') or
						A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#app_nm#)||'%') or
						A.GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 OR GRP_DEPTH = 4) AND UPPER(GRP_ENG_NM) = UPPER(#app_nm#))
						)
					</isNotEmpty>
				</isEqual>
				<isEqual property="app_search_gubun" compareValue="h">
					<isNotEmpty property="app_nm" prepend="AND">
						A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND GRP_NM LIKE #app_nm#||'%')
					</isNotEmpty>
				</isEqual>
				<isEqual property="app_search_gubun" compareValue="e">
					<isNotEmpty property="app_nm" prepend="AND">
						A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#app_nm#)||'%')
					</isNotEmpty>
				</isEqual>
				<isEqual property="app_search_gubun" compareValue="L4">
					<isNotEmpty property="app_nm" prepend="AND">
						A.GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 OR GRP_DEPTH = 4) AND UPPER(GRP_ENG_NM) = UPPER(#app_nm#))
					</isNotEmpty>
				</isEqual>
			</isNotEmpty>
		ORDER BY A.GRP_ENG_NM ASC
	</select>
	
	<select id="searchAppGrpCodeList" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > searchAppGrpCodeList */
		SELECT
			A.GRP_CD
			, A.GRP_NM
			, A.GRP_ENG_NM
			, A.GRP_DESC
			, A.HOST_CD
			, A.user_daily
			, B.TASK_TYPE
			, B.TABLE_ID
		FROM
			$SCHEMA$.EZ_APP_GRP_CODE A
			LEFT OUTER JOIN def_job B on A.GRP_ENG_NM = B.JOB_NAME and B.TASK_TYPE = 'SMART Table'
		WHERE 1=1
			
			AND A.GRP_USE_YN = 'Y'
			<isNotEmpty property="grp_depth">
				<!-- AND (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) -->
				AND A.GRP_DEPTH = $grp_depth$
			</isNotEmpty>
			<isNotEmpty property="scode_cd">
				AND A.SCODE_CD = #scode_cd#
			</isNotEmpty>
			<isNotEmpty property="grp_cd">
				AND A.GRP_PARENT_CD = #grp_cd#
			</isNotEmpty>
			<isNotEmpty property="grp_eng_nm">
				AND A.GRP_ENG_NM = #grp_eng_nm#
			</isNotEmpty>
			<isNotEmpty property="app_eng_nm">
				AND (A.GRP_PARENT_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE GRP_ENG_NM IN ($app_eng_nm$))
					<!-- GRP_ENG_NM이 숫자일 경우 관계 없는 어플리케이션, 그룹이 조회되는데 왜 아래 조건이 있는지 모르겠음 (2020.06.26 강명준) -->
					<!-- or GRP_PARENT_CD IN ($app_eng_nm$) -->
					)
			</isNotEmpty>
			<isEmpty property="app_search_gubun">
				<isNotEmpty property="app_nm">
					AND A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND GRP_NM LIKE #app_nm#||'%')
				</isNotEmpty>
			</isEmpty>
			<isNotEmpty property="app_search_gubun">
				<isEqual property="app_search_gubun" compareValue="t">
					<isNotEmpty property="app_nm" prepend="AND">
						(
						A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND GRP_NM LIKE #app_nm#||'%') or
						A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#app_nm#)||'%') or
						A.GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 or GRP_DEPTH = 4) AND UPPER(GRP_ENG_NM) = UPPER(#app_nm#))
						)
					</isNotEmpty>
				</isEqual>
				<isEqual property="app_search_gubun" compareValue="h">
					<isNotEmpty property="app_nm" prepend="AND">
						A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND GRP_NM LIKE #app_nm#||'%')
					</isNotEmpty>
				</isEqual>
				<isEqual property="app_search_gubun" compareValue="e">
					<isNotEmpty property="app_nm" prepend="AND">
						A.GRP_CD IN (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = $grp_depth$ or GRP_DEPTH = ($grp_depth$ + 2)) AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#app_nm#)||'%')
					</isNotEmpty>
				</isEqual>
				<isEqual property="app_search_gubun" compareValue="L4">
					<isNotEmpty property="app_nm" prepend="AND">
						A.GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 or GRP_DEPTH = 4) AND UPPER(GRP_ENG_NM) = UPPER(#app_nm#))
					</isNotEmpty>
				</isEqual>
			</isNotEmpty>
		ORDER BY A.GRP_ENG_NM ASC
	</select>
	
	<select id="childAppGrpCodeList" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > childAppGrpCodeList */
		SELECT
			GRP_CD
		FROM $SCHEMA$.EZ_APP_GRP_CODE
		WHERE 1=1
		<isNotEmpty property="grp_cd" prepend="AND">
			<isEqual property="grp_depth" compareValue="1">
				GRP_PARENT_CD IN (select grp_cd from $SCHEMA$.EZ_APP_GRP_CODE WHERE GRP_PARENT_CD = #grp_cd#)
			</isEqual>
			<isEqual property="grp_depth" compareValue="2">
				GRP_PARENT_CD = #grp_cd#
			</isEqual>
			<isEqual property="grp_depth" compareValue="3">
					GRP_CD = $grp_cd$
			</isEqual>
		</isNotEmpty>
	</select>
	
	<select id="appGrpCodeInfo" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > appGrpCodeInfo */
		SELECT 
			A.grp_cd
			,A.grp_eng_nm 
			,A.grp_desc
			,A.user_daily
			,(SELECT LISTAGG((SELECT AGENT FROM $SCHEMA$.EZ_HOST WHERE HOST_CD = B.HOST_CD), ',') WITHIN GROUP (ORDER BY B.HOST_CD) FROM $SCHEMA$.EZ_GRP_HOST B WHERE B.GRP_CD = A.GRP_CD) AS ARR_HOST_NM
		FROM $SCHEMA$.ez_app_grp_code A
		WHERE 1=1
		and A.scode_cd = #scode_cd#
		and A.grp_eng_nm = #grp_eng_nm#
		and A.grp_depth = #grp_depth#
		<isNotEmpty property="grp_parent_cd">
			and A.GRP_PARENT_CD = #grp_parent_cd#
		</isNotEmpty>
	</select>
	
	<select id="mcodeCd" parameterClass="java.util.Map" resultClass="java.lang.String">
	/* ORACLE_Common > mcodeCd */
		SELECT 
			'M' || nvl(MAX(REPLACE(mcode_cd, 'M', '')+1), 1)
		FROM
			$SCHEMA$.EZ_MCODE			
	</select>
	<select id="scodeCd" parameterClass="java.util.Map" resultClass="java.lang.String">
	/* ORACLE_Common > scodeCd */
		SELECT 
			'S' || nvl(MAX(REPLACE(scode_cd, 'S', '') + 1), 1)
		FROM
			$SCHEMA$.EZ_SCODE	
	</select>
	
	<select id="hostInfoChk" parameterClass="java.util.Map" resultClass="CommonBean">
	/* POSTGRE_Common > hostInfoChk */
		SELECT * FROM $SCHEMA$.EZ_HOST WHERE AGENT = #host_nm#
	</select>
	
	<select id="mpngHostChk" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* POSTGRE_Common > mpngHostChk */
		SELECT count(1) FROM $SCHEMA$.EZ_GRP_HOST WHERE grp_cd = #grp_cd# AND host_cd = #host_cd#
	</select>
	
	<select id="appParentCd" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > appParentCd */
		SELECT
			GRP_CD 
		FROM 
			$SCHEMA$.EZ_APP_GRP_CODE
		WHERE
			GRP_ENG_NM = #search_folder_name#
	</select>
	<select id="grpParentCd" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > grpParentCd */
		SELECT 
			grp_cd
		FROM
			$SCHEMA$.EZ_APP_GRP_CODE
		WHERE
			grp_parent_cd IN (
				SELECT
					TO_CHAR(GRP_CD)
				FROM 
					$SCHEMA$.EZ_APP_GRP_CODE
				WHERE
					GRP_ENG_NM = #search_folder_name#
			)
		AND GRP_ENG_NM = #search_app_name#
	</select>
	
	<select id="appGrpCd" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > appGrpCd */
		SELECT 
			nvl(MAX(GRP_CD),0)+1
		FROM
			$SCHEMA$.EZ_APP_GRP_CODE		
	</select>
	<select id="mcodeDupChk" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > mcodeDupChk */
		SELECT COUNT(*) FROM $SCHEMA$.EZ_MCODE WHERE MCODE_NM = #mcode_nm#
	</select>
	<select id="scodeDupChk" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > scodeDupChk */
		SELECT COUNT(*) FROM $SCHEMA$.EZ_SCODE WHERE HOST_CD = $host_cd$ AND SCODE_NM = #scode_nm#
	</select>
	<select id="appGrpList" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > appGrpList */
		SELECT
			A.GRP_CD, A.GRP_NM, A.GRP_ENG_NM, A.GRP_DEPTH, A.GRP_PARENT_CD, A.GRP_USE_YN, A.GRP_DESC,
			A.GRP_INS_DATE, A.GRP_INS_USER_CD, A.GRP_UDT_DATE, A.GRP_UDT_USER_CD, A.SCODE_CD, A.HOST_CD
			,(SELECT LISTAGG(HOST_CD, ',') WITHIN GROUP (ORDER BY HOST_CD) FROM $SCHEMA$.EZ_GRP_HOST WHERE GRP_CD = A.GRP_CD) AS ARR_HOST_CD
			,(SELECT LISTAGG((SELECT AGENT FROM $SCHEMA$.EZ_HOST WHERE HOST_CD = B.HOST_CD), ',') WITHIN GROUP (ORDER BY B.HOST_CD) FROM $SCHEMA$.EZ_GRP_HOST B WHERE B.GRP_CD = A.GRP_CD) AS ARR_HOST_NM
			,(SELECT LISTAGG((SELECT AGENT_NM FROM $SCHEMA$.EZ_HOST WHERE HOST_CD = B.HOST_CD), ',') WITHIN GROUP (ORDER BY B.HOST_CD) FROM $SCHEMA$.EZ_GRP_HOST B WHERE B.GRP_CD = A.GRP_CD) AS ARR_HOST_DESC
			,A.USER_DAILY
			<!-- ,B.USER_DAILY AS CTM_USER_DAILY -->
			,(SELECT USER_DAILY FROM DEF_TABLES WHERE SCHED_TABLE = a.GRP_ENG_NM AND data_center = (SELECT scode_eng_nm FROM $SCHEMA$.EZ_SCODE WHERE scode_cd = #scode_cd#)) AS CTM_USER_DAILY
			,(SELECT table_type FROM DEF_TABLES WHERE SCHED_TABLE = a.GRP_ENG_NM AND data_center = (SELECT scode_eng_nm FROM $SCHEMA$.EZ_SCODE WHERE scode_cd = #scode_cd#)) AS table_type
			,CASE WHEN (SELECT (1) FROM DEF_TABLES WHERE SCHED_TABLE = A.GRP_ENG_NM AND DATA_CENTER = (SELECT scode_eng_nm FROM $SCHEMA$.ez_scode WHERE scode_cd = #scode_cd#)) = 1 THEN 'EXIST' ELSE 'NOTEXIST' END CHK_CTM_FOLDER
			,B.SCODE_NM
			<!-- 폴더 별 등록 작업 갯수 조회 -->
			,CASE WHEN A.GRP_DEPTH = 1 THEN (SELECT count(*) FROM DEF_JOB tb1, DEF_TABLES tb2 WHERE tb1.table_id = tb2.table_id AND tb2.SCHED_TABLE = A.GRP_ENG_NM AND tb2.DATA_CENTER = B.SCODE_ENG_NM AND task_type NOT IN ('SMART Table', 'Sub-Table') ) END JOB_CNT
			,CASE WHEN A.GRP_DEPTH = 2 THEN (SELECT count(*) FROM DEF_JOB tb1, DEF_TABLES tb2 WHERE tb1.table_id = tb2.table_id AND tb1.APPLICATION = A.GRP_ENG_NM AND tb2.DATA_CENTER = B.SCODE_ENG_NM AND tb2.SCHED_TABLE in (SELECT GRP_ENG_NM FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE grp_cd = #grp_parent_cd#) AND task_type NOT IN ('SMART Table', 'Sub-Table') ) END APP_JOB_CNT
			,CASE WHEN A.GRP_DEPTH = 3 THEN (SELECT count(*) FROM DEF_JOB tb1, DEF_TABLES tb2 WHERE tb1.table_id = tb2.table_id AND tb1.GROUP_NAME  = A.GRP_ENG_NM AND tb2.DATA_CENTER = B.SCODE_ENG_NM AND tb1.APPLICATION in (SELECT GRP_ENG_NM FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE grp_cd = #grp_parent_cd#) AND tb2.SCHED_TABLE in (SELECT GRP_ENG_NM FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE grp_cd = (SELECT grp_parent_cd FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE grp_cd = #grp_parent_cd#)) AND task_type NOT IN ('SMART Table', 'Sub-Table') ) END GRP_JOB_CNT
		FROM
			$SCHEMA$.EZ_APP_GRP_CODE A LEFT OUTER JOIN $SCHEMA$.ez_scode B ON A.SCODE_CD = B.SCODE_CD
		WHERE 1=1
			AND A.SCODE_CD = #scode_cd#
			AND A.GRP_DEPTH = $grp_depth$
			
			<!-- 폴더 권한을 부서명과 동일하게 셋팅 -->
			<!-- 요건 변경 : 선택한 기본 테이블명만 조회 가능  (2020.07.03 강명준) -->			
			<isEqual property="grp_depth" compareValue="1">			
			
				<!-- 운영자는 모든 폴더 조회 가능 -->
				<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
				<!-- 
				<isNotEqual property="s_user_gb" compareValue="02">
					AND GRP_ENG_NM = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = $s_user_cd$)
				</isNotEqual>
				-->
				
			</isEqual>	
			
			<isNotEqual property="grp_depth" compareValue="1">
				AND A.GRP_PARENT_CD = #grp_parent_cd#
			</isNotEqual>
			<isNotEqual property="user_gb" compareValue="99">
				AND A.GRP_USE_YN = 'Y'
			</isNotEqual>
			<isNotEmpty property="search_gubun" prepend="AND">
					    
				<isEqual property="search_gubun" compareValue="t">
					(UPPER(A.GRP_ENG_NM) LIKE '%'||UPPER(#grp_nm#)||'%' or A.GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 or GRP_DEPTH = 4) AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#grp_nm#)||'%') or A.GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 or GRP_DEPTH = 4) AND GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE GRP_DEPTH = 3 AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#grp_nm#)||'%')))
				</isEqual>
				<isEqual property="search_gubun" compareValue="e">
					UPPER(A.GRP_ENG_NM) LIKE '%'||UPPER(#grp_nm#)||'%'
				</isEqual>
				<isEqual property="search_gubun" compareValue="h">
					A.GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 or GRP_DEPTH = 4) AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#grp_nm#)||'%')
				</isEqual>
				<isEqual property="search_gubun" compareValue="L4">
					A.GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 or GRP_DEPTH = 4) AND GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE GRP_DEPTH = 3 AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#grp_nm#)||'%'))
				</isEqual>
			</isNotEmpty>
			<isNotEmpty property="application" prepend="AND">
				A.GRP_CD IN (SELECT GRP_PARENT_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 2 or GRP_DEPTH = 4) AND UPPER(GRP_ENG_NM) LIKE '%'||UPPER(#grp_nm#)||'%')
			</isNotEmpty>
			<!-- 그룹/어플리케이션 검색시 충돌되기때문에 주석 2023.10.06 최호연 -->
<!-- 			<isNotEmpty property="grp_nm" prepend="AND"> -->
<!-- 				A.GRP_ENG_NM LIKE '%'||UPPER(#grp_nm#)||'%' -->
<!-- 			</isNotEmpty> -->
			
		ORDER BY A.GRP_ENG_NM ASC
	</select>
	
	<select id="appGrpList2" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > appGrpList2 */
		SELECT
			A.GRP_CD, A.GRP_NM, A.GRP_ENG_NM, A.GRP_DEPTH, A.GRP_PARENT_CD, A.GRP_USE_YN, A.GRP_DESC,
			A.GRP_INS_DATE, A.GRP_INS_USER_CD, A.GRP_UDT_DATE, A.GRP_UDT_USER_CD, A.SCODE_CD, A.HOST_CD
			,(SELECT LISTAGG(HOST_CD,',') WITHIN GROUP (ORDER BY HOST_CD) FROM $SCHEMA$.EZ_GRP_HOST WHERE GRP_CD = A.GRP_CD) AS ARR_HOST_CD
			,(SELECT LISTAGG((SELECT AGENT FROM $SCHEMA$.EZ_HOST WHERE HOST_CD = B.HOST_CD),',') WITHIN GROUP (ORDER BY HOST_CD) FROM $SCHEMA$.EZ_GRP_HOST B WHERE B.GRP_CD = A.GRP_CD) AS ARR_HOST_NM
			,(SELECT LISTAGG((SELECT AGENT_NM FROM $SCHEMA$.EZ_HOST WHERE HOST_CD = B.HOST_CD),',') WITHIN GROUP (ORDER BY HOST_CD) FROM $SCHEMA$.EZ_GRP_HOST B WHERE B.GRP_CD = A.GRP_CD) AS ARR_HOST_DESC
		FROM
			$SCHEMA$.EZ_APP_GRP_CODE A 
		WHERE 1=1
			<isNotEmpty property="grp_nm" prepend="AND">
				A.GRP_ENG_NM  = #grp_nm#
			</isNotEmpty>
		ORDER BY A.GRP_ENG_NM ASC	
	</select>
	
	<select id="appGrpDupChk" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > appGrpDupChk */
		SELECT COUNT(*) FROM $SCHEMA$.EZ_APP_GRP_CODE 
		WHERE 
			GRP_ENG_NM = #grp_eng_nm# 
			AND SCODE_CD = #scode_cd# 
			AND GRP_DEPTH = $grp_depth$
			
			<isEqual property="grp_depth" compareValue="2">
				AND GRP_PARENT_CD = #grp_parent_cd#
			</isEqual>
			<isEqual property="grp_depth" compareValue="3">
				AND GRP_PARENT_CD = #grp_parent_cd#
			</isEqual>
	</select>
	<select id="calCodeList2" parameterClass="java.util.Map" resultClass="CalCodeBean">
	/* ORACLE_Common > calCodeList2 */
		select data_center, calendar as cal_nm from df_calendar where type = '2'
			<isNotEmpty property="cal_text" prepend="AND">
				calendar LIKE '%'||#cal_text#||'%'
			</isNotEmpty>
	</select>
	
	<select id="calCodeList3" parameterClass="java.util.Map" resultClass="CalCodeBean">
	/* ORACLE_Common > calCodeList3 */
		select data_center, calendar as cal_nm from df_calendar where 1=1
			<isNotEmpty property="cal_text" prepend="AND">
				calendar LIKE '%'||#cal_text#||'%'
			</isNotEmpty>
	</select>
	
	<select id="myDocFileInfo" parameterClass="java.util.Map" resultClass="JobMapperBean">
	/* ORACLE_Common > myDocFileInfo */
		<!-- SELECT ATTACH_FILE, ERRFILES FROM $SCHEMA$.EZ_JOB_MAPPER__DOC WHERE DATA_CENTER = #data_center# AND JOB = #job_nm# -->
		SELECT ATTACH_FILE, ERRFILES FROM $SCHEMA$.EZ_JOB_MAPPER_DOC WHERE doc_cd = #doc_cd#
	</select>
	<select id="myDoc06FileInfo" parameterClass="java.util.Map" resultClass="Doc06Bean">
	/* ORACLE_Common > myDoc06FileInfo */
		SELECT FILE_NM FROM $SCHEMA$.EZ_DOC_06 WHERE DOC_CD = #doc_cd#
	</select>
	
	<select id="myWorksInfoList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > myWorksInfoList */
	
		<iterate property="data_center_items" conjunction="UNION ALL">
			SELECT data_center_name, data_center, odate
				   , SUM(CASE WHEN status='total' THEN 0 ELSE 1 END) AS total_cnt
				   , SUM(CASE WHEN delete_flag != '1' AND status = 'Ended OK' THEN 1 ELSE 0 END) as ok_cnt
				   , SUM(CASE WHEN delete_flag != '1' AND status = 'Ended Not OK' THEN 1 ELSE 0 END) as not_ok_cnt
				   , SUM(CASE WHEN delete_flag != '1' AND status LIKE 'Wait%' THEN 1 ELSE 0 END) as wait_cnt
				   , SUM(CASE WHEN delete_flag != '1' AND status = 'Executing' THEN 1 ELSE 0 END) as running_cnt
				   , SUM(CASE WHEN delete_flag = '1' THEN 1 ELSE 0 END) as delete_cnt
				   , user_daily
			  FROM (
					SELECT tb1.data_center_name, tb1.data_center, tb1.odate, tb1.status, tb1.delete_flag, tb1.order_id
					<!-- , (CASE WHEN tb1.user_daily IS NULL THEN '' ELSE 'SYSTEM' END) as user_daily -->
						   , (CASE WHEN tb1.susi_cnt > 0 THEN 'SUSI' WHEN tb1.user_daily IS NULL THEN '' ELSE 'SYSTEM' END) as user_daily
					  FROM (
							SELECT tb4.data_center_name, tb4.data_center, tb1.odate, tb1.job_name, tb1.status, tb1.delete_flag, tb1.order_id
								    ,(select user_daily from def_tables where sched_table = REGEXP_SUBSTR(tb1.order_table, '[^/]+', 1, 1) and data_center = ( CASE WHEN INSTR(#data_center_items[].data_center#, ',') > 0
																								THEN SUBSTR(#data_center_items[].data_center#, INSTR(#data_center_items[].data_center#, ',')+1, LENGTH(#data_center_items[].data_center#))
																								ELSE #data_center_items[].data_center# END )) as user_daily
									,(select count(*) from $SCHEMA$.ez_doc_05 where job_name = tb1.job_name and order_id = tb1.order_id) as susi_cnt
							  FROM $data_center_items[].active_net_name$JOB tb1,
							  	   ( SELECT job, ( CASE WHEN INSTR(data_center, ',') > 0
								   				 	    THEN (SELECT scode_nm FROM $SCHEMA$.EZ_SCODE WHERE scode_cd = SUBSTR(data_center, 1, INSTR(data_center, ',')-1))
														ELSE data_center END ) AS data_center_name,  SUBSTR(data_center, INSTR(data_center, ',')+1) AS data_center 
								      					 FROM $SCHEMA$.EZ_JOB_MAPPER ) tb4
							 WHERE tb1.job_name = tb4.job AND tb4.data_center = #data_center_items[].data_center#
							 ) tb1 ) t1
			  GROUP	by data_center_name, data_center, odate, user_daily

		</iterate>
		order by odate desc, user_daily asc
	</select>	
	
	<select id="myDocInfoCntList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > myDocInfoCntList */	
		SELECT  SUM(CASE WHEN state_cd IN ('00','01','02','04') THEN 1 ELSE 0 END) AS approval_total_cnt
		       , SUM(CASE WHEN apply_cd IN ('01','02','03','04') THEN 1 ELSE 0 END) AS apply_total_cnt
			   , SUM(CASE WHEN state_cd = '00' THEN 1 ELSE 0 END) AS doc_save
	   		   , SUM(CASE WHEN state_cd = '01' THEN 1 ELSE 0 END) AS approval_ing
			   , SUM(CASE WHEN state_cd = '02' THEN 1 ELSE 0 END) AS approval_ok
	   		   , SUM(CASE WHEN state_cd = '04' THEN 1 ELSE 0 END) AS approval_cancel
			   , SUM(CASE WHEN apply_cd = '01' THEN 1 ELSE 0 END) AS apply_wait
			   , SUM(CASE WHEN apply_cd = '02' THEN 1 ELSE 0 END) AS apply_ok
			   , SUM(CASE WHEN apply_cd = '03' THEN 1 ELSE 0 END) AS apply_cancel
			   , SUM(CASE WHEN apply_cd = '04' THEN 1 ELSE 0 END) AS apply_fail

  		  FROM $SCHEMA$.EZ_DOC_MASTER tb1
 		 WHERE 1 = 1
 		   AND tb1.del_yn = 'N'
		   AND tb1.user_cd = #s_user_cd#
		   AND to_char(tb1.ins_date,'yyyy-mm-dd') > to_char(sysdate-7,'yyyy-mm-dd')
		   AND (tb1.jobgroup_id IS NULL or tb1.jobgroup_id = '')
		   AND tb1.doc_cd = (CASE WHEN tb1.main_doc_cd IS NOT NULL THEN tb1.main_doc_cd ELSE tb1.doc_cd END)
	</select>
	
	<select id="myAlarmDocInfoCntList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > myAlarmDocInfoCntList */


		SELECT tb1.data_center_name as data_center_name,
		 		SUM(CASE WHEN upper(message) IN ('ENDED NOT OK','LATE_SUB','LATE_TIME','LATE_EXEC')  THEN cnt ELSE 0 END) AS total_cnt,
			   SUM(CASE WHEN upper(message) = 'ENDED NOT OK' THEN cnt ELSE 0 END) AS not_ok_cnt,
			   SUM(CASE WHEN upper(message) = 'LATE_SUB' THEN cnt ELSE 0 END) AS late_sub_cnt,
			   SUM(CASE WHEN upper(message) = 'LATE_TIME' THEN cnt ELSE 0 END) AS late_time_cnt,
			   SUM(CASE WHEN upper(message) = 'LATE_EXEC' THEN cnt ELSE 0 END) AS late_exec_cnt
		  FROM (		   		
				SELECT( SELECT scode_nm FROM $SCHEMA$.ez_scode WHERE scode_eng_nm = tb1.data_center AND mcode_cd = 'M6') AS data_center_name, tb1.message, count(*) as cnt
				  FROM $SCHEMA$.EZ_ALARM tb1
				 WHERE 1 = 1
				   AND tb1.user_cd = #s_user_cd#
				   AND to_char(tb1.host_time,'yyyy-mm-dd') > to_char(sysdate-7,'yyyy-mm-dd')
				   AND (upper(tb1.message) = 'ENDED NOT OK'
				   		or upper(tb1.message) = 'LATE_SUB' 
				   		or upper(tb1.message) = 'LATE_TIME' 
				   		or upper(tb1.message) = 'LATE_EXEC'
				   		)
					GROUP BY tb1.data_center, tb1.message
				) tb1
		GROUP by data_center_name
		
	</select>
	
	<select id="myApprovalDocInfoList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > myApprovalDocInfoList */
	select TT.* from(
		SELECT tb1.doc_gb, tb3.user_nm, tb1.dept_nm, tb1.duty_nm, tb1.doc_group_id,
			   TO_CHAR(tb1.draft_date, 'YYYY/MM/DD HH24:MI:SS') AS draft_date,
			   ( CASE WHEN tb1.doc_gb = '01' THEN (SELECT title FROM $SCHEMA$.EZ_doc_01 WHERE doc_cd = tb1.doc_cd)
				      WHEN tb1.doc_gb = '02' THEN (SELECT title FROM $SCHEMA$.EZ_doc_02 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '03' THEN (SELECT title FROM $SCHEMA$.EZ_doc_03 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '04' THEN (SELECT title FROM $SCHEMA$.EZ_doc_04 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '05' THEN (SELECT title FROM $SCHEMA$.EZ_doc_05 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '06' THEN (SELECT title FROM $SCHEMA$.EZ_doc_06 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '07' THEN (SELECT title FROM $SCHEMA$.EZ_doc_07 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '08' THEN (SELECT title FROM $SCHEMA$.EZ_doc_08 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '09' THEN (SELECT title FROM $SCHEMA$.EZ_doc_09 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '10' THEN (SELECT error_description FROM $SCHEMA$.EZ_doc_10 WHERE doc_cd = tb1.doc_cd)
						ELSE '' END  ) AS title,
				( CASE WHEN tb1.doc_gb = '01' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_01 WHERE doc_cd = tb1.doc_cd)
						WHEN tb1.doc_gb = '02' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_02 WHERE doc_cd = tb1.doc_cd)
						WHEN tb1.doc_gb = '03' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_03 WHERE doc_cd = tb1.doc_cd)
						WHEN tb1.doc_gb = '04' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_04 WHERE doc_cd = tb1.doc_cd)
						WHEN tb1.doc_gb = '05' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_05 WHERE doc_cd = tb1.doc_cd)
						WHEN tb1.doc_gb = '06' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_06_detail WHERE doc_cd = tb1.doc_cd and seq = '1')
						WHEN tb1.doc_gb = '07' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_07 WHERE doc_cd = tb1.doc_cd)
						WHEN tb1.doc_gb = '08' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_08 WHERE doc_cd = tb1.doc_cd)
						WHEN tb1.doc_gb = '09' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_09 WHERE doc_cd = tb1.doc_cd)
						WHEN tb1.doc_gb = '10' THEN (SELECT job_name FROM $SCHEMA$.EZ_doc_10 WHERE doc_cd = tb1.doc_cd)
					  ELSE '' END  ) AS job_name,
			   ( CASE WHEN tb1.doc_gb = '01' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_01 WHERE doc_cd = tb1.doc_cd)
				      WHEN tb1.doc_gb = '02' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_02 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '03' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_03 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '04' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_04 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '05' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_05 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '06' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_06 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '07' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_07 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '08' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_08 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '09' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_09 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '10' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_10 WHERE doc_cd = tb1.doc_cd)
					 ELSE '' END  ) AS data_center,
			   (CASE WHEN tb1.doc_gb='06' then (select act_gb from $SCHEMA$.EZ_doc_06 where doc_cd=tb1.doc_cd)
					WHEN tb1.doc_gb='09' then (select doc_gb from $SCHEMA$.EZ_doc_09 where doc_cd=tb1.doc_cd)
					ELSE '' END) AS task_nm_detail
		   FROM $SCHEMA$.EZ_DOC_MASTER tb1
		  	 INNER JOIN $SCHEMA$.EZ_APPROVAL_DOC tb2 ON tb1.doc_cd = tb2.doc_cd
		  	 INNER JOIN $SCHEMA$.EZ_USER tb3 ON tb1.user_cd = tb3.user_cd
		  	 LEFT OUTER JOIN $SCHEMA$.EZ_USER tb4 ON tb2.user_cd = tb4.user_cd
		 WHERE 1 = 1
		   AND tb1.del_yn = 'N'
		   AND (
			 tb2.user_cd = (CASE WHEN tb2.dept_nm = 'GROUP' THEN null ELSE #s_user_cd# END)
					OR (tb2.approval_cd = '01' AND tb4.absence_user_cd =  #s_user_cd#
										 	   AND TO_CHAR(tb4.absence_start_date, 'yyyy-mm-dd') <![CDATA[ <= ]]> TO_CHAR(CURRENT_DATE, 'yyyy-mm-dd')
										  	   AND TO_CHAR(tb4.absence_end_date, 'yyyy-mm-dd') <![CDATA[ >= ]]> TO_CHAR(CURRENT_DATE, 'yyyy-mm-dd'))
		              OR ( #s_user_cd# IN (SELECT a.approval_cd FROM $SCHEMA$.EZ_GROUP_APPROVAL_LINE a WHERE a.group_line_grp_cd = tb2.user_cd and tb2.dept_nm = 'GROUP')
		              
		              			<!-- 굳이 없어도 되는 조건이 서브쿼리와 함께 적용되어 있는거 같아서 쿼리 수정 -->
								<!-- 2023.06.29 강명준 -->
								<!-- and (#s_user_cd# IN   (select REGEXP_SUBSTR(tb1.grp_approval_userlist, '[^,]+', 1, LEVEL)
																		from $SCHEMA$.ez_approval_doc tb1, $SCHEMA$.ez_doc_master tb2
																				where tb1.doc_cd = tb2.doc_cd
																				AND tb1.dept_nm = 'GROUP'
																				AND tb1.seq = t1.cur_approval_seq
																				and tb1.doc_cd = t1.doc_cd
																				CONNECT BY REGEXP_SUBSTR(tb1.grp_approval_userlist, '[^,]+', 1, LEVEL) IS NOT NULL
																				)) -->
								and #s_user_cd# IN (select REGEXP_SUBSTR(grp_approval_userlist, '[^,]+', 1, LEVEL)
											  		from dual
											  		CONNECT BY REGEXP_SUBSTR(grp_approval_userlist, '[^,]+', 1, LEVEL) IS NOT NULL) 
						 )

		    )
		   AND tb2.approval_cd = '01'
		   AND tb1.cur_approval_seq = tb2.seq
		   AND tb1.del_yn = 'N'
  		   and (tb1.apply_cd != '03' or tb1.apply_cd is null or tb1.apply_cd = '')
  		   AND (tb1.jobgroup_id IS NULL or tb1.jobgroup_id = '')
		   AND tb1.doc_cd = (CASE WHEN tb1.main_doc_cd IS NULL or tb1.main_doc_cd = '' THEN tb1.doc_cd ELSE tb1.main_doc_cd END)
  		   
<!-- 		   AND tb1.ins_date > CURRENT_DATE - '8 day'::interval  -->
		 ORDER BY tb1.draft_date DESC
		 ) TT
		 where 1=1
	</select>
	
	<select id="execDocInfoList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > execDocInfoList */
		SELECT *
		FROM(
		SELECT tb1.doc_gb, tb3.user_nm, tb1.dept_nm, tb1.duty_nm, 
			   TO_CHAR(tb1.draft_date, 'YYYY/MM/DD HH24:MI:SS') AS draft_date,
			   ( CASE WHEN tb1.doc_gb = '01' THEN (SELECT title FROM $SCHEMA$.EZ_doc_01 WHERE doc_cd = tb1.doc_cd)
				      WHEN tb1.doc_gb = '02' THEN (SELECT title FROM $SCHEMA$.EZ_doc_02 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '03' THEN (SELECT title FROM $SCHEMA$.EZ_doc_03 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '04' THEN (SELECT title FROM $SCHEMA$.EZ_doc_04 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '05' THEN (SELECT title FROM $SCHEMA$.EZ_doc_05 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '06' THEN (SELECT title FROM $SCHEMA$.EZ_doc_06 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '07' THEN (SELECT title FROM $SCHEMA$.EZ_doc_07 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '08' THEN (SELECT title FROM $SCHEMA$.EZ_doc_08 WHERE doc_cd = tb1.doc_cd)
					  ELSE '' END  ) AS job_name,
			   ( CASE WHEN tb1.doc_gb = '01' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_01 WHERE doc_cd = tb1.doc_cd)
				      WHEN tb1.doc_gb = '02' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_02 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '03' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_03 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '04' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_04 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '05' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_05 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '06' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_06 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '07' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_07 WHERE doc_cd = tb1.doc_cd)
					  WHEN tb1.doc_gb = '08' THEN (SELECT data_center FROM $SCHEMA$.EZ_doc_08 WHERE doc_cd = tb1.doc_cd)
					  ELSE '' END  ) AS data_center

		   FROM $SCHEMA$.EZ_DOC_MASTER tb1
		  	 INNER JOIN $SCHEMA$.EZ_APPROVAL_DOC tb2 ON tb1.doc_cd = tb2.doc_cd
		  	 INNER JOIN $SCHEMA$.EZ_USER tb3 ON tb1.user_cd = tb3.user_cd
		  	 LEFT OUTER JOIN $SCHEMA$.EZ_USER tb4 ON tb2.user_cd = tb4.user_cd
		 WHERE 1 = 1
		   AND tb1.del_yn = 'N'
		   AND tb1.apply_cd = '01'
		   AND tb1.cur_approval_seq = tb2.seq
		   AND tb1.del_yn = 'N'
  		   AND tb1.doc_gb IN ('01', '02', '03', '04', '05', '06', '07','08')
	  		   AND (tb1.jobgroup_id IS NULL or tb1.jobgroup_id = '')
	<!--   		   AND tb1.ins_date > CURRENT_DATE - '8 day'::interval  -->
		 ORDER BY tb1.draft_date DESC
			 ) TT
			 where 1=1
			 <isNotEmpty prepend="and" property="data_center_item">
					TT.data_center = #data_center_item#
			 </isNotEmpty>
	</select>
	
	<select id="myWorkList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > myWorkList */
		SELECT work_cd, work_date, content
		  FROM $SCHEMA$.EZ_WORK
		 WHERE user_cd = #s_user_cd#
		 ORDER BY work_date DESC
	</select>

	<select id="myWorksInfo" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > myWorksInfo */
	
		<iterate property="data_center_items" conjunction="UNION ALL">
		SELECT A.CNT AS STATIS FROM(
			SELECT COUNT(1) AS CNT FROM $data_center_items[].active_net_name$JOB T1 LEFT OUTER JOIN 
			(SELECT USER_CD_1, JOB, DATA_CENTER FROM $SCHEMA$.EZ_JOB_MAPPER )T2
			ON T1.JOB_NAME = T2.JOB
			WHERE 1 = 1
			AND T2.USER_CD_1 = $s_user_cd$
			
			UNION ALL
			
			SELECT COUNT(1) AS CNT FROM $data_center_items[].active_net_name$JOB T1 LEFT OUTER JOIN 
			(SELECT USER_CD_1, JOB, DATA_CENTER FROM $SCHEMA$.EZ_JOB_MAPPER )T2
			ON T1.JOB_NAME = T2.JOB
			WHERE 1 = 1
			AND T2.USER_CD_1 = $s_user_cd$
			AND T1.STATUS = 'Ended Not OK' 
			
			UNION ALL
			
			SELECT COUNT(1) AS CNT FROM $data_center_items[].active_net_name$JOB T1 LEFT OUTER JOIN 
			(SELECT USER_CD_1, JOB, DATA_CENTER FROM $SCHEMA$.EZ_JOB_MAPPER )T2
			ON T1.JOB_NAME = T2.JOB
			WHERE 1 = 1
			AND T2.USER_CD_1 = $s_user_cd$
			AND T1.STATUS = 'Ended OK' 
			
			UNION ALL
			
			SELECT COUNT(1) AS CNT FROM $data_center_items[].active_net_name$JOB T1 LEFT OUTER JOIN 
			(SELECT USER_CD_1, JOB, DATA_CENTER FROM $SCHEMA$.EZ_JOB_MAPPER )T2
			ON T1.JOB_NAME = T2.JOB
			WHERE 1 = 1
			AND T2.USER_CD_1 = $s_user_cd$
			AND T1.STATUS = 'Executing'
			
			UNION ALL
			
			SELECT COUNT(1) AS CNT FROM $data_center_items[].active_net_name$JOB T1 LEFT OUTER JOIN 
			(SELECT USER_CD_1, JOB, DATA_CENTER FROM $SCHEMA$.EZ_JOB_MAPPER )T2
			ON T1.JOB_NAME = T2.JOB
			WHERE 1 = 1
			AND T2.USER_CD_1 = $s_user_cd$
			AND T1.STATUS LIKE '%Wait%' 
			
			UNION ALL
			
			SELECT COUNT(1) AS CNT FROM $data_center_items[].active_net_name$JOB T1 LEFT OUTER JOIN 
			(SELECT ORDER_ID,MESSAGE,JOB_NAME FROM ALARM) T2
			ON T1.ORDER_ID = T2.ORDER_ID LEFT OUTER JOIN 
			(SELECT USER_CD_1, JOB, DATA_CENTER FROM $SCHEMA$.EZ_JOB_MAPPER )T3
			ON T1.JOB_NAME = T2.JOB_NAME
			AND T1.JOB_NAME = T3.JOB
			AND T2.JOB_NAME = T3.JOB
			WHERE 1 = 1
			AND T3.USER_CD_1 = $s_user_cd$
			AND T2.MESSAGE LIKE '%Late%'
		) A
		</iterate>
		
	</select>
	
	<select id="ctmActiveNetName" parameterClass="java.util.Map" resultClass="java.lang.String">
	/* ORACLE_Common > ctmActiveNetName */
		SELECT ACTIVE_NET_NAME FROM COMM 
		 WHERE DATA_CENTER = ( CASE WHEN INSTR(#data_center#, ',') > 0
									 THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
							 	    ELSE #data_center# END )
	</select>
	<select id="mainAllDocInfoListCnt" parameterClass="java.util.Map" resultClass="java.lang.String">
	/* ORACLE_Common > mainAllDocInfoListCnt */
		SELECT 
			<!-- SUM(AA.DOC_01)||','||SUM(AA.DOC_02)||','||SUM(AA.DOC_05)||','||SUM(AA.DOC_06) AS TOTAL_SUM -->
			SUM(AA.DOC_01)||','||SUM(AA.DOC_02 + AA.DOC_05)||',0,'||SUM(AA.DOC_06) AS TOTAL_SUM
		FROM(
			SELECT
				(CASE WHEN A.DOC_GB = '01' THEN 1 ELSE 0 END) AS DOC_01,
				(CASE WHEN A.DOC_GB = '02' THEN 1 ELSE 0 END) AS DOC_02,
				(CASE WHEN A.DOC_GB = '05' THEN 1 ELSE 0 END) AS DOC_05,
				(CASE WHEN A.DOC_GB = '06' THEN 1 ELSE 0 END) AS DOC_06
			FROM 
				$SCHEMA$.EZ_DOC_MASTER A, $SCHEMA$.EZ_USER B, $SCHEMA$.EZ_APPROVAL_DOC C
			WHERE 1=1
				AND A.DEL_YN = 'N'
				AND C.USER_CD = $s_user_cd$
				AND A.USER_CD = B.USER_CD
				and A.cur_approval_seq = C.seq
				and A.doc_cd = C.doc_cd
				and C.approval_cd =  '01'
				AND A.JOBGROUP_ID IS NULL
				AND A.DOC_CD = (CASE WHEN A.MAIN_DOC_CD IS NOT NULL THEN A.MAIN_DOC_CD ELSE A.DOC_CD END)
				and TO_CHAR(draft_date, 'YYYYMMDD') >= TO_CHAR(sysdate , 'YYYYMMDD') - 8
				and TO_CHAR(draft_date, 'YYYYMMDD') <![CDATA[ <= ]]> TO_CHAR(sysdate, 'YYYYMMDD')
		) AA
	</select>
	<select id="mainAllDocInfoList" parameterClass="java.util.Map" resultClass="DocInfoBean">
	/* ORACLE_Common > mainAllDocInfoList */
		SELECT * FROM(
			SELECT
				AA.DOC_CD, AA.doc_gb,
				AA.USER_CD, AA.USER_ID, AA.USER_NM, AA.DEPT_NM, AA.DUTY_NM,
				AA.TITLE, AA.JOB_NAME, AA.DRAFT_DATE
			FROM(
				SELECT 
					A.DOC_CD, A.DOC_GB, A.USER_CD, B.USER_ID, B.USER_NM, A.DEPT_NM, A.DUTY_NM		
					,TO_CHAR(A.DRAFT_DATE,'YYYY.MM.DD') AS DRAFT_DATE			
					,(CASE WHEN A.DOC_GB='01' THEN (SELECT TITLE FROM $SCHEMA$.EZ_DOC_01 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='02' THEN (SELECT TITLE FROM $SCHEMA$.EZ_DOC_02 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='03' THEN (SELECT TITLE FROM $SCHEMA$.EZ_DOC_03 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='04' THEN (SELECT TITLE FROM $SCHEMA$.EZ_DOC_04 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='05' THEN (SELECT TITLE FROM $SCHEMA$.EZ_DOC_05 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='06' THEN (SELECT TITLE FROM $SCHEMA$.EZ_DOC_06 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='07' THEN (SELECT TITLE FROM $SCHEMA$.EZ_DOC_07 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='09' THEN (SELECT TITLE FROM $SCHEMA$.EZ_DOC_09 WHERE DOC_CD=A.DOC_CD)
					 		ELSE '' END) AS TITLE
					,(CASE WHEN A.DOC_GB='01' THEN (SELECT JOB_NAME FROM $SCHEMA$.EZ_DOC_01 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='02' THEN (SELECT JOB_NAME FROM $SCHEMA$.EZ_DOC_02 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='03' THEN (SELECT JOB_NAME FROM $SCHEMA$.EZ_DOC_03 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='04' THEN (SELECT JOB_NAME FROM $SCHEMA$.EZ_DOC_04 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='05' THEN (SELECT JOB_NAME FROM $SCHEMA$.EZ_DOC_05 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='06' THEN (SELECT FILE_NM FROM $SCHEMA$.EZ_DOC_06 WHERE DOC_CD=A.DOC_CD)
							WHEN A.DOC_GB='07' THEN (SELECT JOB_NAME FROM $SCHEMA$.EZ_DOC_07 WHERE DOC_CD=A.DOC_CD)
						    WHEN A.DOC_GB='09' THEN (SELECT JOB_NAME FROM $SCHEMA$.EZ_DOC_09 WHERE DOC_CD=A.DOC_CD)
					 		ELSE '' END) AS JOB_NAME
					,(case when A.DOC_GB='06' then (select act_gb from $SCHEMA$.EZ_doc_06 where doc_cd=A.doc_cd)
						   when A.DOC_GB='07' then (select after_status from $SCHEMA$.EZ_doc_07 tb1 where tb1.doc_cd=A.doc_cd)
						   else '' end) AS task_nm_detail
				FROM 
					$SCHEMA$.EZ_DOC_MASTER A, $SCHEMA$.EZ_USER B, $SCHEMA$.EZ_APPROVAL_DOC C
				WHERE 1=1
				AND A.DEL_YN = 'N'
				AND C.USER_CD = $s_user_cd$
				AND A.USER_CD = B.USER_CD
				and A.cur_approval_seq = C.seq
				and A.doc_cd = C.doc_cd
				and C.approval_cd =  '01'
				AND A.JOBGROUP_ID IS NULL
				AND A.DOC_CD = (CASE WHEN A.MAIN_DOC_CD IS NOT NULL THEN A.MAIN_DOC_CD ELSE A.DOC_CD END)
				and TO_CHAR(draft_date, 'YYYYMMDD')::numeric >= TO_CHAR(sysdate, 'YYYYMMDD')::numeric  - 8
				and TO_CHAR(draft_date, 'YYYYMMDD') <![CDATA[ <= ]]> TO_CHAR(sysdate, 'YYYYMMDD')
				
			) AA ORDER BY AA.DRAFT_DATE DESC
		) 
	</select>
	<select id="ctmLogPartChk" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > ctmLogPartChk */
		SELECT * FROM $SCHEMA$.EZ_CMR_IOALOG_$data_center_code$ PARTITION(P_$odate$) WHERE ROWNUM = 1
	</select>
	<sql id="ctmLogListInc">
	/* ORACLE_Common > ctmLogListInc */
		SELECT
			SUBSTR(LOGDATE,5,4) AS LOGDATE, SUBSTR(LOGTIME,0,4) AS LOGTIME, 
			JOBNAME, ORDERNO, SUBSYS, MSGID, MESSAGE, KEYSTMP
		FROM					
			$SCHEMA$.EZ_CMR_IOALOG_$data_center_code$ PARTITION(P_$odate$)					
		WHERE 
			ORDERNO = #order_no#
			AND MSGID != '5216'
			AND LOGDATE = #odate#
								
		UNION
	</sql>
	<select id="ctmLogList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > ctmLogList */
		SELECT
			SUBSTR(AA.LOGDATE,5,4) AS LOGDATE, SUBSTR(AA.LOGTIME,1,4) AS LOGTIME, AA.JOBNAME, AA.ORDERNO, AA.SUBSYS, AA.MSGID, AA.MESSAGE
		FROM(
			<!-- <isNotEmpty property="odate">
				<include refid="ctmLogListInc" />
			</isNotEmpty> -->
			
			SELECT
				LOGDATE, LOGTIME,
				JOBNAME, ORDERNO, SUBSYS, MSGID, MESSAGE, KEYSTMP
			FROM 
				$SCHEMA$.EZ_CMR_IOALOG_$data_center_code$
			WHERE 1=1
				AND ORDERNO = $order_no$
				AND MSGID != '5216'
				<isNotEmpty property="odate" prepend="AND">
					LOGDATE = #odate#
				</isNotEmpty>
				
			UNION
			
			SELECT * FROM dblink('ctm_dblink', 
			'SELECT
				LOGDATE, LOGTIME, 
				JOBNAME, ORDERNO, SUBSYS, MSGID, MESSAGE, KEYSTMP
			FROM 
				$CTMSVR_SCHEMA$.CMR_IOALOG
			WHERE 1=1
				AND ORDERNO = $order_no$
				AND MSGID != ''5216''
				<isNotEmpty property="odate" prepend="AND">
					LOGDATE = $odate$
				</isNotEmpty>
			') as ctm_table(logdate character(8), logtime character(6), jobname character varying(64), orderno integer, subsys character(2), msgid character(4), message character varying(1024), keystmp character(22))

<!-- 			SELECT -->
<!-- 				SUBSTR(LOGDATE,5,4) AS LOGDATE, SUBSTR(LOGTIME,0,4) AS LOGTIME,  -->
<!-- 				JOBNAME, ORDERNO, SUBSYS, MSGID, MESSAGE, KEYSTMP -->
<!-- 			FROM  -->
<!-- 				$CTMSVR_SCHEMA$.CMR_IOALOG -->
				
<!-- 			WHERE  -->
<!-- 				ORDERNO = #order_no# -->
<!-- 				AND MSGID != '5216' -->
<!-- 				<isNotEmpty property="odate" prepend="AND"> -->
<!-- 					LOGDATE = #odate# -->
<!-- 				</isNotEmpty> -->
		) AA
		ORDER BY AA.KEYSTMP ASC	
	</select>
	
	<select id="ctmIoalogList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > ctmIoalogList */
		SELECT
			LOGDATE, LOGTIME, JOBNAME, ORDERNO, SUBSYS, MSGID, MESSAGE, KEYSTMP, NODEID
		FROM
			$CTMSVR_SCHEMA$.CMR_IOALOG
		WHERE
			ORDERNO <![CDATA[ > ]]> 0
			AND MSGID != '5216'
			AND LOGDATE = TO_CHAR(sysdate-1,'YYYYMMDD')
	</select>
	
	<select id="userApprovalLineList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > userApprovalLineList */
		SELECT
			A.LINE_CD, A.LINE_GRP_CD, A.APPROVAL_CD, A.USE_YN, A.APPROVAL_SEQ, A.APPROVAL_GB,
			TO_CHAR(A.INS_DATE, 'YYYY.MM.DD') AS INS_DATE, B.USER_NM AS APPROVAL_NM,
			(SELECT DUTY_NM FROM $SCHEMA$.EZ_DUTY WHERE DUTY_CD = B.DUTY_CD) AS DUTY_NM,
			(SELECT DEPT_NM FROM $SCHEMA$.EZ_DEPT WHERE DEPT_CD = B.DEPT_CD) AS DEPT_NM,
			B.USER_ID
		FROM
			$SCHEMA$.EZ_USER_APPROVAL_LINE A,
			$SCHEMA$.EZ_USER B
		WHERE
			A.LINE_GRP_CD = $line_grp_cd$
			<isEmpty property="admin" prepend="AND">
				A.INS_USER_CD = $s_user_cd$
			</isEmpty>
			AND A.APPROVAL_CD = B.USER_CD
			AND B.DEL_YN != 'Y'
		ORDER BY APPROVAL_SEQ ASC
	</select>
	
	<select id="adminApprovalLineList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > adminApprovalLineList */
		SELECT
			A.ADMIN_LINE_CD, A.ADMIN_LINE_GRP_CD, A.APPROVAL_CD, A.USE_YN, A.APPROVAL_SEQ, A.APPROVAL_GB, A.APPROVAL_TYPE,
			TO_CHAR(A.INS_DATE, 'YYYY.MM.DD') AS INS_DATE,
			(SELECT DUTY_NM FROM $SCHEMA$.EZ_DUTY WHERE DUTY_CD = (SELECT DUTY_CD FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD)) AS DUTY_NM,
			(SELECT DEPT_NM FROM $SCHEMA$.EZ_DEPT WHERE DEPT_CD = (SELECT DEPT_CD FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD)) AS DEPT_NM,
			(SELECT USER_NM FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD) AS APPROVAL_NM,
			GROUP_LINE_GRP_CD,
			(SELECT GROUP_LINE_GRP_NM FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE GROUP_LINE_GRP_CD = A.GROUP_LINE_GRP_CD) AS GROUP_LINE_GRP_NM,
			(SELECT USER_ID FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD) USER_ID
		FROM
			$SCHEMA$.EZ_ADMIN_APPROVAL_LINE A
		WHERE
			A.ADMIN_LINE_GRP_CD = $admin_line_grp_cd$
		ORDER BY APPROVAL_SEQ ASC
	</select>
	
	<select id="adminApprovalLineList_u" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > adminApprovalLineList_u */
		SELECT
			A.ADMIN_LINE_CD
			, A.ADMIN_LINE_GRP_CD
			, A.APPROVAL_CD, A.USE_YN
			, ROW_NUMBER() OVER(ORDER BY A.APPROVAL_SEQ) AS APPROVAL_SEQ
			, A.APPROVAL_GB
			, A.APPROVAL_TYPE
			,TO_CHAR(A.INS_DATE, 'YYYY.MM.DD') AS INS_DATE
			,(SELECT DUTY_NM FROM $SCHEMA$.EZ_DUTY WHERE DUTY_CD = (SELECT DUTY_CD FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD)) AS DUTY_NM
			,(SELECT DEPT_NM FROM $SCHEMA$.EZ_DEPT WHERE DEPT_CD = (SELECT DEPT_CD FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD)) AS DEPT_NM
<!-- 			(SELECT USER_NM FROM $SCHEMA$.EZ_USER WHERE USER_CD = B.APPROVAL_CD) AS APPROVAL_NM, -->
			,CASE WHEN a.approval_cd is not null THEN (SELECT USER_NM FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD) ELSE '개인결재' END AS APPROVAL_NM
			,CASE WHEN a.approval_cd is not null then (SELECT USER_ID FROM $SCHEMA$.EZ_USER where user_cd = A.approval_cd ) ELSE '개인결재' end AS APPROVAL_USER_ID
			,GROUP_LINE_GRP_CD
			,(SELECT GROUP_LINE_GRP_NM FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE GROUP_LINE_GRP_CD = A.GROUP_LINE_GRP_CD) AS GROUP_LINE_GRP_NM
			
		FROM
			$SCHEMA$.EZ_ADMIN_APPROVAL_LINE A 
			<!-- LEFT OUTER JOIN (SELECT Z.APPROVAL_SEQ, Z.APPROVAL_CD, X.USER_APPR_GB
			FROM $SCHEMA$.EZ_USER_APPROVAL_LINE Z
				INNER JOIN $SCHEMA$.EZ_USER_APPROVAL_GROUP Y ON Z.LINE_GRP_CD = Y.LINE_GRP_CD
				INNER JOIN $SCHEMA$.EZ_USER X ON Z.APPROVAL_CD = X.USER_CD
			WHERE Y.OWNER_USER_CD = $s_user_cd$ AND Y.USE_YN = 'Y'
			ORDER BY Z.APPROVAL_SEQ) B ON A.APPROVAL_GB = B.USER_APPR_GB -->
		WHERE
			A.ADMIN_LINE_GRP_CD = $admin_line_grp_cd$
	</select>
	
	<select id="groupApprovalLineList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > groupApprovalLineList */
		SELECT
			A.GROUP_LINE_CD, A.GROUP_LINE_GRP_CD, A.APPROVAL_CD, A.USE_YN, A.APPROVAL_SEQ,
			TO_CHAR(A.INS_DATE, 'YYYY.MM.DD') AS INS_DATE, 
			B.USER_NM AS APPROVAL_NM,
			(SELECT DUTY_NM FROM $SCHEMA$.EZ_DUTY WHERE DUTY_CD = B.DUTY_CD) AS DUTY_NM,
			(SELECT DEPT_NM FROM $SCHEMA$.EZ_DEPT WHERE DEPT_CD = B.DEPT_CD) AS DEPT_NM
			,B.USER_CD
			,B.USER_ID
		FROM
			$SCHEMA$.EZ_GROUP_APPROVAL_LINE A,
			$SCHEMA$.EZ_USER B
		WHERE 1=1
		AND	A.GROUP_LINE_GRP_CD = $group_line_grp_cd$
		AND A.APPROVAL_CD = B.USER_CD
		AND B.DEL_YN != 'Y'
		ORDER BY B.USER_NM
		<!-- 
		SELECT
			B.USER_NM AS APPROVAL_NM,
			(SELECT DUTY_NM FROM $SCHEMA$.EZ_DUTY WHERE DUTY_CD = B.DUTY_CD) AS DUTY_NM,
			(SELECT DEPT_NM FROM $SCHEMA$.EZ_DEPT WHERE DEPT_CD = B.DEPT_CD) AS DEPT_NM
		FROM
			$SCHEMA$.EZ_GROUP_APPROVAL_GROUP A
				INNER JOIN $SCHEMA$.EZ_USER B ON A.APPROVAL_GB = B.USER_APPR_GB
		WHERE
			A.GROUP_LINE_GRP_CD = #group_line_grp_cd#
		ORDER BY B.USER_NM -->
	</select>
	
	<select id="userApprovalGroupList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > userApprovalGroupList */
		SELECT
			LINE_GRP_CD, LINE_GRP_NM, USE_YN, OWNER_USER_CD,
			TO_CHAR(INS_DATE, 'YYYY.MM.DD') AS INS_DATE
		FROM
			$SCHEMA$.EZ_USER_APPROVAL_GROUP A
		WHERE
			INS_USER_CD = $s_user_cd$
			<isNotEmpty property="s_use_yn" prepend="AND">
				USE_YN = #s_use_yn#
			</isNotEmpty>
		ORDER BY A.INS_DATE ASC
	</select>
	
	<select id="adminApprovalGroupList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > adminApprovalGroupList */
		SELECT admin_line_grp_cd, admin_line_grp_nm, use_yn, doc_gubun, top_level_yn, schedule_yn, post_approval_yn,
			   TO_CHAR(ins_date, 'YYYY.MM.DD') AS INS_DATE
		  FROM $SCHEMA$.EZ_ADMIN_APPROVAL_GROUP a
		  WHERE 1=1
		 ORDER BY a.ins_date, a.admin_line_grp_cd ASC
	</select>
	
	<select id="groupApprovalGroupList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > groupApprovalGroupList */
		SELECT 
			group_line_grp_cd, group_line_grp_nm, use_yn,
			TO_CHAR(ins_date, 'YYYY.MM.DD') AS INS_DATE
		FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP a
		WHERE 1 = 1
		 
		<isNotEmpty prepend="AND" property="p_search_text">			
			group_line_grp_nm LIKE '%'||#p_search_text#||'%'			
		</isNotEmpty>
		  
		 ORDER BY a.ins_date ASC
	</select>
	
	<select id="groupUserGroup" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > groupUserGroup */
		SELECT 
			group_user_group_cd, group_user_group_nm, use_yn,ins_user_cd,
			TO_CHAR(ins_date, 'YYYY.MM.DD') AS INS_DATE
		FROM $SCHEMA$.ez_group_user_group a
		WHERE 1 = 1
		 
		<isNotEmpty prepend="AND" property="p_search_text">			
			group_user_group_nm LIKE '%'||#p_search_text#||'%'			
		</isNotEmpty>
		  
		 ORDER BY a.ins_date ASC
	</select>
	
	<insert id="groupUserGroupInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > groupUserGroupInsert */			
		INSERT INTO $SCHEMA$.EZ_GROUP_USER_GROUP(GROUP_USER_GROUP_CD, GROUP_USER_GROUP_NM, USE_YN, INS_USER_CD, ins_date)
		VALUES($group_user_group_cd$, #group_user_group_nm#, #use_yn#, $s_user_cd$, sysdate)
	</insert>

	<update id="groupUserGroupUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > groupUserGroupUpdate */
		UPDATE $SCHEMA$.EZ_GROUP_USER_GROUP
			<dynamic prepend="SET">
				<isNotEmpty property="group_user_group_nm" prepend=",">
					GROUP_USER_GROUP_NM = #group_user_group_nm#
				</isNotEmpty>
				<isNotEmpty property="use_yn" prepend=",">
					USE_YN = #use_yn#
				</isNotEmpty>
			</dynamic>
		WHERE
			GROUP_USER_GROUP_CD = $group_user_group_cd$
	</update>

	<delete id="groupUserGroupDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > groupUserGroupDelete */
<!-- 		DECLARE BEGIN -->
			DELETE FROM $SCHEMA$.EZ_GROUP_USER_GROUP WHERE GROUP_USER_GROUP_CD = $group_user_group_cd$;
<!-- 			DELETE FROM $SCHEMA$.EZ_GROUP_USER_LINE WHERE GROUP_LINE_GRP_CD = $group_line_grp_cd$; -->
<!-- 		END; -->
	</delete>
	
	<select id="userApprovalGroupSeq" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > userApprovalGroupSeq */
		SELECT nvl(MAX(LINE_GRP_CD),0)+1 FROM $SCHEMA$.EZ_USER_APPROVAL_GROUP
	</select>
	
	<select id="adminApprovalGroupSeq" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > adminApprovalGroupSeq */
		SELECT nvl(MAX(ADMIN_LINE_GRP_CD),0)+1 FROM $SCHEMA$.EZ_ADMIN_APPROVAL_GROUP
	</select>
	
	<select id="groupApprovalGroupSeq" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > groupApprovalGroupSeq */
		SELECT nvl(MAX(GROUP_LINE_GRP_CD),0)+1 FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP
	</select>
	
	<select id="groupUserGroupSeq" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > groupUserGroupSeq */
		SELECT nvl(MAX(GROUP_USER_GROUP_CD),0)+1 FROM $SCHEMA$.EZ_GROUP_User_GROUP
	</select>
	
	<select id="userApprovalLineSeq" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > userApprovalLineSeq */
		SELECT nvl(MAX(LINE_CD),0)+1 FROM $SCHEMA$.EZ_USER_APPROVAL_LINE
	</select>
	
	<select id="adminApprovalLineSeq" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > adminApprovalLineSeq */
		SELECT nvl(MAX(ADMIN_LINE_CD),0)+1 FROM $SCHEMA$.EZ_ADMIN_APPROVAL_LINE
	</select>
	
	<select id="groupApprovalLineSeq" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > groupApprovalLineSeq */
		SELECT nvl(MAX(GROUP_LINE_CD),0)+1 FROM $SCHEMA$.EZ_GROUP_APPROVAL_LINE
	</select>
	
	<select id="defTableCnt" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > defTableCnt */
		SELECT COUNT(*) FROM DEF_TABLES 
		 WHERE SCHED_TABLE = #table_name# 
		   AND DATA_CENTER = ( CASE WHEN INSTR(#data_center#, ',') > 0
 									 THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
									ELSE #data_center# END )
	</select>
	<select id="ctmAgentList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > ctmAgentList */
		SELECT
			A.NODEID, A.AGSTAT, A.HOSTNAME, A.VERSION, A.OS_NAME, A.PLATFORM, 
			TO_CHAR(TO_TIMESTAMP(A.LAST_UPD, 'YYYYMMDDHH24MISS'), 'YYYY.MM.DD HH24:MI:SS') AS LAST_UPD,
			B.AGENT_NM, B.AGENT_INFO	
		FROM
			dblink('ctm_dblink', 'SELECT * FROM CMR_NODES') as A (
		  nodeid character varying(50),
		  phys_nodeid character varying(50),
		  agstat character(2),
		  first_set character varying(14),
		  last_upd character varying(14),
		  nodetype character(1),
		  is_default character(2),
		  hostname character varying(255),
		  domain_name character varying(255),
		  version character varying(255),
		  os_name character varying(255),
		  platform character varying(32),
		  error_msg character varying(255),
		  permhosts character varying(255),
		  install_user character varying(30),
		  user_validation character(2),
		  public_key text,
		  key_timestmp character(22)
		) 
		LEFT OUTER JOIN $SCHEMA$.EZ_CTM_AGENT_INFO B
			ON A.NODEID = B.NODEID
		
		ORDER BY NODEID ASC
		
<!-- 		SELECT -->
<!-- 			A.NODEID, A.AGSTAT, A.HOSTNAME, A.VERSION, A.OS_NAME, A.PLATFORM,  -->
<!-- 			TO_DATE(A.LAST_UPD,'YYYY.MM.DD HH24:MI:SS') AS LAST_UPD, -->
<!-- 			B.AGENT_NM, B.AGENT_INFO -->
<!-- 		FROM -->
<!-- 			$CTMSVR_SCHEMA$.CMR_NODES A LEFT OUTER JOIN $SCHEMA$.EZ_CTM_AGENT_INFO B -->
<!-- 				ON A.NODEID = B.NODEID -->
<!-- 		ORDER BY NODEID ASC -->
		
	</select>
	
	<!-- 수행서버 > 폴더로 권한 변경(22.08.01 김은희) -->
	<select id="mHostList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > mHostList */
		SELECT
		DISTINCT A.HOST_CD, B.AGENT AS NODE_ID, B.AGENT_NM AS NODE_NM
		FROM
		$SCHEMA$.EZ_GRP_HOST A,
		$SCHEMA$.EZ_HOST B
		WHERE
		A.HOST_CD = B.HOST_CD
		<isNotEmpty property="grp_cd" prepend="AND">
			A.GRP_CD = $grp_cd$
		</isNotEmpty>
		<isNotEmpty property="grp_nm" prepend="AND">
			A.GRP_CD in (SELECT GRP_CD FROM $SCHEMA$.EZ_APP_GRP_CODE WHERE (GRP_DEPTH = 1) AND GRP_ENG_NM = #grp_nm#)
		</isNotEmpty>
		<isNotEmpty property="node_id" prepend="AND">
			B.AGENT in (#node_id#)
		</isNotEmpty>
		<isNotEmpty property="data_center" prepend="AND">
			B.DATA_CENTER = #data_center#
		</isNotEmpty>

		ORDER BY B.AGENT ASC

	</select>
	<select id="argumentList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > argumentList */
		(
		 SELECT A.ARG_ENG_NM AS SCODE_ENG_NM, A.ARG_DESC AS SCODE_DESC, A.ARG_VALUE, A.ARG_DATE
		 
		 	<isEmpty property="cur_date">
		 		, 'Y' AS USE_YN
		 	</isEmpty>
		 	<isNotEmpty property="cur_date">
		 		, (CASE WHEN #cur_date# = TO_CHAR(sysdate,'YYYYMMDD') THEN 'Y' ELSE 'N' END) AS USE_YN
		 	</isNotEmpty>
		 	
		 FROM $SCHEMA$.EZ_ARGUMENT_INFO A
		 WHERE
		 
		 	<isEmpty property="cur_date">
		 		A.ARG_DATE = TO_CHAR(sysdate,'YYYYMMDD')
		 	</isEmpty>
		 	<isNotEmpty property="cur_date">
		 		A.ARG_DATE = #cur_date#
		 	</isNotEmpty>
		 	
		 	<isNotEmpty property="arg_eng_nm" prepend="AND">
				arg_eng_nm LIKE '%'||#arg_eng_nm#||'%'				
			</isNotEmpty>
		 	
		 UNION ALL 
		 
		 SELECT A.ARG_ENG_NM AS SCODE_ENG_NM, A.ARG_DESC AS SCODE_DESC, A.ARG_VALUE, A.ARG_DATE
		 
		 	<isEmpty property="cur_date">
		 		, 'Y' AS USE_YN
		 	</isEmpty>
		 	<isNotEmpty property="cur_date">
		 		, (CASE WHEN #cur_date# = TO_CHAR(sysdate,'YYYYMMDD') THEN 'Y' ELSE 'N' END) AS USE_YN
		 	</isNotEmpty>
		 	
		 FROM $SCHEMA$.EZ_ARGUMENT_INFO A
		 WHERE A.ARG_DATE IS NULL		 
		  
		<isNotEmpty property="arg_eng_nm" prepend="AND">
			arg_eng_nm LIKE '%'||#arg_eng_nm#||'%'
		</isNotEmpty>		
		 
		 )		 	
		
		 ORDER BY SCODE_ENG_NM ASC
	</select>
		
	<delete id="ctmIoaLogDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > ctmIoaLogDelete */
		DELETE FROM $SCHEMA$.EZ_CMR_IOALOG_$data_center_code$
		 WHERE ORDERNO <![CDATA[ > ]]> 0
			   AND MSGID != '5216'
			   AND LOGDATE = TO_CHAR(sysdate-1,'YYYYMMDD')
	</delete>
	
	<insert id="ctmIoaLogInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > ctmIoaLogInsert */		
		INSERT INTO $SCHEMA$.EZ_CMR_IOALOG_$data_center_code$(LOGDATE, LOGTIME, JOBNAME, ORDERNO, SUBSYS, MSGID, MESSAGE, KEYSTMP, NODEID)
			SELECT
				LOGDATE, LOGTIME, JOBNAME, ORDERNO, SUBSYS, MSGID, MESSAGE, KEYSTMP, NODEID
			FROM
				$CTMSVR_SCHEMA$.CMR_IOALOG
			WHERE
				ORDERNO <![CDATA[ > ]]> 0
				AND MSGID != '5216'
				AND LOGDATE = TO_CHAR(sysdate-1,'YYYYMMDD')	
	</insert>
	<update id="ctmIoaLogPartitionCreate" parameterClass="java.util.Map">
	/* ORACLE_Common > ctmIoaLogPartitionCreate */
		ALTER TABLE $SCHEMA$.EZ_CMR_IOALOG_$data_center_code$ ADD PARTITION P_$DT$ VALUES('$DT$')
	</update>
	
	<insert id="mcodeInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > mcodeInsert */
		INSERT INTO $SCHEMA$.EZ_MCODE(MCODE_CD, MCODE_NM, MCODE_DESC, INS_DATE, DEL_YN)
		VALUES(#mcode_cd#, #mcode_nm#, #mcode_desc#, sysdate, #del_yn#)
	</insert>
	<update id="mcodeUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > mcodeUpdate */
		UPDATE $SCHEMA$.EZ_MCODE 
		   SET MCODE_NM = #mcode_nm#,
		       MCODE_DESC = #mcode_desc#,
		       DEL_YN = #del_yn#
		
			<!-- 
			<dynamic prepend="SET">
				<isNotEmpty property="mcode_nm" prepend=",">
					MCODE_NM = #mcode_nm#
				</isNotEmpty>
				<isNotEmpty property="mcode_eng_nm" prepend=",">
					MCODE_ENG_NM = #mcode_eng_nm#
				</isNotEmpty>
				<isNotEmpty property="mcode_desc" prepend=",">
					MCODE_DESC = #mcode_desc#
				</isNotEmpty>
				<isNotNull property="mcode_gubun" prepend=",">
					MCODE_GUBUN = #mcode_gubun#
				</isNotNull>				
				<isNotNull property="del_yn" prepend=",">
					DEL_YN = #del_yn#
				</isNotNull>
			</dynamic>
			-->
			
		WHERE
			MCODE_CD = #mcode_cd#
	</update>
	<insert id="scodeInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > scodeInsert */
		INSERT INTO $SCHEMA$.EZ_SCODE(MCODE_CD, SCODE_CD, SCODE_NM, SCODE_ENG_NM, SCODE_DESC, SCODE_USE_YN, ORDER_NO, INS_DATE, HOST_CD)
		VALUES(#mcode_cd#, #scode_cd#, #scode_nm#, #scode_eng_nm#, #scode_desc#, #scode_use_yn#, $order_no$, sysdate, $host_cd$)
	</insert>
	<update id="scodeUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > scodeUpdate */
		UPDATE $SCHEMA$.EZ_SCODE
		   SET SCODE_NM = #scode_nm#,
		       SCODE_ENG_NM = #scode_eng_nm#,
		       SCODE_DESC = #scode_desc#,
		       SCODE_USE_YN = #scode_use_yn#,
		       ORDER_NO = $order_no$
		       
			<!-- 
			<dynamic prepend="SET">
				<isNotEmpty property="scode_nm" prepend=",">
					SCODE_NM = #scode_nm#
				</isNotEmpty>
				<isNotEmpty property="scode_eng_nm" prepend=",">
					SCODE_ENG_NM = #scode_eng_nm#
				</isNotEmpty>
				<isNotEmpty property="scode_desc" prepend=",">
					SCODE_DESC = #scode_desc#
				</isNotEmpty>
				<isNotEmpty property="scode_use_yn" prepend=",">
					SCODE_USE_YN = #scode_use_yn#
				</isNotEmpty>
				<isNotEmpty property="order_no" prepend=",">
					ORDER_NO = $order_no$
				</isNotEmpty>
			</dynamic>
			-->
			 
		WHERE
			MCODE_CD = #mcode_cd#
			AND SCODE_CD = #scode_cd#
	</update>
	<delete id="scodeDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > scodeDelete */
		DELETE FROM $SCHEMA$.EZ_SCODE WHERE MCODE_CD = #mcode_cd# AND SCODE_CD = #scode_cd#
	</delete>
			
	<insert id="appGrpInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > appGrpInsert */
		INSERT INTO $SCHEMA$.EZ_APP_GRP_CODE (GRP_CD, GRP_NM, GRP_ENG_NM, GRP_DEPTH, GRP_PARENT_CD, GRP_USE_YN, GRP_DESC, GRP_INS_DATE, GRP_INS_USER_CD, SCODE_CD, HOST_CD, USER_DAILY)
		VALUES(#grp_cd#, #grp_nm#, #grp_eng_nm#, #grp_depth#, #grp_parent_cd#, #grp_use_yn#, #grp_desc#, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), #grp_ins_user_cd#, #scode_cd#, #v_host_cd#, #user_daily#)
	</insert>

	<update id="appGrpUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > appGrpUpdate */
		UPDATE $SCHEMA$.EZ_APP_GRP_CODE
			<dynamic prepend="SET">
				<isNotEmpty property="grp_nm" prepend=",">
					GRP_NM = #grp_nm#
				</isNotEmpty>
				<isNotEmpty property="grp_eng_nm" prepend=",">
					GRP_ENG_NM = #grp_eng_nm#
				</isNotEmpty>
				<isNotEmpty property="grp_use_yn" prepend=",">
					GRP_USE_YN = #grp_use_yn#
				</isNotEmpty>
				<isNotEmpty property="grp_desc" prepend=",">
					GRP_DESC = #grp_desc#
				</isNotEmpty>
				
				, USER_DAILY = #user_daily#
				
			</dynamic>
		WHERE GRP_CD = #grp_cd#
	</update>
	
	<update id="appGrpHostUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > appGrpHostUpdate */
		UPDATE $SCHEMA$.EZ_APP_GRP_CODE
			<dynamic prepend="SET">
				<isNotEmpty property="grp_nm" prepend=",">
					GRP_NM = #grp_nm#
				</isNotEmpty>
				<isNotEmpty property="grp_eng_nm" prepend=",">
					GRP_ENG_NM = #grp_eng_nm#
				</isNotEmpty>
				<isNotEmpty property="grp_use_yn" prepend=",">
					GRP_USE_YN = #grp_use_yn#
				</isNotEmpty>
				<isNotEmpty property="grp_desc" prepend=",">
					GRP_DESC = #grp_desc#
				</isNotEmpty>
				
				, USER_DAILY = #user_daily#
				
			</dynamic>
		WHERE GRP_CD = #grp_cd#
	</update>
	
	<delete id="appGrpDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > appGrpDelete */
		DELETE FROM $SCHEMA$.EZ_APP_GRP_CODE 
		WHERE
			<isEqual property="grp_depth" compareValue="1">
				GRP_CD = $grp_cd$ OR GRP_PARENT_CD = #grp_cd# OR GRP_PARENT_CD IN (select grp_cd from $SCHEMA$.EZ_APP_GRP_CODE WHERE GRP_PARENT_CD = #grp_cd#) 
			</isEqual>
			<isNotEqual property="grp_depth" compareValue="1">
				(GRP_CD = $grp_cd$ and GRP_PARENT_CD = #grp_parent_cd#) OR GRP_PARENT_CD = #grp_cd#
			</isNotEqual>
	</delete>
	
	<delete id="userFloderDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > userFloderDelete */
		DELETE from $SCHEMA$.ez_user_folder 
		where folder_auth = (select grp_eng_nm from $SCHEMA$.EZ_APP_GRP_CODE where grp_cd = #grp_cd#)
	</delete>
	
	<insert id="boardInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > boardInsert */
		INSERT INTO $SCHEMA$.EZ_BOARD(BOARD_CD, TITLE, CONTENT, STATUS, FILE_NM, FILE_PATH, INS_DATE, INS_USER_CD, BOARD_GB, SEQ, POPUP_YN, POPUP_S_DATE, POPUP_E_DATE)
		VALUES($board_cd$, #title#, #content:CLOB#, #status#, #file_nm#, #file_path#, sysdate, $ins_user_cd$, #board_gb#, $seq$, #popup_yn#, #popup_s_date#, #popup_e_date#)
	</insert>
	
	<update id="boardUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > boardUpdate */
		UPDATE $SCHEMA$.EZ_BOARD
			<dynamic prepend="SET">
				<isNotEmpty property="title" prepend=",">
					TITLE = #title#
				</isNotEmpty>
				<isNotEmpty property="content" prepend=",">
					CONTENT = #content:CLOB#
				</isNotEmpty>
				<isNotEmpty property="status" prepend=",">
					STATUS = #status#
				</isNotEmpty>
				<isNotEmpty property="file_nm" prepend=",">
					FILE_NM = #file_nm#
				</isNotEmpty>
				<isEmpty property="file_nm" prepend=",">
					FILE_NM = NULL
				</isEmpty>
				<isNotEmpty property="file_path" prepend=",">
					FILE_PATH = #file_path#
				</isNotEmpty>
				<isNotEmpty property="del_yn" prepend=",">
					DEL_YN = #del_yn#
				</isNotEmpty>
				<isNotEmpty property="noti_yn" prepend=",">
					NOTI_YN = #noti_yn#
				</isNotEmpty>
				<isNotEmpty property="app_user_cd" prepend=",">
					APP_USER_CD = $app_user_cd$
				</isNotEmpty>
				<isNotEmpty property="seq" prepend=",">
					SEQ = $seq$
				</isNotEmpty>
				<isNotEmpty property="popup_yn" prepend=",">
					POPUP_YN = #popup_yn#
				</isNotEmpty>
				<isNotEmpty property="popup_s_date" prepend=",">
					POPUP_S_DATE = #popup_s_date#
				</isNotEmpty>
				<isNotEmpty property="popup_e_date" prepend=",">
					POPUP_E_DATE = #popup_e_date#
				</isNotEmpty>
			</dynamic>
		WHERE
			board_cd = $board_cd$
	</update>
	
	<delete id="boardDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > boardDelete */
		DELETE FROM $SCHEMA$.EZ_BOARD WHERE BOARD_CD = $board_cd$
	</delete>
	
	<insert id="userApprovalGroupInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > userApprovalGroupInsert */			
		INSERT INTO $SCHEMA$.EZ_USER_APPROVAL_GROUP(LINE_GRP_CD, LINE_GRP_NM, USE_YN, OWNER_USER_CD, INS_USER_CD)
		VALUES($line_grp_cd$, #line_grp_nm#, #use_yn#, $s_user_cd$, $s_user_cd$)
	</insert>
	
	<insert id="adminApprovalGroupInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > adminApprovalGroupInsert */			
		INSERT INTO $SCHEMA$.EZ_ADMIN_APPROVAL_GROUP(ADMIN_LINE_GRP_CD, ADMIN_LINE_GRP_NM, USE_YN, DOC_GUBUN, POST_APPROVAL_YN, OWNER_USER_CD, INS_USER_CD)
		VALUES($admin_line_grp_cd$, #admin_line_grp_nm#, #use_yn#, #doc_gubun#, #post_approval_yn#, $s_user_cd$, $s_user_cd$)
	</insert>
	
	<insert id="groupApprovalGroupInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > groupApprovalGroupInsert */			
		INSERT INTO $SCHEMA$.EZ_GROUP_APPROVAL_GROUP(GROUP_LINE_GRP_CD, GROUP_LINE_GRP_NM, USE_YN, OWNER_USER_CD, INS_USER_CD, ins_date)
		VALUES($group_line_grp_cd$, #group_line_grp_nm#, #use_yn#, $s_user_cd$, $s_user_cd$, sysdate)
	</insert>
	
	<update id="userApprovalGroupUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > userApprovalGroupUpdate */
		UPDATE $SCHEMA$.EZ_USER_APPROVAL_GROUP
			<dynamic prepend="SET">
				<isNotEmpty property="line_grp_nm" prepend=",">
					LINE_GRP_NM = #line_grp_nm#
				</isNotEmpty>
				<isNotEmpty property="use_yn" prepend=",">
					USE_YN = #use_yn#
				</isNotEmpty>
			</dynamic>
		WHERE
			LINE_GRP_CD = $line_grp_cd$
	</update>
	
	<update id="adminApprovalGroupUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > adminApprovalGroupUpdate */
		UPDATE $SCHEMA$.EZ_ADMIN_APPROVAL_GROUP
			<dynamic prepend="SET">
				<isNotEmpty property="admin_line_grp_nm" prepend=",">
					ADMIN_LINE_GRP_NM = #admin_line_grp_nm#
				</isNotEmpty>
				<isNotEmpty property="use_yn" prepend=",">
					USE_YN = #use_yn#
				</isNotEmpty>
				<isNotEmpty property="doc_gubun" prepend=",">
					DOC_GUBUN = #doc_gubun#
				</isNotEmpty>
				<!-- <isNotEmpty property="doc_gubun" prepend=",">
					TOP_LEVEL_YN = #top_level_yn#
				</isNotEmpty>
				<isNotEmpty property="doc_gubun" prepend=",">
					SCHEDULE_YN = #schedule_yn#
				</isNotEmpty> -->
				<isNotEmpty property="doc_gubun" prepend=",">
					POST_APPROVAL_YN = #post_approval_yn#
				</isNotEmpty>
			</dynamic>
		WHERE 
		ADMIN_LINE_GRP_CD = $admin_line_grp_cd$
	</update>
	
	<update id="groupApprovalGroupUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > groupApprovalGroupUpdate */
		UPDATE $SCHEMA$.EZ_GROUP_APPROVAL_GROUP
			<dynamic prepend="SET">
				<isNotEmpty property="group_line_grp_nm" prepend=",">
					GROUP_LINE_GRP_NM = #group_line_grp_nm#
				</isNotEmpty>
				<isNotEmpty property="use_yn" prepend=",">
					USE_YN = #use_yn#
				</isNotEmpty>
			</dynamic>
		WHERE
			GROUP_LINE_GRP_CD = $group_line_grp_cd$
	</update>
	
	<delete id="userApprovalGroupDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > userApprovalGroupDelete */
		DECLARE BEGIN
			DELETE FROM $SCHEMA$.EZ_USER_APPROVAL_GROUP WHERE LINE_GRP_CD = #line_grp_cd#;
			DELETE FROM $SCHEMA$.EZ_USER_APPROVAL_LINE WHERE LINE_GRP_CD = #line_grp_cd#;
		END;
	</delete>
	
	<delete id="adminApprovalGroupDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > adminApprovalGroupDelete */
		DECLARE BEGIN
			DELETE FROM $SCHEMA$.EZ_ADMIN_APPROVAL_GROUP WHERE ADMIN_LINE_GRP_CD = #admin_line_grp_cd#;
			DELETE FROM $SCHEMA$.EZ_ADMIN_APPROVAL_LINE WHERE ADMIN_LINE_GRP_CD = #admin_line_grp_cd#;
		END;
	</delete>
	
	<delete id="groupApprovalGroupDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > groupApprovalGroupDelete */
		DECLARE BEGIN
			DELETE FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE GROUP_LINE_GRP_CD = #group_line_grp_cd#;
			DELETE FROM $SCHEMA$.EZ_GROUP_APPROVAL_LINE WHERE GROUP_LINE_GRP_CD = #group_line_grp_cd#;
		END;
	</delete>
	<!-- 
	<parameterMap id="spApprovalPrcMap" class="java.util.Map">
		<parameter property="r_code" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		<parameter property="r_msg" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		
		<parameter property="flag" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="line_grp_cd" 		javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
	</parameterMap>
	<procedure id="spApprovalPrc" resultClass="java.util.List" parameterMap="spApprovalPrcMap">
		{ call $SCHEMA$.SP_EZ_APPROVAL_PRC	( 	?, ?, ?, ?  ) }
	</procedure> -->
	
	<select id="userApprovalUseCnt" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > userApprovalUseCnt */
		 SELECT COUNT(*) AS TOTAL_COUNT 
		   FROM $SCHEMA$.EZ_USER_APPROVAL_GROUP 
		  WHERE use_yn = 'Y' 
		    AND ins_user_cd = $s_user_cd$
		    
		    <isNotEqual property="line_grp_cd" compareValue="0">
				AND LINE_GRP_CD != $line_grp_cd$
			</isNotEqual> 
		    
	</select>
	
	<select id="adminApprovalUseCnt" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > adminApprovalUseCnt */
		 SELECT COUNT(*) AS TOTAL_COUNT 
		   FROM $SCHEMA$.EZ_ADMIN_APPROVAL_GROUP 
		  WHERE use_yn = 'Y' 
		    AND doc_gubun = #doc_gubun#
		    AND ins_user_cd = $s_user_cd$
		    
		    <isNotEqual property="admin_line_grp_cd" compareValue="0">
				AND ADMIN_LINE_GRP_CD != $admin_line_grp_cd$
			</isNotEqual> 
		    
	</select>	
	
	<insert id="userApprovalLineInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > userApprovalLineInsert */				
		INSERT INTO $SCHEMA$.EZ_USER_APPROVAL_LINE(LINE_CD, LINE_GRP_CD, APPROVAL_CD, APPROVAL_SEQ, INS_USER_CD, APPROVAL_GB)
		VALUES($line_cd$, $line_grp_cd$, $approval_cd$, $approval_seq$, $s_user_cd$, #approval_gb#)
	</insert>
	
	<insert id="adminApprovalLineInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > adminApprovalLineInsert */				
		INSERT INTO $SCHEMA$.EZ_ADMIN_APPROVAL_LINE(ADMIN_LINE_CD, ADMIN_LINE_GRP_CD, APPROVAL_CD, APPROVAL_SEQ, INS_USER_CD, APPROVAL_GB, APPROVAL_TYPE, GROUP_LINE_GRP_CD)
		VALUES($admin_line_cd$, $admin_line_grp_cd$, (case when #approval_cd# = '' then null else #approval_cd# end), $approval_seq$, $s_user_cd$, #approval_gb#, #approval_type#, (case when #group_line_grp_cd# = '' then null else #group_line_grp_cd# end))
	</insert>
	
	<insert id="groupApprovalLineInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > groupApprovalLineInsert */				
		INSERT INTO $SCHEMA$.EZ_GROUP_APPROVAL_LINE(GROUP_LINE_CD, GROUP_LINE_GRP_CD, APPROVAL_CD, APPROVAL_SEQ, INS_USER_CD, ins_date)
		VALUES($group_line_cd$, $group_line_grp_cd$, $approval_cd$, $approval_seq$, $s_user_cd$, sysdate) 
	</insert>
	
	<update id="userApprovalLineUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > userApprovalLineUpdate */
		UPDATE $SCHEMA$.EZ_USER_APPROVAL_LINE
		
			<dynamic prepend="SET">
				<isNotEmpty property="approval_cd" prepend=",">
					APPROVAL_CD = $approval_cd$
				</isNotEmpty>
				<isNotEmpty property="approval_seq" prepend=",">
					APPROVAL_SEQ = $approval_seq$
				</isNotEmpty>
				<isNotEmpty property="use_yn" prepend=",">
					USE_YN = #use_yn#
				</isNotEmpty>
				<isNotEmpty property="approval_gb" prepend=",">
					APPROVAL_GB = #approval_gb#
				</isNotEmpty>
			</dynamic>
		WHERE
			LINE_CD = $line_cd$
	</update>
	
	<update id="adminApprovalLineUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > adminApprovalLineUpdate */
		UPDATE $SCHEMA$.EZ_ADMIN_APPROVAL_LINE
			<dynamic prepend="SET">
				<isEmpty property="approval_cd" prepend=",">
					APPROVAL_CD = null
				</isEmpty>
				<isNotEmpty property="approval_cd" prepend=",">
					APPROVAL_CD = $approval_cd$
				</isNotEmpty>
				<isEmpty property="group_line_grp_cd" prepend=",">
					GROUP_LINE_GRP_CD = null
				</isEmpty>
				<isNotEmpty property="group_line_grp_cd" prepend=",">
					GROUP_LINE_GRP_CD = $group_line_grp_cd$
				</isNotEmpty>
				<isNotEmpty property="approval_seq" prepend=",">
					APPROVAL_SEQ = $approval_seq$
				</isNotEmpty>
				<isNotEmpty property="use_yn" prepend=",">
					USE_YN = #use_yn#
				</isNotEmpty>
				<isNotEmpty property="approval_gb" prepend=",">
					APPROVAL_GB = #approval_gb#
				</isNotEmpty>
				<isNotEmpty property="approval_type" prepend=",">
					APPROVAL_TYPE = #approval_type#
				</isNotEmpty>
			</dynamic>
		WHERE
			ADMIN_LINE_CD = $admin_line_cd$
	</update>
	
	<update id="groupApprovalLineUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > groupApprovalLineUpdate */
		UPDATE $SCHEMA$.EZ_GROUP_APPROVAL_LINE
			<dynamic prepend="SET">
				<isNotEmpty property="approval_cd" prepend=",">
					APPROVAL_CD = $approval_cd$
				</isNotEmpty>
				<isNotEmpty property="approval_seq" prepend=",">
					APPROVAL_SEQ = $approval_seq$
				</isNotEmpty>
				<isNotEmpty property="use_yn" prepend=",">
					USE_YN = #use_yn#
				</isNotEmpty>				
			</dynamic>
		WHERE
			GROUP_LINE_CD = $group_line_cd$
	</update>
	
	<delete id="userApprovalLineDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > userApprovalLineDelete */
		DELETE FROM $SCHEMA$.EZ_USER_APPROVAL_LINE WHERE LINE_CD = $line_cd$
	</delete>
	
	<delete id="adminApprovalLineDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > adminApprovalLineDelete */
		DELETE FROM $SCHEMA$.EZ_ADMIN_APPROVAL_LINE WHERE ADMIN_LINE_CD = $admin_line_cd$
	</delete>
	
	<delete id="groupApprovalLineDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > groupApprovalLineDelete */
		DELETE FROM $SCHEMA$.EZ_GROUP_APPROVAL_LINE WHERE GROUP_LINE_CD = $group_line_cd$
	</delete>
	
	<insert id="ctmAgentInfoInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > ctmAgentInfoInsert */
		INSERT INTO $SCHEMA$.EZ_CTM_AGENT_INFO(NODEID, AGENT_NM, AGENT_INFO)
		VALUES(#nodeid#, #agent_nm#, #agent_info#)
	</insert>
	<update id="ctmAgentInfoUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > ctmAgentInfoUpdate */
	WITH upsert AS ( UPDATE $SCHEMA$.EZ_CTM_AGENT_INFO 
	SET AGENT_NM = #agent_nm#
	    , AGENT_INFO = #agent_info#
	WHERE NODEID = #nodeid#
	returning *)
	INSERT INTO $SCHEMA$.EZ_CTM_AGENT_INFO (NODEID, AGENT_NM, AGENT_INFO)
	SELECT #nodeid#, #agent_nm#, #agent_info#
	WHERE NOT EXISTS (SELECT * FROM upsert)
	<!-- 	
		MERGE INTO $SCHEMA$.EZ_CTM_AGENT_INFO
		USING DUAL ON (NODEID = #nodeid#)
			WHEN MATCHED THEN
				UPDATE SET AGENT_NM = #agent_nm#, AGENT_INFO = #agent_info#
			WHEN NOT MATCHED THEN
				INSERT (NODEID, AGENT_NM, AGENT_INFO)
				VALUES(#nodeid#, #agent_nm#, #agent_info#) 
	-->
	</update>
	
	<select id="inCondNameList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > inCondNameList */
		 select job_name, tb4.user_nm AS owner_user_nm
		   from def_job tb1 left outer join  $SCHEMA$.EZ_JOB_MAPPER tb3 
		   on tb1.job_name = tb3.job
		   left outer join $SCHEMA$.ez_user tb4
		    on tb3.user_cd_1 = tb4.user_cd
		   ,def_lnki_p tb2
		  where tb1.job_id = tb2.job_id
		    and tb1.table_id = tb2.table_id
		    and tb2.condition = #job_name#
	</select>
	
	<select id="adminApprovalGroupChkCnt" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > adminApprovalGroupChkCnt */
		SELECT COUNT(*) AS cnt FROM $SCHEMA$.ez_admin_approval_group WHERE doc_gubun = #doc_gubun# AND post_approval_yn = #post_approval_yn#
	</select>
	<select id="userApprovalLineApprovalSeqCnt" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > userApprovalLineApprovalSeqCnt */
		SELECT COUNT(*) AS cnt FROM $SCHEMA$.EZ_USER_APPROVAL_LINE WHERE line_grp_cd = #line_grp_cd# AND approval_seq = #approval_seq#
	</select>
	<select id="userApprovalLineApprovalGbCnt" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > userApprovalLineApprovalGbCnt */
		SELECT COUNT(*) AS cnt FROM $SCHEMA$.EZ_USER_APPROVAL_LINE WHERE line_grp_cd = #line_grp_cd# AND approval_gb = #approval_gb#
	</select>
	<select id="userApprovalLineApprovalUserCnt" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > userApprovalLineApprovalUserCnt */
		SELECT COUNT(*) AS cnt FROM $SCHEMA$.EZ_USER_APPROVAL_LINE WHERE line_grp_cd = #line_grp_cd# AND approval_cd = #approval_cd#
	</select>
	
	<select id="groupApprovalLineApprovalSeqCnt" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > groupApprovalLineApprovalSeqCnt */
		SELECT COUNT(*) AS cnt FROM $SCHEMA$.EZ_GROUP_APPROVAL_LINE WHERE group_line_grp_cd = #group_line_grp_cd# AND approval_seq = #approval_seq#
	</select>
	
	<select id="adminApprovalLineApprovalSeqCnt" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > adminApprovalLineApprovalSeqCnt */
		SELECT COUNT(*) AS cnt FROM $SCHEMA$.EZ_ADMIN_APPROVAL_LINE WHERE admin_line_grp_cd = #admin_line_grp_cd# AND approval_seq = #approval_seq#
	</select>
	<select id="adminApprovalLineApprovalGbCnt" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > adminApprovalLineApprovalGbCnt */
		SELECT COUNT(*) AS cnt FROM $SCHEMA$.EZ_ADMIN_APPROVAL_LINE WHERE admin_line_grp_cd = #admin_line_grp_cd# AND approval_gb = #approval_gb#
	</select>
	<select id="adminApprovalLineApprovalCdCnt" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > adminApprovalLineApprovalCdCnt */
		SELECT COUNT(*) AS cnt FROM $SCHEMA$.EZ_ADMIN_APPROVAL_LINE WHERE admin_line_grp_cd = #admin_line_grp_cd# AND approval_cd = #approval_cd#
	</select>
	
	<!-- <select id="cmsNodGrpList" parameterClass="java.util.Map" resultClass="CommonBean">
		SELECT #data_center# AS data_center, grpname
		  FROM $CTMSVR_SCHEMA$.CMS_NODGRP
		 WHERE 1 = 1
		 
		<isNotEmpty prepend="and" property="p_search_text">			
			grpname like '%'||#p_search_text#||'%'
		</isNotEmpty>		 
		 
		 GROUP BY grpname 
		 ORDER BY grpname
	</select> -->
	
<!-- 	<select id="cmsNodGrpNodeList" parameterClass="java.util.Map" resultClass="CommonBean"> -->
<!-- 		SELECT nodeid -->
<!-- 		  FROM $CTMSVR_SCHEMA$.CMS_NODGRP -->
<!-- 		 WHERE 1 = 1 -->
<!-- 		   AND grpname = #grpname#		  -->
<!-- 		 ORDER BY nodeid -->
<!-- 	</select> -->
	
	<!-- distinct한 이유는 data_center가 실제 서버명으로 넘어오기 때문에 테스트/개발은 세개 모두 나온다. -->
	<select id="serverInfo" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > serverInfo */
		SELECT distinct agent AS node_id,
			   agent_id,
			   agent_pw,
			   file_path,
			   access_gubun,
			   access_port,
			   server_gubun
		  FROM $SCHEMA$.EZ_HOST
		 WHERE 1=1
		 AND server_gubun = 'S'
		 <isNotEmpty property="data_center">
		 	AND data_center LIKE '%'||#data_center#||'%'
		 </isNotEmpty>
		 <isNotEmpty property="agent">
		 	AND agent = #agent#
		 </isNotEmpty>
		   
	</select>
	
	<select id="checkSmartTableCnt" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > checkSmartTableCnt */
		SELECT COUNT(*) AS total_cnt
		  FROM DEF_TABLES
		 WHERE 1 = 1
		   AND sched_table = #table_name#		 
		   AND table_type = '2'
	</select>
	
	<select id="userDailyNameList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > userDailyNameList */
		SELECT user_daily
		  FROM DEF_TABLES
		 WHERE user_daily IS NOT NULL
		   AND data_center = (SELECT scode_eng_nm FROM $SCHEMA$.EZ_SCODE WHERE scode_nm = #data_center# AND scode_use_yn = 'Y' AND mcode_cd = 'M6' )  
		 GROUP BY user_daily		 
		 ORDER BY user_daily
	</select>
	
	<select id="holiday_check" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > holiday_check */

 		SELECT SUBSTR(days_1||days_2,to_date(to_char(sysdate,'YYYYMMDD'),'YYYYMMDD') - to_date(to_char(sysdate,'YYYY')||'0101','YYYYMMDD')+1, 1) AS holiday_check
	  	  FROM df_years
	  	 WHERE 1=1
	  	   AND calendar = 'WORKDAY'
		   AND year = to_char(sysdate, 'YYYY')-1
		
	</select>
	
	<select id="defJobList" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* ORACLE_Common > defJobList */

 		SELECT job_name from DEF_JOB
		
	</select>
	
	<select id="dblinkConnect" parameterClass="java.util.Map">
	/* ORACLE_Common > dblinkConnect */

 		select dblink_connect('$dblink$', 'hostaddr=$hostaddr$ user=$user$ password=$password$ dbname=$dbname$ port=$port$')
		
	</select>
	
	<select id="dblinkDisconnect" resultClass="JobDefineInfoBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dblinkDisconnect */

 		select dblink_disconnect('$dblink$')
		
	</select>
	
	<!-- jobCondList -->
	<sql id="jobCondListInc">
	/* ORACLE_Common > jobCondListInc */
			FROM
				dblink('ctm_dblink', 'SELECT condname, conddate FROM CMR_CONTAB') as a
				(
				  condname character varying(255)
				  ,conddate character(8)
				)
				, $SCHEMA$.EZ_JOB_MAPPER b
			WHERE 	1 = 1
			and		a.condname = b.job
			<isNotEmpty property="p_s_cond_date">
				AND SUBSTR(a.conddate, 5, 8) >= #p_s_cond_date#
			</isNotEmpty>
			<isNotEmpty property="p_e_cond_date">
				AND SUBSTR(a.conddate, 5, 8) <![CDATA[ <= ]]> #p_e_cond_date#
			</isNotEmpty>			
			
			<isNotEmpty property="p_s_cond_name">
				AND a.condname LIKE ''||#p_s_cond_name#||'%'
			</isNotEmpty>
			<isNotEmpty property="p_data_center">
				AND b.data_center = #p_data_center#
			</isNotEmpty>
						
	</sql>
	
	<select id="jobCondList" resultClass="CtmInfoBean" parameterClass="java.util.Map">
	/* ORACLE_Common > jobCondList */
			SELECT * FROM(
				SELECT TTT.* FROM (
					SELECT condname, conddate
					<include refid="jobCondListInc" />
		
					ORDER BY condname, conddate
				) TTT
			) tb1
		
	</select>
	
<!-- 	smartforder -->
	<select id="sForderList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > sForderList */
<!-- 			select table_id, parent_table, jobs_in_group from def_job where task_type = 'SMART Table' -->
			SELECT 
				t1.parent_table
				, t1.user_daily
				, t1.used_by
				, t1.sync_state
				, t1.sync_msg
				, t1.last_upload
				, (CASE WHEN t1.jobs_in_group = '00000' THEN '0' ELSE LTRIM(t1.jobs_in_group, '0') END) as jobs_in_group
				, t1.doc_cd
				, (CASE WHEN t3.doc_cd is null THEN t2.job_name ELSE t3.job_name END) as job_name
				, (CASE WHEN t3.doc_cd is null THEN t2.data_center ELSE t3.data_center END) as data_center
				
			FROM (			SELECT 
								parent_table
								, user_daily
								, used_by
								, sync_state
								, sync_msg
								, last_upload
								, jobs_in_group
								, (select MAX(tt1.doc_cd) 
									from (
										select MAX(doc_cd) as doc_cd 
											from $SCHEMA$.ez_doc_04 
											where a.task_type = task_type and a.parent_table = table_name 
										union 
										select MAX(doc_cd) as doc_cd 
											from $SCHEMA$.ez_doc_01 
											where a.task_type = task_type and a.parent_table = table_name
										) as tt1) as doc_cd 
			
						FROM def_job a
						LEFT OUTER JOIN def_tables b
						on a.table_id = b.table_id
						WHERE a.task_type = 'SMART Table'
				) t1
				LEFT OUTER JOIN $SCHEMA$.ez_doc_01 t2
					ON t2.doc_cd = t1.doc_cd
				LEFT OUTER JOIN $SCHEMA$.ez_doc_04 t3
					ON t3.doc_cd = t1.doc_cd
				WHERE 1=1
				
				<isNotEmpty property="data_center">
					AND (t2.data_center = #data_center# or t3.data_center = #data_center#)
				</isNotEmpty>
				<isNotEmpty property="s_forder_text">
					AND t1.parent_table LIKE '%'||#s_forder_text#||'%'
				</isNotEmpty>
				order by parent_table asc
				
<!-- 								, (CASE WHEN (select MAX(doc_cd) from $SCHEMA$.ez_doc_04 where a.task_type = task_type and a.parent_table = table_name) is null THEN (select MAX(doc_cd) from $SCHEMA$.ez_doc_04 where a.task_type = task_type and a.parent_table = table_name) -->
<!-- 							     				else (select MAX(doc_cd) from $SCHEMA$.ez_doc_04 where a.task_type = task_type and a.parent_table = table_name) END) as doc_cd -->
<!-- (CASE WHEN (select MAX(doc_cd) from $SCHEMA$.ez_doc_04 where a.task_type = task_type and a.parent_table = table_name) is null THEN (select MAX(doc_cd) from $SCHEMA$.ez_doc_04 where a.task_type = task_type and a.parent_table = table_name) -->
<!-- 				     				else (select MAX(doc_cd) from $SCHEMA$.ez_doc_04 where a.task_type = task_type and a.parent_table = table_name) END) as doc_cd -->
		<!-- 	SELECT (CASE WHEN c.doc_cd is null THEN b.doc_cd
				     					 ELSE c.doc_cd END) as doc_cd
				, a.parent_table
				, a.jobs_in_group
				, b.job_name
				, b.data_center
			FROM def_job a
			LEFT OUTER JOIN $SCHEMA$.ez_doc_01 b 
			ON a.task_type = b.task_type and a.parent_table = b.table_name
			LEFT OUTER JOIN $SCHEMA$.ez_doc_04 c 
			ON a.task_type = b.task_type and a.parent_table = b.table_name
			WHERE a.task_type = 'SMART Table'
			<isNotEmpty property="s_forder_text">
				AND a.parent_table LIKE '%'||#s_forder_text#||'%'
			</isNotEmpty>
			order by a.parent_table asc -->			
	</select>
	
	<select id="getDeptRelay" resultClass="UserBean" parameterClass="java.util.Map">
	/* ORACLE_Common > getDeptRelay */
		SELECT * FROM $SCHEMA$.EZ_DEPT_RELAY ORDER BY dept_nm
	</select>
	<select id="getDutyRelay" resultClass="UserBean" parameterClass="java.util.Map">
	/* ORACLE_Common > getDutyRelay */
		SELECT * FROM $SCHEMA$.EZ_DUTY_RELAY ORDER BY duty_nm
	</select>
	<select id="getUserRelay" resultClass="UserBean" parameterClass="java.util.Map">
	/* ORACLE_Common > getUserRelay */
		SELECT A.user_id, A.user_nm, A.dept_nm, A.duty_nm, A.user_email, A.user_hp
		FROM $SCHEMA$.EZ_USER_RELAY A
		ORDER BY A.user_id
	</select>
	<select id="getNodeInfo" resultClass="String" parameterClass="java.util.Map">
	/* ORACLE_Common > getNodeInfo */
		SELECT
			node_id
		FROM RUNINFO_HISTORY
		WHERE 1=1
		<isNotEmpty property="order_id" prepend="AND">
			order_id = #order_id#
		</isNotEmpty>
		<isNotEmpty property="rerun_count" prepend="AND">
			rerun_counter = #rerun_count#
		</isNotEmpty>
	</select>
	<select id="batchTotal" resultClass="BatchTotalBean" parameterClass="java.util.Map">
	/* ORACLE_Common > batchTotal */
		select 
			data_center,
			table_name,
			application,
			group_name,
			reg_new_cnt,
			reg_mod_cnt,
			reg_del_cnt,
			reg_ord_cnt,
			reg_chg_cond_cnt,
			irreg_new_cnt,
			irreg_mod_cnt,
			irreg_del_cnt,
			irreg_ord_cnt,
			irreg_chg_cond_cnt,
			total_cnt,
			smart_job_yn
		from(
			select 
				(select scode_nm from $SCHEMA$.ez_scode 
			 		where mcode_cd = 'M6' 
			 			and scode_eng_nm = ( CASE WHEN INSTR(data_center, ',') <![CDATA[ > ]]> 0
												THEN SUBSTR(data_center, INSTR(data_center, ',')+1, LENGTH(data_center))
				 	   							ELSE data_center END )) as data_center, 
				 	table_name,
				 	application,
				 	group_name, 
			 		SUM(case when doc_gb = '01' and jobschedgb = '1' then 1 else 0 end) as reg_new_cnt,
			 		SUM(case when doc_gb = '04' and jobschedgb = '1' then 1 else 0 end) as reg_mod_cnt,
			 		SUM(case when doc_gb = '03' and jobschedgb = '1' then 1 else 0 end) as reg_del_cnt,
			 		SUM(case when doc_gb = '05' and jobschedgb = '1' then 1 else 0 end) as reg_ord_cnt,
			 		SUM(case when doc_gb = '07' and jobschedgb = '1' then 1 else 0 end) as reg_chg_cond_cnt,
			 		SUM(case when doc_gb = '01' and jobschedgb = '2' then 1 else 0 end) as irreg_new_cnt,
			 		SUM(case when doc_gb = '04' and jobschedgb = '2' then 1 else 0 end) as irreg_mod_cnt,
			 		SUM(case when doc_gb = '03' and jobschedgb = '2' then 1 else 0 end) as irreg_del_cnt,
			 		SUM(case when doc_gb = '05' and jobschedgb = '2' then 1 else 0 end) as irreg_ord_cnt,
			 		SUM(case when doc_gb = '07' and jobschedgb = '2' then 1 else 0 end) as irreg_chg_cond_cnt,
			 		SUM(case when doc_gb = '' then 0 else 1 end) as total_cnt,
			 		(case when (select task_type from DEF_JOB where job_name = REGEXP_SUBSTR(table_name, '[^/]+', 1, 1)) = 'SMART Table' then 'Y' else 'N' end) as smart_job_yn
			from (
					select tb1.data_center, tb1.table_name, tb1.application, tb1.group_name, tb1.job_name, tb1.doc_gb_ment, tb1.doc_gb, tb1.apply_date,
						<!-- (case when (select user_daily from DEF_TABLES where sched_table = tb1.table_name and data_center = #data_center# ) ='SYSTEM' then '1' else '2' end) as jobschedgb -->
						(case when (select user_daily from DEF_TABLES where sched_table = tb1.table_name and data_center =  
							( CASE WHEN INSTR(#data_center#, ',') <![CDATA[ > ]]> 0
												THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
				 	   							ELSE data_center END )
						) ='SYSTEM' then '1' else '2' end) as jobschedgb
					from (
						select 
							(case when tb1.doc_gb = '01' then (select data_center from $SCHEMA$.EZ_doc_01 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '03' then (select data_center from $SCHEMA$.EZ_doc_03 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '04' then (select data_center from $SCHEMA$.EZ_doc_04 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '05' then (select data_center from $SCHEMA$.EZ_doc_05 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '07' then (select data_center from $SCHEMA$.EZ_doc_07 where doc_cd = tb1.doc_cd)
							        else '' end) AS data_center
							, (case when tb1.doc_gb = '01' then (select table_name from $SCHEMA$.EZ_doc_01 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '03' then (select table_name from $SCHEMA$.EZ_doc_03 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '04' then (select table_name from $SCHEMA$.EZ_doc_04 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '05' then (select table_name from $SCHEMA$.EZ_doc_05 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '07' then (select table_name from $SCHEMA$.EZ_doc_07 where doc_cd = tb1.doc_cd)
							        else '' end) AS table_name
							, (case when tb1.doc_gb = '01' then (select application from $SCHEMA$.EZ_doc_01 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '03' then (select application from $SCHEMA$.EZ_doc_03 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '04' then (select application from $SCHEMA$.EZ_doc_04 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '05' then (select application from $SCHEMA$.EZ_doc_05 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '07' then (select application from $SCHEMA$.EZ_doc_07 where doc_cd = tb1.doc_cd)
							        else '' end) AS application
							, (case when tb1.doc_gb = '01' then (select group_name from $SCHEMA$.EZ_doc_01 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '03' then (select group_name from $SCHEMA$.EZ_doc_03 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '04' then (select group_name from $SCHEMA$.EZ_doc_04 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '05' then (select group_name from $SCHEMA$.EZ_doc_05 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '07' then (select group_name from $SCHEMA$.EZ_doc_07 where doc_cd = tb1.doc_cd)
							        else '' end) AS group_name
							, (case when tb1.doc_gb = '01' then (select job_name from $SCHEMA$.EZ_doc_01 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '03' then (select job_name from $SCHEMA$.EZ_doc_03 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '04' then (select job_name from $SCHEMA$.EZ_doc_04 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '05' then (select job_name from $SCHEMA$.EZ_doc_05 where doc_cd = tb1.doc_cd)
									when tb1.doc_gb = '07' then (select job_name from $SCHEMA$.EZ_doc_07 where doc_cd = tb1.doc_cd)
							        else '' end) AS job_name
							, ( case when tb1.doc_gb = '01' then '등록'
										when tb1.doc_gb = '03' then '삭제'
										when tb1.doc_gb = '04' then '수정'
										when tb1.doc_gb = '05' then '수행'
										when tb1.doc_gb='07' then '상태변경'
										else '' end) AS doc_gb_ment, doc_gb
							, to_char(tb1.apply_date, 'YYYY-MM-DD') AS apply_date
						from $SCHEMA$.ez_doc_master tb1
						where tb1.apply_cd = '02'
							and tb1.del_yn = 'N'
							and tb1.doc_gb in ('01', '03', '04', '05', '07')
							and to_char(tb1.apply_date, 'YYYYMMDD') between #p_s_odate# and #p_e_odate#
							) tb1, $SCHEMA$.EZ_JOB_MAPPER tb2
					where tb1.job_name = tb2.job 
						and tb1.data_center = tb2.data_center
						<!-- and tb2.jobschedgb != '' -->
					<isNotEmpty prepend="and" property="p_sched_table">
			         tb1.table_name in
				         <iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
				            #p_search_text_folder_list[]# 
				         </iterate>
			      	</isNotEmpty>
					<isNotEmpty property="p_application_of_def">
						and tb1.application = #p_application_of_def#
					</isNotEmpty>
					<isNotEmpty property="p_group_name_of_def">
						and tb1.group_name = #p_group_name_of_def#
					</isNotEmpty>
					
					<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
					<!-- 
					<isNotEqual property="s_user_gb" compareValue="02">
						and tb1.table_name = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = #s_user_cd#)
					</isNotEqual>
					-->
				) t
			where 1=1
			<isNotEmpty property="data_center">
				and data_center = #data_center# 
			</isNotEmpty>
			group by data_center, table_name, application, group_name
			order by data_center, table_name, application, group_name
		) tt
		where 1=1
	</select>
	<select id="docApprovalTotal" resultClass="DocApprovalTotalBean" parameterClass="java.util.Map">
	/* ORACLE_Common > docApprovalTotal */
		select *
		from(
			select 
		 		(select scode_nm from $SCHEMA$.ez_scode 
		 		where mcode_cd = 'M6' 
					and scode_eng_nm = ( CASE WHEN INSTR(data_center, ',') <![CDATA[>]]> 0
										THEN SUBSTR(data_center, INSTR(data_center, ',')+1, LENGTH(data_center))
										ELSE data_center END )) as data_center, 
				dept_nm,
				table_name,
		 		SUM(case when doc_gb = '01' then 1 else 0 end) as doc_new_cnt,
		 		SUM(case when doc_gb = '02' then 1 else 0 end) as doc_urg_cnt,
		 		SUM(case when doc_gb = '04' then 1 else 0 end) as doc_mod_cnt,
		 		SUM(case when doc_gb = '03' then 1 else 0 end) as doc_del_cnt,
		 		SUM(case when doc_gb = '05' then 1 else 0 end) as doc_ord_cnt,
		 		SUM(case when doc_gb = '06' then 1 else 0 end) as doc_excel_cnt,
		 		SUM(case when doc_gb = '07' then 1 else 0 end) as doc_chg_cond_cnt,
		 		SUM(case when doc_gb = '' then 0 else 1 end) as total_cnt,
		 		(case when (select task_type from DEF_JOB where job_name = REGEXP_SUBSTR( table_name, '[^/]+', 1, 1)) = 'SMART Table' then 'Y' else 'N' end) as smart_job_yn
			from (
					select doc_cd
			 		, (case when tb1.doc_gb = '01' then (select data_center from $SCHEMA$.EZ_doc_01 where doc_cd = tb1.doc_cd)
			 				when tb1.doc_gb = '02' then (select data_center from $SCHEMA$.EZ_doc_02 where doc_cd = tb1.doc_cd)
							when tb1.doc_gb = '03' then (select data_center from $SCHEMA$.EZ_doc_03 where doc_cd = tb1.doc_cd)
							when tb1.doc_gb = '04' then (select data_center from $SCHEMA$.EZ_doc_04 where doc_cd = tb1.doc_cd)
							when tb1.doc_gb = '05' then (select data_center from $SCHEMA$.EZ_doc_05 where doc_cd = tb1.doc_cd)
							when tb1.doc_gb = '06' then (select data_center from $SCHEMA$.EZ_doc_06 where doc_cd = tb1.doc_cd)
							when tb1.doc_gb = '07' then (select data_center from $SCHEMA$.EZ_doc_07 where doc_cd = tb1.doc_cd)
					        else '' end) AS data_center
					, (select dept_nm from $SCHEMA$.ez_dept where dept_cd = (select dept_cd from $SCHEMA$.ez_user where user_cd = tb1.user_cd)) AS dept_nm
					, (case when tb1.doc_gb = '01' then (select table_name from $SCHEMA$.EZ_doc_01 where doc_cd = tb1.doc_cd)
								when tb1.doc_gb = '02' then (select table_name from $SCHEMA$.EZ_doc_02 where doc_cd = tb1.doc_cd)
								when tb1.doc_gb = '03' then (select table_name from $SCHEMA$.EZ_doc_03 where doc_cd = tb1.doc_cd)
								when tb1.doc_gb = '04' then (select table_name from $SCHEMA$.EZ_doc_04 where doc_cd = tb1.doc_cd)
								when tb1.doc_gb = '05' then (select table_name from $SCHEMA$.EZ_doc_05 where doc_cd = tb1.doc_cd)
								when tb1.doc_gb = '06' then (select table_name from $SCHEMA$.EZ_doc_06 where doc_cd = tb1.doc_cd)
								when tb1.doc_gb = '07' then (select table_name from $SCHEMA$.EZ_doc_07 where doc_cd = tb1.doc_cd)
						        else '' end) AS table_name
					, ( case when tb1.doc_gb = '01' then '등록'
								when tb1.doc_gb = '02' then '긴급'
								when tb1.doc_gb = '03' then '삭제'
								when tb1.doc_gb = '04' then '수정'
								when tb1.doc_gb = '05' then '수행'
								when tb1.doc_gb = '06' then '엑셀일괄'
								when tb1.doc_gb='07' then '상태변경'
								else '' end) AS doc_gb_ment, doc_gb, state_cd
					from $SCHEMA$.ez_doc_master tb1
					where  tb1.del_yn = 'N'
						<!-- and to_char(tb1.ins_date, 'YYYYMMDD') like #p_year#||#p_month#||'%'  -->
						and to_char(tb1.ins_date,'YYYYMMDD') between #p_s_pdate# and #p_e_pdate#
						 
				) t
			where 1=1
			<isNotEmpty property="p_dept_nm">
				and upper(t.dept_nm) like '%'||upper(#p_dept_nm#)||'%'
			</isNotEmpty>
			<isNotEmpty prepend="and" property="p_sched_table">
	        	t.table_name in
	         	<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
	            	#p_search_text_folder_list[]# 
	         	</iterate>
	      	</isNotEmpty>
			<isNotEmpty property="data_center">
				and t.data_center = #data_center#
			</isNotEmpty>
			
			<!-- 운영자 권한은 모든 테이블(폴더) 조회 가능 -->
			<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
			<!-- 
			<isNotEqual property="s_user_gb" compareValue="02"> 
				and t.table_name = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = #s_user_cd#)
			</isNotEqual>
			-->
			
			group by data_center, dept_nm, table_name
			order by data_center, dept_nm, table_name
			) tt
			where 1=1
	</select>
	<select id="jobCondTotal" resultClass="JobCondTotalBean" parameterClass="java.util.Map">
	/* ORACLE_Common > jobCondTotal */
		select
			data_center,
			order_table,
			application,
			group_name,
			reg_ok_cnt,
			reg_fail_cnt,
			reg_wait_cnt,
			reg_etc_cnt,
			reg_total_cnt,
			irreg_ok_cnt,
			irreg_fail_cnt,
			irreg_wait_cnt,
			irreg_etc_cnt,
			irreg_total_cnt,
			smart_job_yn
		from (
		select
				(select scode_nm from $SCHEMA$.ez_scode 
				where mcode_cd = 'M6' 
		 			and scode_eng_nm = ( CASE WHEN INSTR(data_center, ',') <![CDATA[>]]> 0
											THEN SUBSTR(data_center, INSTR(data_center, ',')+1, LENGTH(data_center))
											ELSE data_center END )) as data_center, 
				order_table, application, group_name, 
				SUM(case when status = 'Ended OK' and jobschedgb = '1' then 1 else 0 end) as reg_ok_cnt,
				SUM(case when status = 'Ended Not OK' and jobschedgb = '1' then 1 else 0 end) as reg_fail_cnt,
				SUM(case when status like 'Wait%' and jobschedgb = '1' then 1 else 0 end) as reg_wait_cnt,
				SUM(case when (status != 'Ended OK' and status != 'Ended Not OK' and status not like 'Wait%' and jobschedgb = '1') then 1 else 0 end) as reg_etc_cnt,
				SUM(case when jobschedgb = '1' then 1 else 0 end) as reg_total_cnt,
				SUM(case when status = 'Ended OK' and jobschedgb = '2' then 1 else 0 end) as irreg_ok_cnt,
				SUM(case when status = 'Ended Not OK' and jobschedgb = '2' then 1 else 0 end) as irreg_fail_cnt,
				SUM(case when status like 'Wait%' and jobschedgb = '2' then 1 else 0 end) as irreg_wait_cnt,
				SUM(case when (status != 'Ended OK' and status != 'Ended Not OK' and status not like 'Wait%' and jobschedgb = '2') then 1 else 0 end) as irreg_etc_cnt,
				SUM(case when jobschedgb = '2' then 1 else 0 end) as irreg_total_cnt,
				(case when (select task_type from DEF_JOB where job_name = REGEXP_SUBSTR(order_table, '[^/]+', 1, 1)) = 'SMART Table' then 'Y' else 'N' end) as smart_job_yn
			from (
					select
						tb2.data_center, tb1.odate, tb1.order_table, tb1.application, tb1.group_name, tb1.status, tb1.job_name, 
						<!-- (case when (select user_daily from DEF_TABLES where sched_table = tb1.order_table and data_center = #data_center# ) ='SYSTEM' then '1' else '2' end) as jobschedgb -->
						(case when (select user_daily from DEF_TABLES where sched_table = tb1.order_table and data_center =  
							( CASE WHEN INSTR(#data_center#, ',') <![CDATA[ > ]]> 0
												THEN SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, LENGTH(#data_center#))
				 	   							ELSE data_center END )
						) ='SYSTEM' then '1' else '2' end) as jobschedgb
					from (
						select tb1.odate
							, tb1.order_table
							, tb1.application
							, tb1.group_name
							, tb1.status
							, tb1.job_name
						from $active_net_name$JOB tb1
						where tb1.odate <![CDATA[>=]]> REPLACE(SUBSTR(#p_s_odate#, 3, 8), '/', '')
							and tb1.odate <![CDATA[<=]]>  REPLACE(SUBSTR(#p_e_odate#, 3, 8), '/', '')
						<isNotEmpty prepend="and" property="p_sched_table">
				        	tb1.order_table in
				         	<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
				            	#p_search_text_folder_list[]# 
				         	</iterate>
				      	</isNotEmpty>
						<isNotEmpty property="p_application_of_def">
							and tb1.application = #p_application_of_def#
						</isNotEmpty>
						<isNotEmpty property="p_group_name_of_def">
							and tb1.group_name = #p_group_name_of_def#
						</isNotEmpty>
						
						<!-- 운영자 권한은 모든 테이블(폴더) 조회 가능 -->
						<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
						<!-- 
						<isNotEqual property="s_user_gb" compareValue="02"> 
							and tb1.order_table = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = #s_user_cd#)
						</isNotEqual>
						-->
				
						union all 
						   
						select tb1.odate
							, tb1.order_table
							, tb1.application
							, tb1.group_name
							, tb1.status
							, tb1.job_name
				  		from $SCHEMA$.EZ_HISTORY_001 tb1
						where order_id not in (select order_id from $active_net_name$JOB)
							and odate <![CDATA[>=]]> REPLACE(SUBSTR(#p_s_odate#, 3, 8), '/', '')
							and odate  <![CDATA[<=]]>  REPLACE(SUBSTR(#p_e_odate#, 3, 8), '/', '')
						<isNotEmpty prepend="and" property="p_sched_table">
				        	tb1.order_table in
				         	<iterate property="p_search_text_folder_list" open="(" close=")" conjunction=",">
				            	#p_search_text_folder_list[]# 
				         	</iterate>
				      	</isNotEmpty>
						<isNotEmpty property="p_application_of_def">
							and tb1.application = #p_application_of_def#
						</isNotEmpty>
						<isNotEmpty property="p_group_name_of_def">
							and tb1.group_name = #p_group_name_of_def#
						</isNotEmpty>
						
						<!-- 운영자 권한은 모든 테이블(폴더) 조회 가능 -->
						<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
						<!-- 
						<isNotEqual property="s_user_gb" compareValue="02"> 
							and tb1.order_table = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = #s_user_cd#)
						</isNotEqual>
						-->
						
						) tb1, $SCHEMA$.EZ_JOB_MAPPER tb2
					where tb1.job_name = tb2.job
						<!-- and tb2.jobschedgb != '' -->
					<isNotEmpty property="data_center">
						and tb2.data_center = #data_center# 
					</isNotEmpty>
				) t
			group by data_center, order_table, application, group_name
			order by data_center, order_table, application, group_name
			) tt
			WHERE 1=1
	</select>
	<select id="errorLogTotal" resultClass="ErrorLogTotalBean" parameterClass="java.util.Map">
	/* ORACLE_Common > errorLogTotal */
		select * from(
			select
				<!-- (case when tb2.jobschedgb = '1' then '정기' when tb2.jobschedgb = '2' then '수시' else '-' end) as jobschedgb, -->
				<!-- 전북은행용 작업종류(정기/비정기) 정의(22.11.04) -->
				(case when tb4.user_daily = 'SYSTEM' then '정기' else '비정기' end) as jobschedgb, 
				tb1.job_name,
				to_char(tb1.host_time, 'YYYY/MM/DD HH24:MI:SS') as host_time,
				to_char(tb1.update_time, 'YYYY/MM/DD HH24:MI:SS') as action_date, <!-- 모니터링_오류관리 화면에서 update_time사용중. 일단 update_time컬럼 사용. -->
				(select user_nm from $SCHEMA$.ez_user where user_cd = tb1.update_user_cd) as udt_user_nm,
				tb1.error_description,
				tb1.message,
				(select dept_nm from $SCHEMA$.ez_dept where dept_cd = tb3.dept_cd) as dept_nm,
				(select duty_nm from $SCHEMA$.ez_duty where duty_cd = tb3.duty_cd) as duty_nm,
				tb3.user_nm
			from $SCHEMA$.ez_alarm tb1
				inner join $SCHEMA$.EZ_JOB_MAPPER tb2 on tb1.job_name = tb2.job
				left outer join $SCHEMA$.ez_user tb3 on tb1.user_cd = tb3.user_cd
				left outer join def_tables tb4 on tb1.order_table = tb4.sched_table AND tb1.DATA_CENTER = tb4.DATA_CENTER
			where (tb1.del_yn != 'Y' OR tb1.del_yn is null)
				and TO_CHAR(tb1.host_time, 'YYYYMMDD') between #p_s_odate# and #p_e_odate#
			<isNotEmpty property="data_center">
				and tb2.data_center = #data_center# 
			</isNotEmpty>
			
			<!-- 운영자 권한은 모든 테이블(폴더) 조회 가능 -->
			<!-- 토스 뱅크 사용자한테도 모든 폴더 조회 가능 (2020.11.05 강명준) -->
			<!-- 
			<isNotEqual property="s_user_gb" compareValue="02"> 
				and tb1.order_table = (SELECT select_table_name FROM $SCHEMA$.EZ_USER WHERE user_cd = #s_user_cd#)
			</isNotEqual>
			-->
			
			) t
		where 1=1 
		<isNotEmpty property="p_dept_nm">
			and UPPER(dept_nm) like '%'||UPPER(#p_dept_nm#)||'%'
		</isNotEmpty>
		order by host_time desc
		
		<isNotEmpty property="pagingNum">
			OFFSET $startRowNum$ ROWS FETCH FIRST $pagingNum$ ROWS ONLY
		</isNotEmpty>
	</select>
	
	<select id="errorLogTotalCnt" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > errorLogTotalCnt */
		select count(*) as total_cnt
		 from(
			select
				(case when tb4.user_daily = 'SYSTEM' then '정기' else '비정기' end) as jobschedgb, 
				tb1.job_name,
				to_char(tb1.host_time, 'YYYY/MM/DD HH24:MI:SS') as host_time,
				to_char(tb1.update_time, 'YYYY/MM/DD HH24:MI:SS') as action_date, <!-- 모니터링_오류관리 화면에서 update_time사용중. 일단 update_time컬럼 사용. -->
				(select user_nm from $SCHEMA$.ez_user where user_cd = tb1.update_user_cd) as udt_user_nm,
				tb1.error_description,
				tb1.message,
				(select dept_nm from $SCHEMA$.ez_dept where dept_cd = tb3.dept_cd) as dept_nm,
				(select duty_nm from $SCHEMA$.ez_duty where duty_cd = tb3.duty_cd) as duty_nm,
				tb3.user_nm
			from $SCHEMA$.ez_alarm tb1
				inner join $SCHEMA$.EZ_JOB_MAPPER tb2 on tb1.job_name = tb2.job
				left outer join $SCHEMA$.ez_user tb3 on tb1.user_cd = tb3.user_cd
				left outer join def_tables tb4 on tb1.order_table = tb4.sched_table AND tb1.DATA_CENTER = tb4.DATA_CENTER
			where (tb1.del_yn != 'Y' OR tb1.del_yn is null)
				and TO_CHAR(tb1.host_time, 'YYYYMMDD') between #p_s_odate# and #p_e_odate#
			<isNotEmpty property="data_center">
				and tb2.data_center = #data_center# 
			</isNotEmpty>
			
			) t
		where 1=1 
		<isNotEmpty property="p_dept_nm">
			and UPPER(dept_nm) like '%'||UPPER(#p_dept_nm#)||'%'
		</isNotEmpty>
		
	</select>
	
	<select id="dGetFolderList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dGetFolderList */
		SELECT a.GRP_ENG_NM, b.folder_auth, c.scode_nm, b.data_center
		 FROM
			$SCHEMA$.EZ_APP_GRP_CODE A left outer join $SCHEMA$.EZ_USER_FOLDER b
			on a.GRP_ENG_NM = b.folder_auth 
			and b.user_cd  = #user_cd#
			and b.data_center = #p_app_grp_data_center#
			LEFT OUTER JOIN $SCHEMA$.ez_scode c ON A.SCODE_CD = C.SCODE_CD
		WHERE 1=1
			AND A.SCODE_CD = ( CASE WHEN INSTR(#p_app_grp_data_center#, ',') > 0
								   THEN SUBSTR(#p_app_grp_data_center#, 0, INSTR(#p_app_grp_data_center#, ',')-1)
								   ELSE #p_app_grp_data_center# END )
			AND A.GRP_DEPTH = 1
			AND A.GRP_USE_YN = 'Y'
			<isNotEmpty property="p_search_folder">
				AND (UPPER(A.GRP_ENG_NM) like '%'||#p_search_folder#||'%' or LOWER(A.GRP_ENG_NM) like '%'||#p_search_folder#||'%')
			</isNotEmpty>
			AND B.FOLDER_AUTH is NULL
		ORDER BY A.GRP_ENG_NM ASC	
	</select>
	
	<select id="dGetAllFolderList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dGetAllFolderList */
		SELECT GRP_ENG_NM as sched_table, GRP_ENG_NM, B.SCODE_NM
		 FROM
			$SCHEMA$.EZ_APP_GRP_CODE A
		   ,$SCHEMA$.EZ_SCODE B 
		WHERE 1=1
			AND A.SCODE_CD = ( CASE WHEN INSTR(#p_app_grp_data_center#, ',') > 0
								   THEN SUBSTR(#p_app_grp_data_center#, 0, INSTR(#p_app_grp_data_center#, ',')-1)
								   ELSE #p_app_grp_data_center# END )
			AND A.GRP_DEPTH = 1
			AND A.GRP_USE_YN = 'Y'
			<isNotEmpty property="p_search_folder">
				AND (UPPER(A.GRP_ENG_NM) like '%'||#p_search_folder#||'%' or LOWER(A.GRP_ENG_NM) like '%'||#p_search_folder#||'%')
			</isNotEmpty>
			AND A.SCODE_CD = B.SCODE_CD
		ORDER BY A.GRP_ENG_NM ASC	
	</select>
	
	<select id="dGetUserFolderList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > dGetUserFolderList */
		SELECT a.GRP_ENG_NM, b.folder_auth, c.scode_nm, b.data_center
		 FROM
			$SCHEMA$.EZ_APP_GRP_CODE A left outer join $SCHEMA$.EZ_USER_FOLDER b
			on a.GRP_ENG_NM = b.folder_auth 
			and b.user_cd  = #user_cd#
			and b.data_center = #p_app_grp_data_center#
			LEFT OUTER JOIN $SCHEMA$.ez_scode c ON A.SCODE_CD = C.SCODE_CD
		WHERE 1=1
			AND A.SCODE_CD = ( CASE WHEN INSTR(#p_app_grp_data_center#, ',') > 0
								   THEN SUBSTR(#p_app_grp_data_center#, 0, INSTR(#p_app_grp_data_center#, ',') -1)
								   ELSE #p_app_grp_data_center# END )
			AND A.GRP_DEPTH = 1
			AND A.GRP_USE_YN = 'Y'
			<isNotEmpty property="p_search_folder">
				AND (UPPER(A.GRP_ENG_NM) like '%'||#p_search_folder#||'%' or LOWER(A.GRP_ENG_NM) like '%'||#p_search_folder#||'%')
			</isNotEmpty>
			AND B.FOLDER_AUTH IS NOT NULL
		ORDER BY A.GRP_ENG_NM ASC	
	</select>
	
	<select id="defJobExceptMapper" resultClass="DocInfoBean" parameterClass="java.util.Map">
	/* ORACLE_Common > defJobExceptMapper */
		select
			coalesce((select sched_table from def_tables where table_id = a.table_id),'') sched_table,
			a.application,
			a.group_name,
			a.job_name,
			LISTAGG(d.when_cond, ',') WITHIN GROUP (ORDER BY d.when_cond) AS when_cond,
			LISTAGG(NVL(d.shout_time, ''), ',') WITHIN GROUP (ORDER BY d.when_cond) AS shout_time
		from def_job a
				LEFT OUTER JOIN def_shout d ON d.table_id = a. table_id AND d.job_id = a.job_id, def_tables c
			,(
				select job_name from def_job a, def_tables b where a.table_id = b.table_id AND b.data_center = (SELECT scode_eng_nm FROM $SCHEMA$.ez_scode WHERE scode_cd =  ( CASE WHEN INSTR(#job_search_data_center#, ',') > 0
																   																												THEN SUBSTR(#job_search_data_center#, 0, INSTR(#job_search_data_center#, ',')-1)
																	  																											ELSE #job_search_data_center# END ))
				MINUS
				select job from $SCHEMA$.ez_job_mapper
			)b
		where a.job_name = b.job_name
		  and a.table_id = c.table_id
		  and c.data_center = (SELECT scode_eng_nm FROM $SCHEMA$.ez_scode WHERE scode_cd = ( CASE WHEN INSTR(#job_search_data_center#, ',') > 0
														   									THEN SUBSTR(#job_search_data_center#, 0, INSTR(#job_search_data_center#, ',')-1)
															  								ELSE #job_search_data_center# END ))
		<!-- SC 복수 작업명 검색가능 요건으로 변경 (2020.10.20 김수정) -->
		<isNotEmpty property="p_job_name" open="(" close=")" prepend="and">
<!-- 			and UPPER(a.job_name) like UPPER(#p_job_name#) -->
			<iterate property="p_job_name" conjunction="OR">
				a.job_name like ''||#p_job_name[]#||'%'
			</iterate>
		</isNotEmpty>
		GROUP BY
		a.table_id, a.application, a.group_name, a.job_name, a.description, a.creation_date
		order by a.creation_date desc
	</select>
	
	<select id="cmTable" resultClass="AppGrpBean" parameterClass="java.util.Map">
	/* ORACLE_Common > cmTable */
		select sched_table,
				(select table_type from def_tables where sched_table = tb1.sched_table AND data_center = (SELECT scode_eng_nm FROM $SCHEMA$.ez_scode WHERE scode_cd = #app_grp_data_center#)) as table_type,
				(select user_daily from def_tables where sched_table = tb1.sched_table AND data_center = (SELECT scode_eng_nm FROM $SCHEMA$.ez_scode WHERE scode_cd = #app_grp_data_center#)) as user_daily
		from (
			SELECT sched_table FROM def_tables where data_center = (SELECT scode_eng_nm FROM $SCHEMA$.ez_scode WHERE scode_cd = #app_grp_data_center#)
				MINUS
			SELECT grp_eng_nm  FROM $SCHEMA$.ez_app_grp_code WHERE grp_depth = 1 AND grp_eng_nm IS NOT NULL AND scode_cd = #app_grp_data_center#
		) tb1
		where 1=1

		<isNotEmpty property="p_code_name">
			and UPPER(sched_table) like '%'||UPPER(#p_code_name#)||'%'
		</isNotEmpty>
		order by sched_table
	</select>
	<select id="cmApplication" resultClass="AppGrpBean" parameterClass="java.util.Map">
	/* ORACLE_Common > cmApplication */
		select
			sched_table,
			application,
			(select grp_cd from $SCHEMA$.ez_app_grp_code where grp_eng_nm = tb1.sched_table and grp_depth = 1 and scode_cd = #app_grp_data_center#) as grp_cd
		from (
			select sched_table, application
			from def_job tb1, def_tables tb2
			where tb1.table_id = tb2.table_id
				and (sched_table is not null or sched_table IS NOT NULL)
				and (application is not null or application IS NOT NULL)
				AND tb2.DATA_CENTER = (SELECT scode_eng_nm FROM $SCHEMA$.ez_scode WHERE scode_cd = #app_grp_data_center#)
			group by sched_table, application

		MINUS
			select (select grp_eng_nm from $SCHEMA$.ez_app_grp_code where grp_cd = tb2.grp_parent_cd) as sched_table, tb2.grp_eng_nm
			from (select grp_cd, grp_parent_cd, grp_eng_nm from $SCHEMA$.ez_app_grp_code where grp_depth = 1 and grp_eng_nm IS NOT NULL) tb1,
				(select grp_cd, grp_parent_cd, grp_eng_nm from $SCHEMA$.ez_app_grp_code where grp_depth = 2 and grp_eng_nm IS NOT NULL) tb2
			where tb1.grp_cd = nvl(tb2.grp_parent_cd, null)
		) tb1
		where 1=1
		<isNotEmpty property="p_code_name">
			and UPPER(application) like '%'||UPPER(#p_code_name#)||'%'
		</isNotEmpty>
		order by grp_cd,sched_table
	</select>
	<select id="cmGroup" resultClass="AppGrpBean" parameterClass="java.util.Map">
	/* ORACLE_Common > cmGroup */
		select
			sched_table,
			application,
			group_name, 
			(select grp_cd from $SCHEMA$.ez_app_grp_code where grp_eng_nm = tb1.application and grp_depth = 2 and scode_cd = #app_grp_data_center# and grp_parent_cd = (select grp_cd from $SCHEMA$.ez_app_grp_code where grp_eng_nm = tb1.sched_table and grp_depth = 1 and scode_cd = #app_grp_data_center#)) as grp_cd
		from (
			select sched_table, application, group_name
			from def_job tb1, def_tables tb2
			where tb1.table_id = tb2.table_id
				and (sched_table is not null or sched_table IS NOT NULL)
				and (application is not null or application IS NOT NULL)
				and (group_name is not null or group_name IS NOT NULL)
				AND tb2.DATA_CENTER = (SELECT scode_eng_nm FROM $SCHEMA$.ez_scode WHERE scode_cd = #app_grp_data_center#)
			group by sched_table, application, group_name
				MINUS
			select (select grp_eng_nm from $SCHEMA$.ez_app_grp_code where grp_cd = tb2.grp_parent_cd) as sched_table,
					(select grp_eng_nm from $SCHEMA$.ez_app_grp_code where grp_cd = tb3.grp_parent_cd) as application, tb3.grp_eng_nm
			from (select grp_cd, grp_parent_cd, grp_eng_nm from $SCHEMA$.ez_app_grp_code where grp_depth = 1 and grp_eng_nm IS NOT NULL) tb1,
					(select grp_cd, grp_parent_cd, grp_eng_nm from $SCHEMA$.ez_app_grp_code where grp_depth = 2 and grp_eng_nm IS NOT NULL) tb2,
					(select grp_cd, grp_parent_cd, grp_eng_nm from $SCHEMA$.ez_app_grp_code where grp_depth = 3 and grp_eng_nm IS NOT NULL) tb3
			where tb1.grp_cd = nvl(tb2.grp_parent_cd, null)
				and tb2.grp_cd = nvl(tb3.grp_parent_cd, null)
		) tb1
		where 1=1
		<isNotEmpty property="p_code_name">
			and UPPER(group_name) like '%'||UPPER(#p_code_name#)||'%'
		</isNotEmpty>
		order by grp_cd,sched_table
	</select>
	
	<select id="quartzList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > quartzList */
 		SELECT
 			tb1.quartz_name
 			,tb1.trace_log_path
 			,tb1.status_cd
 			,tb1.status_log
 			,TO_CHAR(tb1.ins_date,'YYYY/MM/DD HH24:MI:SS') ins_date
		FROM $SCHEMA$.EZ_QUARTZ_LOG tb1, (SELECT MAX(quartz_cd) AS quartz_cd FROM $SCHEMA$.EZ_QUARTZ_LOG GROUP BY quartz_name) tb2
		WHERE 1=1 
		AND tb1.quartz_cd = tb2.quartz_cd
		<isNotEmpty prepend="and" property="p_search_text">			
			quartz_name  LIKE '%'||#p_search_text#||'%'
		</isNotEmpty>
		order by quartz_name
	</select>
	
	<select id="popupQuartzList" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > popupQuartzList */
 		SELECT 
 			tb1.quartz_name
 			,tb1.trace_log_path
 			,tb1.status_cd
 			,tb1.status_log
 			,TO_CHAR(tb1.ins_date,'YYYY/MM/DD HH24:MI:SS') ins_date
		FROM $SCHEMA$.EZ_QUARTZ_LOG tb1
		WHERE 1=1 
		<isNotEmpty prepend="and" property="quartz_name">		
			UPPER(quartz_name) LIKE '%'||UPPER(#quartz_name#)||'%'
		</isNotEmpty>
		
		<isNotEmpty property="p_s_date">
			AND to_char(ins_date, 'YYYYMMDD') >= REPLACE(#p_s_date#, '/', '')
		</isNotEmpty>
		<isNotEmpty property="p_e_date">
			AND to_char(ins_date, 'YYYYMMDD') <![CDATA[ <= ]]> REPLACE(#p_e_date#, '/', '')
		</isNotEmpty>
		
		<isNotEmpty property="p_search_gubun">
			<isEqual property="p_search_gubun" compareValue="Y">
				AND status_cd = '1'
			</isEqual>
			<isNotEqual property="p_search_gubun" compareValue="Y">
				AND status_cd != '1'
			</isNotEqual>
		</isNotEmpty>
		
		order by ins_date desc
	</select>
	
	<select id="groupUserLineList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > groupUserLineList */
		SELECT
			A.GROUP_LINE_CD, A.GROUP_LINE_GRP_CD, A.APPROVAL_CD as APPROVAL_CD, B.DEL_YN,

			TO_CHAR(A.INS_DATE, 'YYYY.MM.DD') AS INS_DATE,
			B.USER_NM AS APPROVAL_NM,
			(SELECT DUTY_NM FROM $SCHEMA$.EZ_DUTY WHERE DUTY_CD = B.DUTY_CD) AS DUTY_NM,
			(SELECT DEPT_NM FROM $SCHEMA$.EZ_DEPT WHERE DEPT_CD = B.DEPT_CD) AS DEPT_NM
				,B.USER_CD
				,B.USER_ID
				,B.USER_HP
		FROM
			$SCHEMA$.EZ_GROUP_APPROVAL_LINE A,
			$SCHEMA$.EZ_USER B
		WHERE 1=1
		  AND	A.GROUP_LINE_GRP_CD = #group_user_group_cd#
		AND A.APPROVAl_CD = B.USER_CD
 		AND B.DEL_YN = 'N'
		ORDER BY B.USER_NM
	</select>
	
	<select id="adminApprovalLineCd" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > adminApprovalLineCd */
		SELECT admin_line_grp_cd
		FROM $SCHEMA$.EZ_ADMIN_APPROVAL_GROUP
		WHERE 1=1
		AND use_yn = 'Y'
		AND post_approval_yn = #post_approval_yn#
		AND doc_gubun = #doc_gb#
	</select>
	
	<select id="groupUserLineSeq" parameterClass="java.util.Map" resultClass="java.lang.Integer">
	/* ORACLE_Common > groupUserLineSeq */
		SELECT nvl(MAX(GROUP_USER_LINE_CD),0)+1 FROM $SCHEMA$.EZ_GROUP_USER_LINE
	</select>
	
	<insert id="groupUserLineInsert" parameterClass="java.util.Map">
	/* ORACLE_Common > groupUserLineInsert */				
		INSERT INTO $SCHEMA$.EZ_GROUP_USER_LINE(GROUP_USER_LINE_CD, GROUP_USER_GROUP_CD, USER_CD, INS_USER_CD, ins_date)
		VALUES($group_user_line_cd$, $group_user_group_cd$, $approval_cd$, $s_user_cd$, sysdate) 
	</insert>
	
	<update id="groupUserLineUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > groupUserLineUpdate */
		UPDATE $SCHEMA$.EZ_GROUP_USER_LINE
			<dynamic prepend="SET">
				<isNotEmpty property="approval_cd" prepend=",">
					USER_CD = $approval_cd$
				</isNotEmpty>
				<isNotEmpty property="use_yn" prepend=",">
					USE_YN = #use_yn#
				</isNotEmpty>				
			</dynamic>
		WHERE
			GROUP_USER_LINE_CD = $group_user_line_cd$
	</update>
	
	<delete id="groupUserLineDelete" parameterClass="java.util.Map">
	/* ORACLE_Common > groupUserLineDelete */
		DELETE FROM $SCHEMA$.EZ_GROUP_USER_LINE WHERE GROUP_USER_LINE_CD = $group_user_line_cd$
	</delete>
	
	<select id="getApprovalLine" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > getApprovalLine */
		SELECT
			  A.ADMIN_LINE_CD
			, A.ADMIN_LINE_GRP_CD
			, A.APPROVAL_CD
			, A.USE_YN
			, A.APPROVAL_SEQ
			, A.APPROVAL_GB
			, case when A.APPROVAL_TYPE = '01' then '순차' else '후결' end as APPROVAL_TYPE
			,TO_CHAR(A.INS_DATE, 'YYYY.MM.DD') AS INS_DATE
			,(SELECT DUTY_NM FROM $SCHEMA$.EZ_DUTY WHERE DUTY_CD = (SELECT DUTY_CD FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD)) AS DUTY_NM
			,(SELECT DEPT_NM FROM $SCHEMA$.EZ_DEPT WHERE DEPT_CD = (SELECT DEPT_CD FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD)) AS DEPT_NM

<!-- 			,CASE WHEN a.approval_cd is not null THEN (SELECT USER_NM FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD) ELSE '개인결재' END AS APPROVAL_NM -->
<!-- 			,CASE WHEN a.approval_cd is not null then (SELECT USER_ID FROM $SCHEMA$.EZ_USER where user_cd = A.approval_cd ) ELSE '개인결재' end AS APPROVAL_USER_ID -->

			,case when (a.approval_cd > 0 or a.group_line_grp_cd > 0) then (SELECT USER_NM FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD) ELSE '개인결재' END AS APPROVAL_NM
			,case when (a.approval_cd > 0 or a.group_line_grp_cd > 0) then (SELECT USER_ID FROM $SCHEMA$.EZ_USER WHERE USER_CD = A.APPROVAL_CD) ELSE '개인결재' END AS APPROVAL_USER_ID

			,A.GROUP_LINE_GRP_CD
			,(SELECT GROUP_LINE_GRP_NM FROM $SCHEMA$.EZ_GROUP_APPROVAL_GROUP WHERE GROUP_LINE_GRP_CD = A.GROUP_LINE_GRP_CD) AS GROUP_LINE_GRP_NM
			
			,b.approval_nm as group_approval_user_nm
			,b.USER_ID as group_approval_user_id
			,b.USER_CD as group_approval_user_cd
			,b.DUTY_NM as group_approval_duty_nm
			,b.DEPT_NM as group_approval_dept_nm
			
			,(select count(group_line_grp_cd) from $SCHEMA$.EZ_GROUP_APPROVAL_LINE c, $SCHEMA$.ez_user d where c.GROUP_LINE_GRP_CD = a.GROUP_LINE_GRP_CD and c.approval_cd = d.user_cd and d.del_yn != 'Y') as GROUP_MEMBER_CNT
		FROM
			$SCHEMA$.EZ_ADMIN_APPROVAL_LINE A
			
			left outer join (SELECT
				A.GROUP_LINE_CD, A.GROUP_LINE_GRP_CD, A.APPROVAL_CD, A.USE_YN, A.APPROVAL_SEQ,
				TO_CHAR(A.INS_DATE, 'YYYY.MM.DD') AS INS_DATE, 
				B.USER_NM AS APPROVAL_NM,
				(SELECT DUTY_NM FROM $SCHEMA$.EZ_DUTY WHERE DUTY_CD = B.DUTY_CD) AS DUTY_NM,
				(SELECT DEPT_NM FROM $SCHEMA$.EZ_DEPT WHERE DEPT_CD = B.DEPT_CD) AS DEPT_NM
				,B.USER_CD
				,B.USER_ID
			FROM
				$SCHEMA$.EZ_GROUP_APPROVAL_LINE A,
				$SCHEMA$.EZ_USER B
			WHERE 1=1
			AND A.APPROVAL_CD = B.USER_CD
			AND B.DEL_YN != 'Y'
			ORDER BY B.USER_NM)B on a.GROUP_LINE_GRP_CD = b.GROUP_LINE_GRP_CD
		where 1=1
		and	A.ADMIN_LINE_GRP_CD = #admin_line_grp_cd#
		
		order by approval_seq
		
	</select>
	
	<select id="approavlGroupCnt" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > approavlGroupCnt */
	
		SELECT A.ADMIN_LINE_CD, A.ADMIN_LINE_GRP_CD, A.GROUP_LINE_GRP_CD
		FROM $SCHEMA$.EZ_ADMIN_APPROVAL_LINE A
		WHERE 1=1
		<isNotEmpty property="group_line_grp_cd">
			AND A.GROUP_LINE_GRP_CD = $group_line_grp_cd$
		</isNotEmpty>
		
		
	</select>
	
	<!-- alarmInfo -->
	<select id="alarmInfo" resultClass="UserBean" parameterClass="java.util.Map">
	/* ORACLE_Common > alarmInfo */
		
		select
			alarm_seq as row_num
			, alarm_seq
			, alarm_standard
			, alarm_min
			, alarm_max
			, alarm_unit
			, alarm_time
			, alarm_over
			, alarm_over_time
		from $SCHEMA$.EZ_ALARM_INFO
		where 1=1
		
		ORDER BY row_num
	</select>	
	
	<!-- spAlarmInfoPrc -->
	<parameterMap id="spAlarmInfoPrcMap" class="java.util.Map">
		<parameter property="r_code" 					javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		<parameter property="r_msg" 					javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT" />
		
		<parameter property="flag" 						javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="row_num" 					javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_standard" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_min" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_max" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_unit" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_time" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_over" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="alarm_over_time" 			javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		
		<parameter property="s_user_cd" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="s_user_ip" 				javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
	</parameterMap>
	<procedure id="spAlarmInfoPrc" resultClass="java.util.List" parameterMap="spAlarmInfoPrcMap">
		{ call $SCHEMA$.SP_EZ_ALARMINFO_PRC( 	?, ?, ?, ?, ?,
												?, ?, ?, ?, ?,
												?, ?, ?
							 					) 
		}
	</procedure>
	
	<select id="jobHistoryInfo" resultClass="CommonBean" parameterClass="java.util.Map">
	/* ORACLE_Common > jobHistoryInfo */
		select 
			 doc_cd
			, doc_gb
			, to_char(apply_date, 'YYYY/MM/DD HH24:MI:SS') as apply_date
			, apply_cd
			, title
			, job_name
			, data_center 
			,( CASE WHEN INSTR(data_center, ',') > 0 
					THEN (SELECT scode_nm FROM $SCHEMA$.EZ_SCODE WHERE scode_cd = SUBSTR(data_center, 1, INSTR(data_center, ',')-1)) 
					ELSE data_center END ) AS data_center_name
			, task_nm_detail
		from (
			select 
				t1.doc_cd, t1.doc_gb, t1.apply_date, t1.apply_cd 
				,(case when t1.doc_gb='01' then (select job_name from $SCHEMA$.EZ_doc_01 where doc_cd=t1.doc_cd)
						when t1.doc_gb='02' then (select job_name from $SCHEMA$.EZ_doc_02 where doc_cd=t1.doc_cd)
						when t1.doc_gb='03' then (select job_name from $SCHEMA$.EZ_doc_03 where doc_cd=t1.doc_cd)
						when t1.doc_gb='04' then (select job_name from $SCHEMA$.EZ_doc_04 where doc_cd=t1.doc_cd)
						when t1.doc_gb='05' then (select job_name from $SCHEMA$.EZ_doc_05 where doc_cd=t1.doc_cd)
						when t1.doc_gb='07' then (select job_name from $SCHEMA$.EZ_doc_07 where doc_cd=t1.doc_cd)
				 		when t1.doc_gb='08' then (select job_name from $SCHEMA$.EZ_doc_08 where doc_cd=t1.doc_cd)
				 		else '' end) AS job_name
				,(case when t1.doc_gb='01' then (select title from $SCHEMA$.EZ_doc_01 where doc_cd=t1.doc_cd)
						when t1.doc_gb='02' then (select title from $SCHEMA$.EZ_doc_02 where doc_cd=t1.doc_cd)
						when t1.doc_gb='03' then (select title from $SCHEMA$.EZ_doc_03 where doc_cd=t1.doc_cd)
						when t1.doc_gb='04' then (select title from $SCHEMA$.EZ_doc_04 where doc_cd=t1.doc_cd)
						when t1.doc_gb='05' then (select title from $SCHEMA$.EZ_doc_05 where doc_cd=t1.doc_cd)
						when t1.doc_gb='07' then (select title from $SCHEMA$.EZ_doc_07 where doc_cd=t1.doc_cd)
				    	when t1.doc_gb='08' then (select title from $SCHEMA$.EZ_doc_08 where doc_cd=t1.doc_cd)
				 		else '' end) AS title
				,(case when t1.doc_gb='01' then (select data_center from $SCHEMA$.EZ_doc_01 where doc_cd=t1.doc_cd)
						when t1.doc_gb='02' then (select data_center from $SCHEMA$.EZ_doc_02 where doc_cd=t1.doc_cd)
						when t1.doc_gb='03' then (select data_center from $SCHEMA$.EZ_doc_03 where doc_cd=t1.doc_cd)
						when t1.doc_gb='04' then (select data_center from $SCHEMA$.EZ_doc_04 where doc_cd=t1.doc_cd)
						when t1.doc_gb='05' then (select data_center from $SCHEMA$.EZ_doc_05 where doc_cd=t1.doc_cd)
						when t1.doc_gb='07' then (select data_center from $SCHEMA$.EZ_doc_07 where doc_cd=t1.doc_cd)
				        when t1.doc_gb='08' then (select data_center from $SCHEMA$.EZ_doc_08 where doc_cd=t1.doc_cd)
				        else '' end) AS data_center 
				, '' as  task_nm_detail
			from $SCHEMA$.ez_doc_master t1
			where t1.doc_gb != '09'
			and t1.main_doc_cd is null
			
			UNION all
			
			select 
				 s1.doc_cd 
				, s1.doc_gb 
				, s1.apply_date 
				, s1.apply_cd 
				, s2.job_name
				, s3.title
				, s3.data_center 
				, '' as  task_nm_detail
			from $SCHEMA$.ez_doc_master s1
			join $SCHEMA$.ez_doc_06_detail s2
				on s1.doc_cd = s2.doc_cd 
			join $SCHEMA$.ez_doc_06 s3
				on s1.doc_cd = s3.doc_cd 
				
			UNION all
			
			select 
				 st1.doc_cd 
				, '09' as doc_gb
				, st1.apply_date 
				, st1.apply_cd 
				,(case when st1.doc_gb='01' then (select job_name from $SCHEMA$.EZ_doc_01 where doc_cd=st1.doc_cd)
						when st1.doc_gb='02' then (select job_name from $SCHEMA$.EZ_doc_02 where doc_cd=st1.doc_cd)
						when st1.doc_gb='04' then (select job_name from $SCHEMA$.EZ_doc_04 where doc_cd=st1.doc_cd)
						when st1.doc_gb='05' then (select job_name from $SCHEMA$.EZ_doc_05 where doc_cd=st1.doc_cd)
						when st1.doc_gb='07' then (select job_name from $SCHEMA$.EZ_doc_07 where doc_cd=st1.doc_cd)
				 		when st1.doc_gb='08' then (select job_name from $SCHEMA$.EZ_doc_08 where doc_cd=st1.doc_cd)
				 		else '' end) AS job_name
				 , st2.title
				, st2.data_center 
				,(case  when st1.doc_gb='05' then '05'
						when st1.doc_gb='07' then '07'
				 		else '' end) AS task_nm_detail
			from $SCHEMA$.ez_doc_master st1
			join $SCHEMA$.ez_doc_09 st2
			on st1.main_doc_cd = st2.doc_cd 
			
		) tb1
		where 1=1
		and tb1.apply_cd = '02'
		<isNotEmpty property="job_name">
			and tb1.job_name = #job_name#
		</isNotEmpty>
		<isNotEmpty property="data_center">
			and tb1.data_center = #data_center#
		</isNotEmpty>
		
		order by doc_cd desc
	</select>
		 
	<select id="EzHostList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > EzHostList */
		select 
		host_cd,
		data_center,
		agent,
		agent_nm
		from $SCHEMA$.ez_host  
	</select>
	
	<select id="EmOwnerList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > EmOwnerList */
		SELECT
		NODE_ID, OWNER, (SELECT HOST_CD FROM $SCHEMA$.EZ_HOST WHERE AGENT = NODE_ID) AS HOST_CD
			
		FROM (
			SELECT NODE_ID, OWNER
	 		FROM DEF_JOB
	 		WHERE 1=1
	 		AND NODE_ID IS NOT NULL
	 		AND UPPER(OWNER) LIKE '%'||UPPER(#p_code_name#)||'%'
	 		GROUP BY NODE_ID, OWNER

			MINUS
		
			SELECT TB3.AGENT AS NODE_ID, TB1.SCODE_NM AS OWNER 
			FROM   $SCHEMA$.EZ_SCODE TB1
			 	 , $SCHEMA$.EZ_MCODE TB2
			  	 , $SCHEMA$.EZ_HOST TB3
			WHERE 1=1
			AND TB1.MCODE_CD = TB2.MCODE_CD
			AND TB2.MCODE_CD = 'M5' 
			AND TB1.SCODE_USE_YN = 'Y'
			AND TB1.HOST_CD = TB3.HOST_CD
		) TB1
		WHERE 1=1
		ORDER BY NODE_ID 
	</select>
	
	<select id="EzOwnerList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > EzOwnerList */
		select 
		host_cd,
		data_center,
		agent,
		agent_nm
		from $SCHEMA$.ez_host  
	</select>
	
	<select id="smartTableChk" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > smartTableChk */
		select
			COUNT(1) as total_count
		from def_job 
		WHERE 1=1
		AND task_type = 'SMART Table'
		<isNotEmpty property="smart_table_nm">
			and table_id = (select table_id from def_tables where SCHED_TABLE = #smart_table_nm#)
		</isNotEmpty>
		<isNotEmpty property="smart_job">
			and job_name = #smart_job#
		</isNotEmpty>
	</select>
	
	<select id="subTableChk" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > subTableChk */
		select
			COUNT(1) as total_count
		from def_job a
		left outer join DEF_TABLES b on a.TABLE_ID = b.TABLE_ID
		WHERE 1=1
		AND task_type = 'Sub-Table'
		and a.PARENT_TABLE = #parent_table_nm#
		and a.JOB_NAME = #sub_table_nm#
		and b.DATA_CENTER  = (case when INSTR(#data_center#, ',') > 0
								   then SUBSTR(#data_center#, INSTR(#data_center#, ',')+1, length(#data_center#))
								   else #data_center# END)
	</select>
	
	
	<select id="subTableList" parameterClass="java.util.Map" resultClass="AppGrpBean">
	/* ORACLE_Common > subTableList */
		select 
			(case when TASK_TYPE = 'SMART Table' then job_name
				  when TASK_TYPE = 'Sub-Table' then PARENT_TABLE || '/' || job_name end) as sub_table_nm
		from def_job 
		where 1=1 
		
		<isNotEmpty prepend="and" property="table_id_list" >
			table_id in
			<iterate property="table_id_list" open="(" close=")" conjunction=","> 
				#table_id_list[]#
			</iterate>
		</isNotEmpty>
		<isNotEmpty prepend="and" property="smart_table_id" >
			table_id = #smart_table_id#
		</isNotEmpty>
		<isNotEmpty property="smart_table_nm">
			and table_id = (select table_id from def_tables where SCHED_TABLE = #smart_table_nm#)
		</isNotEmpty>
		and TASK_TYPE in ('SMART Table', 'Sub-Table')
		order by job_name
	</select>
	
	<select id="setvarList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > setvarList */
		select 
			doc_cd
			,seq
			,var_name
			,var_value
		from $SCHEMA$.ez_doc_setvar
		where 1=1
		and doc_cd = #doc_cd#
	</select>
	<select id="smartTreeList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > smartTreeList */
		select job_name
	   , odate
	   , order_id
	   , task_type
	   , DENSE_RANK() over (order by vr_group_rba) AS group_no
	   , hailaki
	   , rba
	   , grp_rba
	   ,( case when job_name = (select SUBSTR(parent_table, INSTR(parent_table, '/', -1) + 1)
						 				   from def_job
						 				   where job_name = #job_name#) then 'check' else '' end) as check_box_yn 
		from (
				select job_name, odate, order_id, task_type, rba, grp_rba, rba AS vr_grp_rba, order_table
					   , $SCHEMA$.get_vr_group_rba(rba, '$active_net_name$job') AS vr_group_rba
					   , '1' as hailaki
				from $active_net_name$job
				where rba in (select grp_rba
							  from $active_net_name$job
							  where job_name = (select SUBSTR(parent_table, INSTR(parent_table, '/', -1) + 1)
							 				    from def_job
							 				    where job_name = #job_name#)
							  and delete_flag != '1')
							  
				union 
				
				select job_name, odate, order_id, task_type, rba, grp_rba, rba AS vr_grp_rba, order_table
		    		   , $SCHEMA$.get_vr_group_rba(rba, '$active_net_name$job') AS vr_group_rba
					   , '2' as hailaki
				from $active_net_name$job
				where rba in (select rba
							  from $active_net_name$job
							  where job_name = (select SUBSTR(parent_table, INSTR(parent_table, '/', -1) + 1)
							 				    from def_job
							 				    where job_name = #job_name#)
							  and delete_flag != '1')
				
				union
							  
				select job_name, odate, order_id, task_type, rba, grp_rba, (CASE WHEN grp_rba = '000000' THEN rba ELSE grp_rba END) AS vr_grp_rba, order_table
					   , $SCHEMA$.get_vr_group_rba(rba, '$active_net_name$job') AS vr_group_rba
					   , '3' as hailaki
				from $active_net_name$job
				where grp_rba in (select rba
								 from $active_net_name$job
								 where job_name = (select SUBSTR(parent_table, INSTR(parent_table, '/', -1) + 1)
								 				   from def_job
								 				   where job_name = #job_name#)
								 and delete_flag != '1')
				and task_type != (case when (select length(parent_table) - length(replace(parent_table, '/', '')) from def_job where job_name = #job_name#) = 0 then 'Sub-Table'
						  else ' ' end)
		) t
		where 1=1
		<isNotEmpty property="p_search_odate" prepend="AND">
			t.odate = SUBSTR(#p_search_odate#, 3, 8)
		</isNotEmpty>
		<isNotEmpty property="p_search_job_name" prepend="AND">
			t.job_name = #p_search_job_name#
		</isNotEmpty>
		order by group_no, hailaki, (case when task_type = 'SMART Table' then 1 
						  				  when task_type = 'Sub-Table' then 2
						  				  else 3 end), job_name
				  
	</select>
	
	<select id="smartTreeInfoList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > smartTreeInfoList */
		SELECT T.*
		FROM(
		
			SELECT job_name, odate, order_id, task_type, rba, grp_rba
			FROM $active_net_name$job
			WHERE rba IN (SELECT rba
						  FROM $active_net_name$job
						  WHERE job_name = (SELECT SUBSTR(parent_table, INSTR(parent_table, '/', -1) + 1) FROM def_job WHERE job_name = #job_name#)
						  AND delete_flag != '1')
			
			UNION
			
			SELECT job_name, odate, order_id, task_type, rba, grp_rba
			FROM $active_net_name$job
			WHERE grp_rba IN (SELECT rba
							  FROM $active_net_name$job
							  WHERE job_name = (select SUBSTR(parent_table, INSTR(parent_table, '/', -1) + 1) FROM def_job WHERE job_name = #job_name#)
							  AND delete_flag != '1')
			
			UNION
			
			SELECT job_name, odate, order_id, task_type, rba, grp_rba
			FROM $active_net_name$job
			WHERE grp_rba IN ( SELECT rba
							   FROM $active_net_name$job
							   WHERE grp_rba IN (SELECT rba
												 FROM $active_net_name$job
												 WHERE job_name = (SELECT SUBSTR(parent_table, INSTR(parent_table, '/', -1) + 1) FROM def_job WHERE job_name = #job_name#)
												 AND delete_flag != '1'))
		)T
		WHERE 1=1
		<isNotEmpty property="odate" prepend="AND">
			t.odate = SUBSTR(#odate#, 3, 8)
		</isNotEmpty>
		<isNotEmpty property="smart_table_rba" prepend="AND">
			(rba = #smart_table_rba# 
			 OR grp_rba = #smart_table_rba#
			 OR grp_rba in (select rba from $active_net_name$job where grp_rba = #smart_table_rba#))
		</isNotEmpty>
		<isNotEmpty property="sub_table_rba" prepend="AND">
			(rba = (SELECT grp_rba FROM $active_net_name$job WHERE rba = #sub_table_rba#) 
			 OR rba = #sub_table_rba#
			 OR rba in (SELECT rba FROM $active_net_name$job WHERE grp_rba = #sub_table_rba#))

		</isNotEmpty>
		order by (case when task_type = 'SMART Table' then 1 
					   when task_type = 'Sub-Table' then 2
					   else 3 end), job_name
				  
	</select>
	
	
	<select id="emExcutingJobList" parameterClass="java.util.Map" resultClass="CommonBean">
	/* ORACLE_Common > emExcutingJobList */
	
		SELECT *
		FROM $active_net_name$job
		WHERE 1=1
		AND status = 'Executing'
				  
	</select>
	
	<select id="deletedJobAlarmList" resultClass="AlertBean" parameterClass="java.util.Map">
	/* ORACLE_Common > deletedJobAlarmList */
	
		select 
	t1.doc_cd
	,t1.doc_gb 
	,t2.job_name 
	,t1.apply_cd 
	,t1.user_cd 
	,t2.deleted_yn 
	,t3.data_center 
	,t3.user_cd_1
	,t3.user_cd_2
	,t3.user_cd_3
	,t3.user_cd_4
	,t3.user_cd_5
	,t3.user_cd_6
	,t3.user_cd_7
	,t3.user_cd_8
	,t3.user_cd_9
	,t3.user_cd_10
	,t3.grp_cd_1
	,t3.grp_cd_2
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_1 ) AS user_id
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_2 ) AS user_id2
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_3 ) AS user_id3
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_4 ) AS user_id4
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_5 ) AS user_id5
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_6 ) AS user_id6
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_7 ) AS user_id7
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_8 ) AS user_id8
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_9 ) AS user_id9
	,( SELECT user_id FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_10 ) AS user_id10
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_1 ) AS user_hp
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_2 ) AS user_hp2
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_3 ) AS user_hp3
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_4 ) AS user_hp4
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_5 ) AS user_hp5
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_6 ) AS user_hp6
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_7 ) AS user_hp7
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_8 ) AS user_hp8
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_9 ) AS user_hp9
	,( SELECT REPLACE(user_hp, '-', '') FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_10 ) AS user_hp10
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_1 ) AS user_email
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_2 ) AS user_email2
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_3 ) AS user_email3
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_4 ) AS user_email4
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_5 ) AS user_email5
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_6 ) AS user_email6
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_7 ) AS user_email7
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_8 ) AS user_email8
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_9 ) AS user_email9
    ,( SELECT user_email FROM $SCHEMA$.EZ_USER WHERE user_cd = t3.user_cd_10 ) AS user_email10
	    	from $SCHEMA$.ez_doc_master t1 
		    left outer join $SCHEMA$.ez_doc_03 t2 on t1.doc_cd = t2.doc_cd 
		    left outer join $SCHEMA$.ez_job_mapper t3 on t2.job_name = t3.job 
		    where (t2.del_sms_yn is null or t2.del_sms_yn = '')
		      and t2.job_name in (
						    	select job_name
							      from def_job tb1 left outer join  $SCHEMA$.EZ_JOB_MAPPER  tb3 
							        on tb1.job_name = tb3.job
							      left outer join $SCHEMA$.ez_user tb4
							        on tb3.user_cd_1 = tb4.user_cd
							           ,def_lnki_p tb2
							     where tb1.job_id = tb2.job_id
							       and tb1.table_id = tb2.table_id
							       and tb2.condition in (
													    	SELECT CONCAT(d.job_name, '-OK')
													        FROM $SCHEMA$.ez_doc_03 d
													        WHERE d.deleted_yn = 'Y'
													    )
		    					)
	
	</select>
	
	<update id="delSmsUpdate" parameterClass="java.util.Map">
	/* ORACLE_Common > delSmsUpdate */
	
		UPDATE $SCHEMA$.EZ_DOC_03
		   SET del_sms_yn = 'Y'
		 WHERE job_name = #job_name#
	
	
	</update>
	
</sqlMap>